{
    "Ask Experienced Devs Weekly Thread: A weekly thread for inexperienced developers to ask experienced ones": {
        "title": "Ask Experienced Devs Weekly Thread: A weekly thread for inexperienced developers to ask experienced ones",
        "score": 14,
        "url": "https://www.reddit.com/r/ExperiencedDevs/comments/1dhkxk9/ask_experienced_devs_weekly_thread_a_weekly/",
        "content": "A thread for Developers and IT folks with less experience to ask more experienced souls questions about the industry.\n\n&#x200B;\n\nPlease keep top level comments limited to Inexperienced Devs. Most rules do not apply, but keep it civil. Being a jerk will not be tolerated.\n\n&#x200B;\n\n**Inexperienced Devs should refrain from answering other Inexperienced Devs' questions.**",
        "num_comments": 124,
        "comments": [
            "I'm a Sr. backend engineer with 5 YOE but I'm not very confidient with my database knowledge and proficiency(I actually only have ~1 YOE dealing with RDBMS)  \nIs there any recommend resource(book/course... etc) for me to pick it up ? thanks for the help",
            "I\u2019m planning on switching job, but I haven\u2019t really done anything that fits \u201cimproved performance by xx%\u201d. I was wondering if I can get some help with what to put on my resume? Some things I\u2019ve done:\n\n- build APIs for external partner integrations\n\n- review PRs to ensure code is not overly complicated, is clean and maintainable, etc\n\n- worked in a cloud environment (aws)\n\n- was given chance to lead a project and led architecting everything from ground up\n\n- gathered requirements with POs and worked with external partners\n\nAs you can see, there\u2019s nothing that I can do that says \u201cimproved performance\u201d or improved workflow etc. Any help?",
            "Anyone have experience with an engineering manager (who is also wearing the scrum master, product owner and product manager hats all the same time) who rewrites your tickets/incoming tickets to be LESS informative and descriptive than they were at creation? \n\nIt\u2019d be one thing if these rewrites were to just include some parcel of knowledge that got mistakenly left out but these are task tickets requesting specific actions done to specific sections of the code base, with relevant details needed that he comes along and turns into droning executive summaries that drop a lot of context and necessary information about what\u2019s being asked for. \n\nI\u2019ve politely mentioned it, he backed off, but it\u2019s started happening again and the result is a lot of back and forth time with other developers trying to unpack what we\u2019re even working on. \n\nAny feedback?",
            "I wrote this yesterday but maybe i will get more answer here:\n\n Im a junior ( less than one year experience) developer ( in title) but I keep on getting non coding roles that are mostly PM or analyst jobs. I come from a bootcamp so I know that my coding skills are sub par, and im a girl and very social due to my hospitality background ,but should i just throw the towel and start accepting that im not good a coding and good at more non technical stuff ? I feel so scared to change jobs since i know how bad the market is and since i dont have a traditional education in cs and the fact that i barely made any skill improvements. I also have no mentor in my team since the only developer that was a mentor like to me has now been promoted to architect and no longer works as close to me and the sole 10x developer is a senior who cant stand me. \nI feel like watching tutorials at home only takes me so far and my justified imposter syndrom is eating me up.",
            "I am an advanced junior level software engineer that still has major problems with testing (especially unit testing, API testing, test strategy). \n\nI read the book \"Test Driven Development: By Example\" and books about specific testing frameworks (PyTest and xUnit) but I still have issues on how to structure my code to be testable / how to convert existing code so it can be tested.\n\nThere is not proper senior engineer in my company that might help with that.  \nCan you recommend me practical resources / guidance on how to improve this?",
            "We have this developer that hasn't been very productive, we are on the same level, but my manager asked me to \"manage\" him and his story. So I have been checking on him and doing pair programming when I can. The problem is I am occupied with other things lately. I will check on him, he will paste big chunk of codes in the chat to prove that he's working on it... ask if it's a good approach. I told him as long as it works I am not going to dictate which approach he chose. Later check on him again and he said everything was going great and his code was working. Later when I tested it out, it was not working at all. I can't help but feel very frustrated, like WTF dude?? Is he straight up lying or is he really that dense? \n\nWhat can I do in this situation? I am currently working with him on the same story and tempted to just do everything myself.",
            "Just got hired for SDET but there's uhhhh \"interesting\" dev practices, including:\n\n- getting the intern to copy gitlab build and test failures into slack (wtf are they doing??? webhooks exist????)\n\n- 30 minute call of onboarding just showing the product around and giving me some shell commands to get started in slack (idk why there arent shell scripts :P the team is like 4 years old). They emphasized a good onboarding process in the interview and mentioned their guide of setup etc\n\n- my team is always stuck in meetings or is too busy locked in, each of the other SDETS is silo'ed to a specific thing and they're a SME of their already specific knowledge\n\nQuestion: How do I dig myself out of SDET and into devops/backend/data eng/datasci?\n\nBackground: (1y devops intern, 1y backend intern, graduated in industrial eng with stats+computing specialization and research with prof so I know a bit about ML/Data Eng, just looking to break through and take a career limiting move in SDET)",
            "I\u2019ve recently switched from a full time tester (>10yrs of experience) to a full time backend dev (2 years). \n\nThere is one other senior dev in my team who is pretty good. He\u2019s intelligent and can understand things (business or technical) quite quickly and have answers ready. My problem with him is that he pretty much likes to be a one-man army and eventually hogs all the work for himself.  I don\u2019t think I am a bad developer, but if it was a race then I would probably lose to him. But its not a race right ? The fact he wants to do all the things makes me think that I\u2019m in some sort of a race, which is quite frustrating. I\u2019ve talked to him directly about this and it does appear that he\u2019s attempting to share the work. Hopefully stays that way. \n\n\nHave you ever experienced this and how did you approach this ?",
            "I\u2019ve been a frontend intern for about 3 months now, working on the company code base (monorepo). Till now whatever tickets I\u2019ve been assigned, I have completed them based on the same pattern it has been done elsewhere in the code base itself. Whenever I get a ticket, my first step is to look if it has been done before and just copy that. How can I change this?",
            "I have 6 months of backend development and then I got laid off due to company restructuring. I have been doing a mix of manual and automation QA (mostly manual) for a year. I have recently started doing personal projects to get back into backend development because it's more interesting.\n\nMy questions are:\n\n\n\n* How is my 1.5 years of experience seen from a backend hiring manager point of view?\n* What is a good way to answer why I did QA for a year? The real reasons are I got laid off from my first job and I had little motivation to do personal projects. During interviews, I will mention being laid off in a tough market. What else can I say?",
            "I'm on the path to senior dev and I face cold behavior from my lead engineer at times. \n\nWhen we are supposed to work on something together I do get an overview of his idea of things first because he's the foreman in terms of requirements and designs in most cases which is also fine by me but before I can study and wrap my head around what needs to be done after his debriefing to me, behold he's already has covered 70% of the coding and I'm just left with crumbs to feed on that are nice to have. \n\nI don't even get the chance to present my questions or counter debate something if it can be done in another way. Being below the lead doesn't look good to break up a completely functional solution just because my options would bring a 5% betterment than what he's already done. But working in a team does mean that you do not go over each other.\n\nMoreover I think he is of the assumption that I'm shit because he never tries to understand what I know or what I don't know. He just always assumes that I don't know it. It's only when he discusses these topics and asks me that I tell him yes I know it. He never tries to understand  my level of technicalities (which is below him) when working with me since we are supposed to worth in a team, but he does not try to educate me either or look at my proposals even if it is better than him (sometimes they are). I think it might be a communication problem between us but not sure who should improve more between us or is it a different issues altogether. \n\nSometimes he would ask me to do a poc only to get the understanding of the challenges involved and then to throw away the poc (which is fine) and work behind closed doors by himself to create a production grade solution only to be presented to everyone (which is fine) and not involving me with any of the work although we are supposed to work on the project together but him being the lead, I get crumbs always. \n\nI told my manager about this but he says he needs to talk to the lead on handing me over more responsibility as well but it doesn't seem to come off to well. I am working with the lead engineer on an internal project so it doesn't really have any financial impact and doesn't affect my daily work performance but the fact that I should work in a team according to my manager for my senior dev path is kind of counter intuitive against the behavior from my lead engineer. What should I do?",
            "Gold: looking for technologies that are still in demand, and because of the demand offer good work life balance and stable work environment. \n\nKind of a dumb question but now with the bigger family and little one, what are some more easier type of relaxed jobs if you will, that are still in demand in tech?\n\nI don't care if it's an old technology but something that's possibly still in demand but it's still a requirement to work the business if you will. \n\nIf you have suggestions of technologies or companies to look at please let me know.\nI have 5 years of experience as a developer and a few years in prod management as well.",
            "[deleted]",
            "Hi guys, Backend dev 3.5 YOE with c#, Been working on a legacy app for the past 2 years, And it has been a long time since I\u2019ve had to study anything or gain any experience from work, I want to improve myself and start studying again but I have no clue what to study, any suggestions ? What is something that can help me be a better developer or increase my market value ?",
            "Where do you find good blogs? Lately, most of the posts I see on Reddit and Hacker News are about LLVMs and AI stuff. Do you guys know any places to find blogs or have any to recommend that cover practical solutions and technical explanations?",
            "I don\u2019t know if this is the right place but I\u2019ve been feeling quite helpless about my career trajectory.\nCurrently helping an early stage startup launch its MVP as a backend developer with 4 yoe.\nThe pay and expectations of the role are absolutely unsustainable.\nMy efforts to get another hasn\u2019t paid off, I can\u2019t quit without securing a new role because I have bills to pay, the more I stay the more I feel I may get fired for not achieving something impossible.\nI see EMEA roles I\u2019m a good fit for but get disqualified because the A in those EMEA roles is just filler, totally inconsequential\nIt has made me think a lot, I envy people who won life\u2019s lottery by not being born in certain places, I\u2019m sort of comforted that death is a thing, imagine being this miserable about your career for eternity, yikes\nAnyways I just have to keep trying till I cant.\nPardon my existential rant. I\u2019m just so tired, not physically or otherwise, just tired in a way I wish I could continue living in my dreams",
            "Hey guys, I have a bachelors in CS and have been working as a Software Engineer in Test (Java) for 1 year primarily working on automation and test frameworks at a mid-level tech company. I want to pursue a Masters in Software Engineering or Computer Science online (UT Austin, UIUIC, or GT), work on my personal portfolio through schooling, recruit for an internship as a SWE at a top tech company, and try to get a return offer. From my position, would this be the easiest way to enter as a software dev in big tech?",
            "Hi.\n\nI'm starting a 3-month-long internship in July. According to the company, I will get to try a bit of everything (backend, frontend, QA, and DevOps) during the course of it.\n\nI'm still a CS student, and I never worked in IT. Frankly, I'm terrified, that I am not competent enough (silly, since I went through three rounds of interview process with little problem, and the recruiters know who they've hired, right?).\n\nI plan to prepare by reading up on the product maintained by the team I'm assigned to (there is some documentation available online) and learn the syntax of the language use in the project (apparently it is similar to Java, so it should be easy). \n\nCan I do anything else to prepare or ease my mind a bit?",
            "Hi,   \napprox 3 years experience and working in a startup with just one other frontend dev (my manager). i've encountered a lot of problems with PRs getting stuck in the pipeline, blocking each other, merge conflicts, etc. Frustrating for me as the inexperienced dev bc the ultimate burden to adjust to preferences / quirks / how things have been done before naturally falls on me. I've experience working in large teams and have tried to suggest introducing guidelines / more processes but we never seem to have the time, and it's hard to convince that they have value since we're just 2 people and it is a lot of upfront investment and overhead at the cost of speed. I agree that processes for large teams might not always apply to a small team or be worth it, any advice for where to look for processes that might work for a 2-person team? Thank you :)",
            "[deleted]",
            "I have a co-worker who is blind and wants to do programming he used to be a previous programmer. \n\nHe's wanting to build out the back end and I was hoping he would do MS SQL. As that's what I'm using for my other teams and projects.\n\n1. Most likely he wants to do Microsoft Access as the back end... Has anyone used that for backend and how is that in terms of real world performance?  Because I would think it would be incredibly slow for a small internal app, but at least he can do something programmatically. Most likely we're just building a simple crud app with tasks in progress and a calendar type information to be shared internally.\n\n2. Any suggestions for accessible and easy to use and learn DBs?\n3.  Or the other thing I'm thinking is he just creates the database on MSSQL and I guide him thru it being his eyes. After that he can just use vs studio code extension to talk to the database in a way that is accessible. \n\nI'm assuming accessibility is the problem with MS SQL Server Mgmt Studio, but I don't know so thought I'd ask others who possibly have been in this situation or know someone who has accessibility concerns when it comes to DB work.\n\nFyi he is using JAWS usually.\n\nThank you so much",
            "Has anyone here experienced working a part-time full remote job? What's it like? I've been seeing a few online and they seem almost too good to be true.",
            "Should I fully understand JS, HTML and CSS before just jumping into learning C? I have a basic understanding when reading JS scripts and HTML blocks, but I dont find web dev 100% interesting like more backend stuff.",
            "I\u2019m an SDET with 1 YOE at a pretty good (but not FAANG) tech company. Outside of work and leetcode, my portfolio specifically side projects is lacking. I\u2019m thinking of doing GT OMSCS to perform a role switch from SDET to SDE, but between full time work and school I wouldn\u2019t have much time to do side projects. Would talking about class projects from the masters program be worth anything in interviewing for SDE positions at top tech companies?",
            "All the job posts ask for either Azure, GCP or AWS experience. If my current workplace doesn't subscribe to any of these what is the best way to gain enough experience in them to put them on my CV?",
            "Would it be fine to email 1 hiring manager and 2 recruiters after applying to a few roles at a large company? I've heard follow-up emails can help get phone interviews, but also that if you message too many recruiters, they'll know you're shotgunning and it'll look bad.",
            "Hello everyone, \nI posted the same question on cscarreerquesionEU. But I want to make sure that the answers I get come from Experienced devs. \n\nI'm using a throwaway account I do not wish to doxx myself.\n\na little of background:\n\nIn Belgium we have this great opportunity for people without degrees like me, called (formations) they're a sort of paid specialised training bootcamps by the state so that people can find work more easily.\n\nIn 2022 I enrolled in one for web development that lasted 8 months and I managed to get a job at a startup right at the end of it.\n\nSo by the end of 2022 I started working there, and to cut it short it was not a pleasant experience, I was overworked 50h+ week, the manager/senior/ceo was so stressed that he became extremely sour with me, and probably viewed me as incompetent, his expectations were that after a month (there was no training, no env setup nothing...) I should be capable of outputing the same amount of work as him who's been a dev for 5+ years, we were consumed by deadlines and juggling 3/4 projects at the same time, so I burned out and quit after 3 months which was around January 2023.\n\nAfter that I used the money I had and went traveling and reading books for a year.\n\nOnly at the start of 2024 have I been looking for a job.\n\nFast forward to today : I've been including this experience in my resume and explaining that I quit because the technology used in the company was not what I liked (php, bootstrap). and I'de prefer to work with a bigger team in a more organized company. But that the projects and the team were great.\n\nmy questions are :\n\nShould I actually include this experience in my resume ? If so how do you consider the way I explain my resignation ? (I don't wish to badmouth a man who trusted me. The deadlines transformed him and it was a scary thing to see)\n\nI'm planning to start a night school bachelor's degree in computer science, Should I include it in my resume even though it would take 4 years to complete ?\n\nI wish you a great day, If you have any questions feel free to ask them I'll try to answer the best way I can, Thank you.",
            "# Struggling with Interviews:\n\n  \nBackground: \n\nTotal Years of Experience - 3   \nTeam lead - 1  out of 3\n\n\n\nThis year so far I recieved few interviews and I have bombed all of them.   \n\n\n    Amazon - went to the final loop, interviews got cancelled  due to layoff on the very same day as interview\n    \n    Coinbase - did a stupid mistake in the take home assessment\n    \n    SuperMoney - Passed all the rounds and bombed last one. Don't know what went wrong. \n    \n    HippHealth - Failed last round.\n    \n    Worktango - Failed Manager interview. \n    \n    Square - Failed Technical screen.\n    \n    LayerZero - Failed first techinal interview. Here I think I require hints to get to an answer, which was easy solution if I had understood the question correctly on the first try.\n\n  \nI am so lost on what's going wrong. I pass some technical rounds, failing others, same thing with system design and behavioural rounds. \n\nI don't know what to focus on because I am not getting enough feedback from the failed Interviews. \n\n**For Behavioural -** As you can see above in my background. I was promoted to team lead pretty early. The only reason I was able to get that was because my previous TL left and I feel like I was in the team longest due to which I built some business specific expertise. So I am fearing that when I talk about my team lead expierence in interviews,  I might come as an arrogant person with junior-mid level overall expierence boasting about being a TL. I don't know if this is true but that's what I have started to suspect.\n\n**For techinal part -** Only thing I could do is practice.\n\n  \nThis was my short summary.   \n  \nI looking for some constructive critisim and any suggestion on improving in interviews.",
            "For those of you who are on the individual contributor path, I'm curious \u2013 why do you dislike being an engineering manager? What makes sticking to a technical role look like a good decision for you? Do you have any plans to become an engineering manager in the future, or are you happy staying technical?",
            "How do you all recover after introducing a bunch of bugs into production? I've had a recent spike in releasing bugs and my confidence is low. I'm worried I'm on a short list to get fired",
            "Complete noob here to everything in here but I just come to ask a simple question. How hard would it be for me to somehow create my own cold crypto hardware wallet ? How does one even start a task like that if anyone has any kind of answer it would be well appreciated if you answer me here or even PM me as this question does expand just don\u2019t wanna ask to much in here",
            "A good book to have with you always is ***Designing Data Intensive Applications by Martin Kleppmann***. Read it as many times as possible until all of it just drills into your mind.\n\nWith that established, now start thinking from the business needs. What information do they need to run the business? How do we effectively represent it? What actions do they want to perform with this data? How can we structure this information to help them with these actions?\n\nI think this is good enough to begin with.",
            "If your experience is with SQL Server, start with Brent Ozar. And check MeetUp for a local user group. The pandemic did a number on those, but many are still around (look for mentions of either PASS or Redgate in their descriptions).\n\nOzar is not the best source for SQL Server knowledge, but he is an excellent first source. He makes a lot of content approachable and understandable and shows you the way to others who deliver more specialized knowledge.\n\nThe SQL Server community has always been really strong. Groups often meet once a month, and many do an annual \"SQL Saturday\" or \"Data Saturday\". Those are incredible opportunities for the price of lunch.",
            "What language is your main stack on? It\u2019s hard to answer because different languages support RDS differently. If you\u2019re working with anything AWS, there\u2019s a vast wealth of knowledge in their docs, if it\u2019s other standard RDS they usually have other documentation that\u2019s also great. Unless you\u2019re asking how to structure data, connecting and using that data base is best learned from documentation on the tool trying to use.",
            "For enumerating what you did at a particular job try to avoid generic statements. Including specific details adds meat to each bullet point and directs a more focused conversation on what you actually did in your role. For instance your bullets may be reworded something like: \n\n1) Designed, developed <specific> application programming interfaces for <product> which enabled integration of third party stakeholders. \n\n2) (This is a generic task of a Software Engineer, I don't think it holds much weight to be placed on a resume.)\n\n3) (Explain what you worked on specially in AWS. I recommend using the expanded term for AWS with AWS in parentheses.)\n\n4) (The language \"Was given a chance\" is awkward. This bullet seems to be the most outstand-ish of the other so I would place it first in the list. Try to expand on what type of project you led and what specifically you had a hand in designing.)\n\n5) (This bullet is also pretty generic and is generally a common task for Software Engineers. There is still value here if worded correctly. Maybe something like) Acted as the interface between the <project> team and stakeholders to derive requirements and <briefly explain what exactly else you worked with external partners.>.\n\nI think quantifying impact has value in detailing the value to the business only if the quantity is generally correct and it is appropriate. Most of what you do as a Software Engineer is hard to quantify. Impact to the business may be implied by being more specific about what you worked on.\n\nAlso this is a side tip, I think listing the technologies used at the end of the bullet helps provide additional technical context. For instance, bullet one could be something like: Designed, developed <specific> application programming interfaces for <product> which enabled integration of third party stakeholders. (Python)",
            "Doesn't matter. These numbers are almost always made up and IMHO 'resume reviews' that suggest these are mostly wrong and superficial.",
            "I used to blindly give out the advice of quantifying your impact using those xx% statements. I'm a bit more lax now though in that I don't really care that you've quantified your impact, but I want to know that you were able to evaluate the \\_success\\_ of your project.\n\nIn a resume, it's very easy to just say you did something, but talking about the result of the project, gives additional signal like you actually rolled out your feature and received feedback on what was good and what went wrong.\n\nQuantifying the impact is one way that \"hard\" tech companies evaluate success, because there's no way to cheat the numbers. How do \\_you\\_ know that the project was a success or a failure? Put that knowledge in the bullet point. If it's by number of users, then say it. If it's by measured +xx%, say it. If it's by customer feedback, say it. If you don't know it, then it's a bad sign, and that is the whole point of this advice - you can't cheat the resume if you don't know and it's an important signal to these companies that you evaluate the success of your projects.",
            "The answer is talking about it with them, understanding why they are doing it, and showing specific examples of why it's a problem. \"Hey, I noticed you've\u00a0 been updating the tickets - that seems like it would be time consuming, plus this specific info was dropped out and it was pretty important. How can we address your concerns so they are written in the way you want up front? That way they'll be the way you like without needing to update them, and we won't risk missing something accidentally\"",
            "How do you know that you are not good at coding? Maybe you are just inexperienced?\n\nWhat are your goals? Do you like the tech adjacent tasks you are getting? \n\nYou could ask your previous mentor's view on your dev skills and non-technical tasks ad well.\n\nIf you decide on the dev path, then ask your previous mentor if they can still help you or if they would be able to help in finding a new mentor. \n\nI personally don't like the 10x dev label, because it could lead to a lot of ego problems. \n\nBut if this senior dev doesn't like you, then you could both work on improving your relationship with them and with finding other people you could learn from within the team.\n\nYou could also consider changing teams.\n\nIf you decide on the PM path, then you would need to build up PM skills. Take a look on r/productmanagement and follow PM folks on social media - like Shreyas Doshi or Lenny Rachitsky.",
            "It sounds like you're doing fine but you're being failed a bit by your team. Don't give up on yourself, keep fighting.",
            "What helped my test skills is the concepts of SOLID.\n\nEspecially the concepts of inversion of control (dependency injection) and single responsibility.\n\nIf you follow this principle all your code block should be small and all their dependencies should be passed down to the code as execution parameters.\n\nMakes unit testing far easier.",
            "Software design is always very context-dependent, so it's hard to offer guidance that is \"always\" relevant/appropriate.  That said, in general, you want to be able to write unit tests for your code.  So you want to be able to create APIs for your code that allow different cohesive pieces to be tested. \n\nFor me, this usually boils down to two things: \n- modularity & encapsulation \u2014 Is a piece of code generally doing one thing?  Are its inputs and outputs clearly defined?  Does it use other functionality according to a well-defined API, and not by directly accessing a hundred internal members? \n- Is it easy to replace functional dependencies with test dependencies?  With Python, `unittest.mock` makes this more straightforward.  Other languages have different common patterns, like dependency injection in Java, for instance.  But finding some way to limit the scope of the code being executed by the unit test is super important; otherwise you end up with a functional test or integration test, which \u2014 while useful in their own right \u2014 are best used _alongside_ a good unit test suite.  Not instead of a unit test suite.",
            "> I still have issues on how to structure my code to be testable\n\nStart with understanding dependency injection / inversion of control and apply it in your code. That's by far the biggest 'thing' you need to understand when writing testable code.",
            "Test Driven Development is **the** concept to adress this. It really makes you focus on testability. For existing code, try to get some good functional coverage first with API-based testing or behavioral testing (and don't look at any coverage metrics until you *think* you got every aspect of the code). When that is there, refactor, in a tight loop with executing your functional tests.",
            "What is your role, job title and experience level?",
            "Probably a MS in CS.",
            "So two things. If you're at 2 YEO and he's a skilled senior dev, it's possible there's some problems he's equipped to solve that you're not ready for.\n\nThe other is that he's 1 person and can only do 1 thing at a time. I don't see how he could possibly be taking all the important work at all times unless he's reserving a bunch of tickets without starting them.",
            "Your context is insufficient to make a determination. You need to understand more of his motivation to act. Does he not like you, is he worried he will be replaced, or is it an ild habit to work solo? Nobody knows and until you figure that out, dont make any moves.",
            "This is exactly what you are supposed to do, keep on !",
            "That\u2019s honestly a good way of approaching things especially if you\u2019re new to the codebase.\nIt\u2019ll allow you to learn the codebase easier and you\u2019ll see how more experienced coders structure things\n\nThe next step is see where the commonality  is and create a common utility/library/function.",
            "[deleted]",
            "*Never in the defense.* You want to portray that you wanted it and you got it and now you want something else. \n\nSay that you were very excited to try QA for some reason (someone you admire praised QA work as more dynamic and challenging than shoving a feature factory) whatever it is. \n\nThen say that while you appreciate the learning you experienced, it did not live up to your expectation and you are looking for a more challenging line of work.",
            "I would compare you to a fresh grad and interview you as such. I wouldn\u2019t pay too much attention to why you want to do QA - Something along the lines of \u201cI want to try QA but having tried it, I prefer development work more\u201d\n\nCompensation wise, I think it\u2019s reasonable to compare you with a fresh grad too",
            "I\u2019m primarily backend, based off the info you gave me, I see your 1.5 years of experience as 6 months of backend experience and a year of QA experience. If you\u2019ve done more that I\u2019m missing, and you\u2019re not being clearer on your resume, I would be. It sounds like you\u2019re very new to the BE to me, I wouldn\u2019t consider someone with your experience for any roles higher than junior level (which isn\u2019t a bad thing! You\u2019ve only got the 6 months of experience after all!)\n\nI would leave it at being laid off in a tough market and wanting to stay as close to tech as possible. I also hate personal projects and have been rejected from companies because of it. Thank god I was, but best to just not mention you don\u2019t like that. Stick with tough job market and a layoff through no fault of your own. That\u2019s understandable in today\u2019s climate.",
            "> How is my 1.5 years of experience seen from a backend hiring manager point of view?\n\nBetter than 1.4 years, worse than 1.6 years. \n\n> What is a good way to answer why I did QA for a year? T\n\nI'd suggest not being too honest about it because someone doing mostly manual QA means you don't have 1.5 years experience as a dev, but closer to zero.",
            "[deleted]",
            "I would first approach him directly. Just hash out your concerns. Don't make it personal. Make it clear that it's the working situation that bothers you, not him (even if it \\*is\\* him). Find a solution together, and make it clear to him that you want to find a solution together.\n\nIf that doesn't work, then  I'll answer this in terms of how I approach an Agile/Scrum environment, and you can tailor it to your situation. In Sprint Planning, there's an opportunity to discuss our approach to the upcoming work. For example, I might let people know which of two assignments I'm going to tackle first. Or I might discuss a testing strategy. But whatever it is, the point is that it's out loud in front of the team, so that anyone can chime in. \"Hey, it would really be helpful for my ticket if your second one was done first. Can you switch them?\"\n\nSo, in this opportunity, I'd clear this up in front of everyone. Who is the assignee for the work? It can't be both of you. If it's to be done in parts, then split the parts, so that your part is clear. If one is to be the assignee and the other act as reviewer, call that out. Regardless of how the roles are split, make that clear in that meeting. Make him agree to the plan in front of others.\n\nAnd then, when he mucks up the plan, that's for Sprint Review. Call him out on not sticking to the plan. And once again, don't make it personal (even if it totally should be). Always refer to how the work was done, how \"we\" could have done it differently.\n\nHis behavior is good for him, not good for the team. So, as with all personal issues, I'd approach the person directly first. But if that doesn't work, then it's something that gets hashed out by the team. Your goal should be the overall team's output, not just one person's. If he doesn't see it that way, then he's the problem.",
            "WLB is often teams specific, not even company and not technology specific.\n\nYou might need to have a series of successful interviews and gauge the team during the process. You could ask open emded questions, like When was the last production incident and how did the team handle it,  When did you work overtime last time, How are changes in priorities handled, etc.\n\nYou might be able to ask for a 1:1 with a team member and also ask them about WLB.\n\nMaybe worth to note that often WLB is something you would need to create. You need a team that allows it, but still you need to set your boundaries and show what you propose should to wait to give room for top priority work.",
            "VB.NET and Visual Basic is a nice little niche. Supporting older C# apps is a much bigger niche and will be for the next decade or two.\n\nCompanies using this tech tend to be fairly stable too.\n\nAlso SQL not really changed since I started in 1997.",
            ">designing and delivering large, 1-2 quarter long projects independently\n\n>getting ideas and suggestions from other senior/staff engineers\n\nJust wondering, what's the independent part here? Maybe you should focus on that more instead of directly asking for pointers to peers?\n\nIt could also be that your problem is the \"1-2 quarters long\" projects which won't lead to any depth or width.",
            "(20+YOE) When you think you are stuck try to read or watch stuff completely outside your field of expertise. I got into philosophy around 5 years ago and it helped to see technical aspects from a very different angle, and now I'm reading up on sales and marketing and again see things from a different perspective.",
            "This is a tough one. Since you working on a legacy code, you might have the opportunity to improve it and make some R&D and tests for new things. Under C# it is hard, because you have like 1-2 way only to achieve things, little-to-no place for creative solutions.\n\nWhat to study...\n\nWhatever interest you :) It is never a bad idea to understand databases or releasing/deployment/cd/ci a little better. Or if you are fancy, pick up something related but not-so-related, like TypeScript, Docker, Bash or learn non-ms related fields (e.g.: linux, golang, python). You can even go into game development (unity).\n\nOne of the best way to learn is if you find either a certification that you would like to have or a passion project and learn through it.",
            "If you're in embedded, mcuOnEclipse.com is good. It's written by a Swiss professor. He leans heavily toward NXP parts but when I was doing development on a Kinetis part his articles were always my first stop to figure out how to do something.",
            "I usually stick to the official blogs of whatever major tech things I use. By my bread and butter is Go, K8s, and general Cyber Security. I'm not interested in being the tip of the spear when it comes to technical things ... rather I like to just be a few steps back. e.g., I'm not going to install the beta of a feature, but I'll be aware of it, so that once a feature hits an official release I'm aware of it, have a loose idea of how it works, and then figure out if it's of use for my organization that I'm a part of.\n\n\\* \\[The Official Go Blog\\](https://go.dev/blog/) Cox and team do some good writeups on new features.\n\n\\* \\[The Official K8s Blog\\](https://kubernetes.io/blog/) again some regular and good content that's highlighted by the community.\n\nNot exactly blogs .. but things that \"cover practical solutions and technical explanations\"\n\n\\* \\[Learn Go with Tests\\](https://quii.gitbook.io/learn-go-with-tests) - Sort of a 101 through 2XX of Test Driven Development using Golang, and it's a \"fun\" exercise to force myself through. Plus when new go features come out, I like the 'lens' of viewing it through TDD. Plus, there's a group of people in my life who I've helped learn go, and this has been what I've used as a \"text book\" for them as we work together to upskill them.\n\n\\* \\[OWASP\\](https://owasp.org/) - A major initiative when it comes to cyber security and issues. Their most famous thing is the \\[OWASP Top 10 for WebApps\\](https://owasp.org/www-project-top-ten/) but they've other projects for various things (https://owasp.org/projects/ search for \\`Security Wayfinder\\`). It is mainly written for a \"Professional Security Practitioner\" in mind when reading it ... so it does get a bit dry ... but Risk Management (i.e., the fancier way of saying Cyber Security) has been the backbone of my career so far.",
            "You are trying to make two transitions: changing role and changing company upwards.\n\nThe path you described is a good one, especially if learning more via the master's interests you. \n\nAnother path could be to take one transition at a time. For example seek internal transfer to an SWE role and change company after you gained some SWE experience. \n\nOr you could check if some of your target companies hire test engineers. If so, change company within the same role, then ask for an internal transfer after you have some good track record within the company.",
            "Don't sweat it. Even when you have a degree and years of experience, starting at a new workplace means you'll have to learn the ropes again. And that takes time. Nobody will expect you to be productive from day 1. Listen, watch and soak it all up. If you have questions, don't be hesitant to ask them. Give yourself 20-30 minutes to figure something out, then ask someone if you're stuck.\n\nYou're an intern. I don't know if this is required, but it's a good idea to keep a bullet journal. Jot down daily what you learned or experienced or a few key highlights. It's nice to look back at the end and see your progress written down.\n\n> I plan to prepare by reading up on the product \n\nThis is excellent. And what you also should do when you start applying for jobs later on. Read up on the company and what they actually do.",
            "You're just 2 people and you have issues with blocking and merge conflicts? This sounds a little unusual but could probably be solved in 2 ways.\n\n\n1: Technical. If there's enough work for 2 people but it's always the same code, then the code could probably made more modular. It sounds like every feature is in a small amount of components. Think of it like inverse Conway's Law.\u00a0\n\n\n2: Social. Spend more time figuring who's working on what when and plan so that you don't work on the same thing at the same time. Alternatively, you could try pairing more. In my experience with just 2 devs you probably spend enough time reviewing PRs anyway that pairing on everything would be competitive with regards to velocity.\u00a0",
            "It's not an either or choice. You could work on improving your situation at your current company and looking for a new job in parallel. \n\nImproving your current situation: Are there other projects in the company you could participate in? What are the biggest business pain points of your company, could you propose a new project and maybe lead it?\n\nDoes the company provide learning allowance - in money and/or work hours learning? Some company have subscriptions to Oreilly, LinkedIn learning, Coursera or similar stuff.\n\nYou could refresh your CV and start applying in parallel. If you get an offer, then you could consider it. If you don't get offers, then you'll appreciate your current job more.",
            "You can and perhaps should always dabble your feet in the market without directly giving up on your current job. Just to know what the demand is for your skillset, what offers are on the table and to remove that fear of \"being in the market\". You might one day actually need to find a new job. That's a lot easier if your cv is up to date and you have some recent interviewing experience.",
            "> Most likely he wants to do Microsoft Access as the back end... Has anyone used that for backend and how is that in terms of real world performance?\n\nMS Access is completely unsuitable for multi-user access. You'd get data corruption in no time at all. For real world applications you'd need to use a real relational DB management system, MS SQL for example.\n\nRegarding accessibility; I don't have experience there I'm afraid.",
            "We will be using C#/.Net Core and React with visual studio for tech and tooling.",
            "I see C as totally unrelated to JS etc but a harder language to learn. Not at all impossible (I learned Pascal as my first language back in highschool, then C in uni).\u00a0\nThe thing is, C is relatively niche language nowadays from what I see, used for writing Operating systems and embedded programming.\n\n\n\nJS however ( running on Node.js) is extensively used in backend development as well , and it might be a more gradual shift for you to attempt.",
            "You wouldn't want to burn yourself out while your career has barely started. \n\nFull time work and studies is more than enough in parallel. You could seek internal transfer from SDET to SDE in the company you work at and start applying to other SDE roles during your studies, maybe something pops up.\n\nWhen you are done with your studies, then you could switch to side projects if still needed.",
            "You don't need projects.",
            "Personal projects usually work. You can also study and get certified in them but that costs money and recruiters don't always acknowledge transferrable cloud skills",
            "You just need to practice more.",
            "It's great that you get interviews and sometimes even get to the last round.\n\nYou could do mock interviews to get more feedback.",
            "Do you know any programming language? You say you\u2019re completely new, so if by that you mean you don\u2019t even know a programming language, it\u2019s going to be very, very difficult for you to do what you\u2019re describing. 5 years of work maybe if you\u2019re dedicated? You\u2019re gonna need to learn a coding language and crypto, then design out your system, code it, test it, etc. It\u2019s not easy, and if you don\u2019t know anything about coding or crypto, it\u2019s going to take years of dedication.",
            "[deleted]",
            "I actually just finished reading it like one or two weeks ago.  \nI'll read it again when I step into another level in the future",
            "I'm working on Go+Postgres most of the time.  \nI heard Postgres is very well-documented, should I just take some time to read through it ?",
            "Appreciate the response, gnomff!\n\nWhat you typed up is very close to how I brought it up at a 1:1 back in April. We had a couple of highly visible projects go past deadline from the amount of back and forth we'd have to do with stakeholders when EM would assign one of us a ticket or modify something someone submitted to us to say \"stakeholder needs you to implement x\", we provide an estimate based on that, which gets fed to teams depending on our output, only to find out from the stakeholder themselves \"no, I specified that I need y\". It turns out while doable, y requires a considerably higher level of effort and cross-collaboration with other dev teams to implement which takes away time from both teams--although sometimes the inverse can happen and the work is less complex that described, in both cases what gets assigned to us on the team is completely different from what the business stakeholder has actually asked for. I brought those up and mentioned how I just want to make sure we're doing what we can to deliver when we say we will, which we're starting to fall behind on (and other managers are starting to pick up on and ask us about-in some cases me directly since I am the senior and most visible IC on the team--I had one such meeting today with a manager from one of our sibling teams).\n\nAt the time he said there wasn't anything *necessarily* wrong with the stories and tasks in Jira, and that he would try to back off and trust us to know what should go into a story and when to get him involved (and I'll say my group is very good about raising things early when they can potentially get in the way of meeting a sprint goal, to everyone's collective credit), he just wanted to be helpful. Which don't get me wrong, I certainly appreciate, but he's regressing back, and we're about to take on a whole new big project that has someone with a C in their job title watching how it goes...and....well...\n\n...it's not an easy feeling to sit with, if that makes sense.\n\nEdit: Having typed all that out and read it back, I'm now wondering if the real issue is that we just need to find a way to better involve these stakeholders than we do today?",
            "Thank you so much for taking the time to comment, I really appreciate it ! <3 \n\nHonestly, I just think im bad at coding since I am slow, have to Google a lot, and very insecure. It doesnt help that the senior developer refuses to work with me and also because I am the only junior that my company has ever hired, the rest which are not in our team are all seniors with 15 or 20 years of experience. The senior and I are the only developer in my team.And since they( senior)  are so good at their job, our team lead and other managers  doesnt say much , like when the senior developer decided that they were going to re document the entire team wiki, no one was allowed to touch wiki and they refused to look at my pull request due to them not having that capacity since they are so busy( understandable but then im not allowed to move forward) \n\nUnfortunately because I was a  experiment (i think) that the  company decided to hire a junior i doubt anyone would want me in their team since I am slow, and very even compared to the other  \"juniors\" who has at least 5 years of experience. \n\nI like teaching/ helping others in general  so when i explain things to our tester and team lead and get positive feed back i do really enjoy the contribution i make ,but i also really enjoyed when i was given tasks and work on and debug and figure and create things. I just feel conflicted because in a way, perhaps communication centerd work comes more natural to me compare to development but I also feel unsure, your comment regarding asking my former mentor is really solid advice so i will definitely ask when i catch up with them. \n\nOnce again i really appreciate your comment ! Thank you !!",
            "At least with C# and especially [ASP.NET](http://ASP.NET) Core I am using dependency injection.\n\nMy web APIs are often not doing too much - it's mostly passing data along to other services or use the database. I wasn't sure what to actually test as it's not doing much.\n\nUp to this point I disregarded adding another level on top of the EF Core ORM as it already is a repository.\n\nAre you aware of any best practice implementation for a not too simple project that shows how it could be done better?",
            "Some more concrete problem is that a route in the web api is using a service e.g. for generating a report. The service is using another service is using some data\n\nA question regarding:\n\n-> modularity & encapsulation \u2014 Is a piece of code generally doing one thing? Are its inputs and outputs clearly defined? Does it use other functionality according to a well-defined API, and not by directly accessing a hundred internal members?\n\n\n\nservice A: does some request to an external API\n\n->: means is using\n\nroute A -> service A\n\nroute B -> service B -> service A & service C\n\n  \nright now only the route endpoints directly deal with the ORM / database\n\nservice A requires parameters that need to be fetched by the database - this seems good if done in route  A. The data is fetched in route A and directly provided as argument\n\nIn route B I am using another service that itself has to call the service A - I am here providing all the fetched  information service A needs lateron in the processing. I don't really like this as now the route knows too much. On the other hand I am also not sure if the services should fetch data themselves either.\n\n  \nHow would you decide on this?",
            "This is a concrete example, but maybe you have some ideas about it\n\n  \n[https://github.com/OPCFoundation/UA-.NETStandard](https://github.com/OPCFoundation/UA-.NETStandard)\n\nFor an internal software I was using the OPC-UA communication protocol. The software is sending requests and receiving data due to subscriptions from a machine server.\n\nLarge quantities of the code are used for error handling and accumulating different sensors (unknown at compile time) into larger constructs that are sent to a web api and database. It is hard to make it testable / extract code as it is often using the primitives of OPC-UA, the database or other stateful variables. Often the context / state is actually required for the code to work so I struggle to change it.\n\n  \nIt is a multithreaded C# console application using the .NET Generic Host (https://learn.microsoft.com/en-us/dotnet/core/extensions/generic-host?tabs=appbuilder). Different threads in the form of task take care of connecting / disconnecting / processing the data of a single machine. Other tasks take care of combining the data.\n\n  \n**With a more general** [**ASP.NET**](http://ASP.NET) **Core Web API it is way easier for me to hide details in specific services -** [**ASP.NET**](http://ASP.NET) **Core takes care of calling my code / hides many abstractions but for this project it is quite hard to think about a way on how to do it in a better way.**",
            "What tools do you use for API-based testing?\n\nI know about Postman, Insomnia and others but I am still unsure about the overall setup.\n\nE.g. how to prefill and reset the database after requests mutating the database (could be done with EF Core migrations, but that's not a complete workflow yet)?\n\nCan you recommend me a book or course for actually getting started with TDD and other kinds of testing?",
            "Both of us are juniors, I have 2 yoe, he has more. Our team has no lead and 1 senior right now, that's why I am asked to do extra..",
            "Got it. My only concern is that if I\u2019m given to do something from scratch, I would be stuck",
            "What if I\u2019m asked to do something from scratch and the output is not up to the code standards",
            "Thanks and yeah, I am very junior. So you were rejected because you had no relevant personal projects? If so, this is what I want to avoid and I'll just do one even thought I don't want to",
            "Completely delusional. \n\nThe vast majority of people who've been doing mostly manual QA have been pushed into that role because they weren't good enough devs to be left alone with the codebase. That's the stigma OP is going to have to deal with.",
            "Mike gets shit done.\n\nTom has no idea how the framework and libraries (especially ORM) works ...\n\nYeah Mike 100% as backend dev ...",
            "I would disagree that Tom in your example is the better higher. If I\u2019m hiring for a backend role, I\u2019m looking at Mike as the favorite. I\u2019m gonna ask them the same questions, but if Mike can\u2019t answer basic devops or QA questions, I\u2019m not sure I\u2019d hire him anyway. That being said, if Tom is a stronger candidate from an experience perspective then he\u2019s getting the job. YOE doesn\u2019t mean anything if you can\u2019t articulate the basics. I\u2019m hiring Mike at an E2 level most likely, where as Tom is a hard E1, so they\u2019ll get different expectations.",
            "I've never seen a 1 person project that was longer than 1-2 quarters. Big 30 person projects, sure, but that's different. If this is small to you for a single person, y'all need to breakup your tasks more...",
            "[deleted]",
            "Thank you, I did study Docker and was going for the aws developer associate certificate, But I honestly didn\u2019t think it would matter since I wouldn\u2019t have the real world experience to back it up, what are your thoughts on this ?\n\nEdit: I did also think about going the full stack route, I have some React experience, but I absolutely hate styling",
            "Thank you for the response. I am deciding between option 1 (masters) and option 3 (change company as test engineer then switch). For option 1, I am fearful of quitting my full time job for an internship and the rigor of working full time and completing a masters, though I am extremely interested in furthering my education, particularly to learn more about ML/AI. I lean towards the third option you described of switching into a top company I actually want as a test engineer doing well at my job there and then switching to a dev role in said company. That being said, does anyone have experience switching roles in top companies like FAANG, what does it take?",
            "Thanks for the reply, I really like the journal idea, it's brilliant.",
            "Thank you for the suggestions! I've tried and failed to get us to pair more unfortunately but will give it another shot.   \nI think part of the issue is the other dev likes to go into focus mode for days at a time with very little communication until the PR. And it's hard to avoid touching the same stuff because we're often building large new features that depend on each other but would be too much work unless we split it up and work in parallel.   \nI will suggest more planning and perhaps isolating the common denominators of the work so we can knock those out first!",
            "Currently no, I don\u2019t know any programming languages I do know basic knowledge VERY BASIC but I\u2019m knowledgeable about crypto and yes I know I\u2019m willing to dedicate about 5-6 Years into this project as it\u2019s something I\u2019ll be learning a lot as I go. On the other side tho is there any other ways to go about this is hiring freelance coders for tasks like this a thing ?",
            "Take a break from the theoretical and cement the concepts with something practical",
            "Ah the classic [tire swing](https://www.zentao.pm/file.php?f=zentao/202204/f_96b5351a954913a9308777a4de919218&t=png&o=&s=&v=1649384977) issue. Good communication is the key to success. If the EM is wearing the product manager/owner hat and not communicating the business needs accurately between devs and stakeholders then that feedback (detailed and specific) needs to get to the EMs manager (probably a director or VP) since that communication is explicitly the product manager's job. In most places the EM and PO/PM are different people because those roles require  different types of expertise. \n\nIn terms of solving the communication issue, I have had shockingly little success training everyone in [proper story creation](https://dannorth.net/whats-in-a-story/). A lot of the time people just end up arguing/being confused about the \"right way\" to write them, or being so focused on the \"right way\" that they lose track of the actual purpose of the stories (sounds like your EM has fallen into that trap). At this point I've largely dropped that strategy.\n\nInstead I follow this process:\n\n1. Write down the business problem in detail, and present it to everyone involved (stakeholders first since they have the most feedback, then devs). Even if it seems obvious, write it down anyway - it won't be obvious to everyone, and it's more than likely there are important things missing that will be uncovered once it's written and reviewed. Importantly, this step includes _nothing_ about the solution. People are often blinded by the first solution someone thinks of, so be really clear that this is only a problem statement.\n - Include who the customer is and who the user is. Customers are who is paying for the software, users are who is using the software. In B2B they are very often different people, with very different concerns and needs.\n - Include the consequence of not solving the problem. Will you lose clients? Will you lose potential clients? Will nothing happen? This can be a huge \"ah-ha\" moment for everyone.\n - Include some kind of business timeline, like \"the customer will need this in the next 6 months or they will be upset\" or \"we have a potential client who refuses to sign until this feature is done\". This isn't the same as an engineering timeline, but it can inform the eng timeline. For example, if I know that something needs to be done next week or the business will end and everyone will lose their jobs, I'm going to create a different solution than if its something that can wait a few months. \n2. Write down a technical design and present it to everyone. The purpose of the technical design is to find out where the biggest risks and blockers are and be able to give a rough timeline. Will you have to depend on another team? Does the API you're planning to use actually do what you think it does? Will you have to change something that another team depends on?\n - A technical design shouldn't take more than a handful of days to put together. The point is not to do all the work, just do enough to identify major risks, give other teams a heads up on changes and give a rough timeline\n -  A few days up front thinking it through will save you from hitting a major blocker a few weeks/months in and needing to redesign everything. Don't skip it!\n3. Start start cutting JIRA tickets only once everyone understands the problem and the high level design. \n - Don't worry too much about the tickets being structured perfectly - only worry that the information is being transmitted\n - Give stakeholders regular demos (weekly if possible, bi-weekly if not)\n - After a demo tell stakeholders what you are planning to do next - keep getting as much feedback from them as possible as often as possible\n4. When giving timelines, always be pessimistic (within reason). After settling on the design I usually take my first guess and double it. That's typically about right.\n\nI know you're not the one in charge of the process, but I've had a lot of success with this strategy (something like a 90% success rate). For step one your EM might appreciate it if you said something like 'I want to make sure I'm really understanding the business needs, so I put together my best understanding of the customers problems - would you mind if I shared this doc with the stakeholders to make sure I'm getting it right?\" and then \"The stakeholders said I got some stuff wrong so I updated the doc. Would you mind if I held a meeting with the team to review so that we're all on the same page?\"\n\nIt's a lot to ask of an IC, this is really the EM's job. Managing up is tough - best thing you can do is be humble, dig to find the root of what is being asked for and do your best. Good luck out there!\n\nEdit - formatting",
            ">I am slow, have to Google a lot, and very insecure\n\nSounds like most juniors. BTW the Googling part never goes away, not even after years of experience. And for some people the insecurity is also a returning thing.\n\nThe main question is how slow is slow. This is something you wouldn't be able to judge yourself and would need to ask feedback on from your mentor and/or your mamager.\n\n>The senior and I are the only developer in my team.An\n\nHave a chat with your manager. Maybe the senior dev needs to adjust their behaviour - mentoring juniors on a good way is often an expectation towards seniors and here you are not getting good support from the senior dev.\n\nOr if they are so marvelous that no one dares to give them constructive feedback, then maybe another team would be a better fit for you. This is also something your manager could help with.\n\n>company decided to hire a junior i doubt anyone would want me in their team since I am slow\n\nYou don't know that before you ask. Maybe some other teams are more equipped to support a real junior (5 YoE is rarely a junior). Your company decided on this experiment for a reason. \n\nI also know an engineer who transitioned to product. They are happy and can use their technical skills to be able to talk with engineers on a better way. So if communication is your strength, then you could build on that as well.",
            "Regarding your insecurity about experience, I recommend you watch [this talk by Bob Martin](https://www.youtube.com/watch?v=ecIWPzGEbFc) about his view on the past 80 years of programming. Sample: since the number of programmers doubles roughly every 5 years, half of all programmers have less then five years of experience (he also has some interessing idea about why women are a minority in programming, and he thinks it is mostly due to the overconfidence of young men).\n\nGoogling never goes away, belive me, I used AltaVista and Yahoo before google came around.\n\nIt is very likely that hiring a junior *is* an experiment, and I would recommend to go all in on that: ask questions and volunteer to review *their* stuff more, and learn to give constructive criticism. Why? Most devs, expecially senior devs would like documentation to exist, because google doesn't work in-house. But they hate wrong documentation, and they **definitely** hate to write write-only-documentation (at least I do). Be warned though, you won't make friends in the short term, but the seniors will like it in the long term, in half a year or so.",
            "I like variants of hexagonal arch/clean arch for complex business domains.\n\nYour ORM is generally at the bottom of the architecture and everything above are abstractions of business objects or business logic.\n\nIt really helps isolate different parts of the application. Test a use case, you test only the business logic. Test and adapter, you test that it's handling the ORM as it should. Test business objects, you test the changes in the internal state of the objects. Test at the client level, you do integration tests.\n\nAll those are mandatory or optional. Everything is arguable in this. \n\nAdapt what you think works the best for you because any architecture is just a template with pros and cons.",
            "I didn't mean web APIs specifically, I just meant that you can test quite a lot by only using the public interfaces of a component. My main experience with API-based testing is with components in an embedded device setup, so it is CUnit (refactoring-friendly) or VectorCast (not so much) for me.\n\nBut regarding database restoring etc., I've heard good things about [https://testcontainers.com/](https://testcontainers.com/)\n\nFor TDD, you can find a lot of material on the [TDD conference youtube channel](https://www.youtube.com/@tddconference/videos), and I highly recommend *Working Effectively with Legacy Code* by Michael C. Feathers  (978-0131177055).",
            "I like CUnit and h2 for in memory db simulation",
            "Okay. This is a pretty shitty situation. I've been in it as a 'lead', and it really sucks that you're at a junior level told to deal with what's basically the responsibility of your manager.\n\nGenerally you don't want to 'take over' the work, because that generally will affect your own output negatively, and will allow these people to keep pretending they are useful.\n\nWhat I would do in your case is ask your manager how much time you should put aside per week to mentor this person and stick to this amount of time. Don't badmouth them in front of your manager, but give honest answers when asked.",
            "I've been doing this for 20 years and I've never really had to do things from scratch - there's always \"something\" to work with.",
            "[deleted]",
            "Develop outside of your daily job. Build something from scratch.",
            "You\u2019re already being asked to do things from scratch. Just because you\u2019re able to find patterns in your codebase and apply them doesn\u2019t meant you\u2019re not putting work in. That\u2019s what being a dev is. \n\nYou may have to get better at researching things outside just your codebase. Use the tools available to you. You\u2019ve got documentation, your own brain, the entire internet. Virtually *nothing* is created from scratch anymore in the true sense of the word. Every dev is using stack overflow, libraries, established patterns others have created, etc. You\u2019re good at searching your own codebase for inspiration, you just need to get more comfortable with searching the internet for inspiration.",
            "Meh, one rejection isn\u2019t the end of the world. The company ended up going bankrupt a few years later. If you don\u2019t like personal projects, I wouldn\u2019t not shoot for companies that require them",
            "Thanks for the candid feedback. How would you suggest I proceed to get ready to apply to (junior) backend positions?",
            "The sales funnel concept helped me a lot to develop elimination steps for tech components. The markting mix helped me a lot in placing single changes in various places on the company hierarchy to get some necessary changes going.\n\nIt's not that easy on the philosophy side. There some knowledge about the big five model helped me to understand people better, and it is never bad to know stoa in order to stay calm in customer meetings.",
            "A better market or existing elite tech experience",
            "That's hard to tell. Maybe start working on both paths?\n\nFor the MSc, you might want to increase your savings, check conditions to withdraw an application, and apply to a programe you like.\n\nIn parallel, you could create a good CV and send out to soem companies to test the waters. \n\nIf you could land an offer at a better company, you could still choose between that and MSc. Or combine the two with part-time learning, part-time work.\n\nIf you can't land a new offer you like, them you could continue towards the master's.",
            "Sounds like you need to communicate more and split the work up into smaller pieces.\n\n\nAlso sounds like you work with a cowboy who would hate all of that. I'm sorry to say I have no advice on how to handle that personality.\u00a0",
            "It is. It\u2019ll cost you probably $500k-$1 million on the conservative side would be my guess. Coding isn\u2019t cheap or easy.",
            "I can't tell you how much I appreciate your advice! Told it exactly like you said to my manager and didn't come across as resentful, he got my back now.",
            "That reassuring",
            "Not really failed to create but I was given some task for which I wrote code that just worked. But I got a lot of comments on my PR regarding bad code quality",
            "Be prepared to proactively address that stigma and ease concerns. 1 year isn't that long so the stigma isn't gonna be as bad as it could be.",
            "\ud83d\ude1d\ud83d\ude29",
            "Which isn\u2019t terrible. Considering where I wanna go with this but this project i was thinking to be more a starter project that I could work on in my free time in my garage and grow gradually I think will try to start development on my own and just see where I can go with it",
            "Oh wow. This is so nice to hear! Keeping my fingers crossed for you!",
            "So take those criticisms to heart, learn where you made the mistakes, and do your best not to repeat them in the future. Getting comments on a merge request is not some scathing critique of you as a person; it's just more experienced people giving you the information you don't have about how you do things there.",
            "looked up Conways law though, pretty fascinating!",
            "Good luck!"
        ]
    },
    "Am I being taken advantage of?": {
        "title": "Am I being taken advantage of?",
        "score": 39,
        "url": "https://www.reddit.com/r/ExperiencedDevs/comments/1dlqgmp/am_i_being_taken_advantage_of/",
        "content": "I work for a SME software house. I work on a relatively small team and until recently,  I was the 2nd most senior engineer below the staff level guy. He resigned and I was basically thrown into his position with no plan to replace him.\n\nManager read out a new job title to me, explicitly said your role is changing, more design docs, mentoring, less coding. And working on the companies biggest project to date. \n\nAs soon as this happened I asked to be compensated for the extra responsibility and new  role. Seemed like a perfectly reasonable ask. Manager spoke with his, and came back with \"actually this is all already part of your current role, so there will be no promotion or compensation adjustment\". Then I got some corporate manager bullshit about how it's an opportunity for me etc etc...\n\nSeems like an opportunity for them to take advantage of me... They have no plan to rehire the guy that just left, clearly they think I can step in that role and do it successfully. \n\nAnother engineer just below me just also handed in his notice and we effectively have a small team of 2 left. \n \nI complained again saying it's bullshit and told my manager how I feel, that they're taking advantage of me and told him I'm very unhappy here. Have a follow up meeting with his manager now on Monday. \n\nMy manager is quite shit at his job so I feel like he just asked my skip to deal with me. Doubt there will be a favourable outcome for me here. \n\nBeen interviewing for new jobs. Think it's time to bail. \n\nAm I being unreasonable? Is this normal in industry? \n\nTLDR: more senior teammate leaves, I am thrown in his position, no promotion or raise. Is this typical? Looking for a new job.",
        "num_comments": 49,
        "comments": [
            "The staff level guy probably resigned because of bullshit like this, you should do the same",
            "I'd say it's often difficult and unnecessary to try to understand the true motives behind things like this. Your manager has his manager, then there's HR, the person in charge of HR, they all can have different opinions on titles, roles, compensation, promotions. Best is to assume the they are all a bit lazy and selfish (and you should be too) and partially in a conflict with each other, and what you are experiencing is a often an unintended result of all of that. It's not like they all had a meeting where they agreed \"hey let's take advantage of this guy\". The sad reality is they often care and think about you much less the you think. There's no point trying to teach anyone any lessons, people generally don't learn or change. Think about what you want, what you're willing to risk, what's best for you, and how you want to achieve that.",
            "What\u2019s your contract and job description say?\n\nSounds like they know the market is tough and trying it on, not a good sign with so many others leaving.\n\nIf the contract says and job description are very different you can try to push back but ultimately you probably need to decide do you want the job or begin looking elsewhere.\n\nThe market is tough with lots of competition for roles in general so think before you jump. Best of luck!",
            "Yes. This is normal. At least in the UK and EU. I\u2019ve been given the responsibilities that, by the definition of roles, would require a promotion. I thought fine, and I\u2019ll get the promotion next time. Nope, I just got \u201cyou\u2019re doing a great job! Carry on\u201d.\n\nMoving jobs every couple of years, is common for a reason.\n\nOnly thing I\u2019d say, is that if this is an area you\u2019re interested in, a year getting to grips with the role might help for the next job.",
            "Get the role title. Look for another company. Don't invest too much in the role. Do not really try to succeed. Fail and accept failing. Do less than half the job your previous coworker was doing.\n\nYou don't have the pay, you don't have the experience, you don't even have a manager that's being positive for you, you don't have the team...\n\nI would make them learn their mistakes. Obviously it's a fighting choice in some way (more passive than active).\n\nSo I would make them rely on me, then I would let them down for the exact reason they refused me anything I asked. They are putting you in that position ignoring the risk?\n\nI am french, we have a history of fighting against gov or \"bourgeoisie\". I've been given shit for years. Then I changed my way of doing things. \n\nFor example:\n\n3 years ago, my manager told me that my contract had specific hours that I should be following. I was starting to work around 10 and was finishing around 5pm. But i was answering and working outside of these hours. I argued that it was not a good idea to push for that. It would backfire. He insisted. I did my hours 9 to 6. Nothing outside. He lost half my work power for seeing me less than 2 hours more a day. The team followed me. In the end, he let us do as we were doing already (and was working neat already).\n\nYour manager is lame, make their manager know by pressing metrics related to their decision. Workers are more important than managers. People tend to forget that. If the work isn't done, the manager's KPI drop, their position too.\n\nEdit: important note, in this fight, you should be prepared to lose your job. That's why you should be looking elsewhere. Teach them, but don't stay around.",
            "It\u2019s kind of both. They have calculated that they can save on one staff salary by putting former staff engineer duties on senior/mid level (not sure what level you\u2019re at). So, you\u2019re likely being used there in that way.\n\nBut they are also not wrong it could go in your favor. Start doing those things too, start interviewing, see if you can sell yourself elsewhere with that experience/duties as staff/principal. If you manage to land such role soon, great, you\u2019ve showed them that they undervalued you. If not, well, the reality leans more towards their arguments then.",
            "Companies will use very trick in the book to try to compensate you as little as possible. It makes most sense from a company's POV to pay you just enough that you don't get unhappy enough to leave. \n\nSo if you come across as someone who just takes what your manager said to you and just roll over like a good little doggie, they'll never give you the salary that they are actually willing to pay for your role.\n\nThis is also why you see often that a new hire makes a ton more for the same role; they really needed someone to fill the role. And the other existing devs never expressed enough unhappiness.\n\nTry resigning. You'll suddenly see they are more than willing to offer a much higher compensation.\n\nCompanies are in no way loyal to employees, and neither should you be in return. It's simply a business transaction and should be seen that way.",
            "Here's what I have done in the past: Tell them you'll do it, but you want a change in job title--this costs them nothing monetarily. Make the title as marketable as you can. Something like \"Lead Architect\" or whatever you feel is best for you. Then find a comparable role at another company that actually pays what that role is worth. Head there.",
            "It's not a corporate bullshit if it's true. You proceed with a role, learning new stuff and getting better. If the current company fails to compensate the extra knowledge and load, you now have this experience for a company that needs you.",
            "I am going to be that guy.  How big can a project be with a team of 3 where two people can do all of the coding? \n\nAnd what does a \u201cstaff architect\u201d actually mean in a small \u201cscale up\u201d company?",
            "From my experience in situations like that, they basically have no budget and now have to backfill two engineer positions which can get very expensive very quickly. Just a shortsighted gamble that OP won't make that 3.",
            "My official role description definitely is below in seniority compared to what manager read out to me and then backtracked on the next day as soon as money was brought up.\n\nContract is almost 4 years old, been promoted and gotten raises since.\n\nI've started interviewing elsewhere just to test the market and practice. Been ok so far! But yeh heard the market is tough.\n\nManager also mentioned to me saying I likely won't get paid the same in other places \ud83d\ude02\ud83d\ude02.\n\nThink they're taking me for an idiot.",
            "> This is normal.\n\nThis is only 'normal' if you accept this. Companies will always try to low-ball engineers and keep doing this until you make it very clear you don't accept it.\n\n> Only thing I\u2019d say, is that if this is an area you\u2019re interested in, a year getting to grips with the role might help for the next job.\n\nI don't understand why you're completely siding with the employer here. This is a completely self-sabotaging approach. Why maybe make more a year down the line when you can make more now?\n\nI'm sad that this is currently the top response.",
            "It may be \"normal\" but that doesn't make it acceptable.",
            "Thanks for the advice! Will definitely consider doing this if the job search is taking longer than I expect. \n\nMy relationship with the manager has completely been going downhill because he just speaks on behalf of the company and doesn't talk to me like a colleague or human. \n\nHe's losing his team and I think he's oblivious to the fact people are leaving in part because of him. He just acts as a proxy for whoever he reports to. Granted could say he's doing his job somewhat. Especially if their strategy is to cut salaries and they actually want people to leave. But I don't think he knows how to manage people.\n\n2 people leaving and another teammate pushed for moving off his team recently to work in a different org.\n\nThere's no feedback mechanism in the company to pass feedback up like skip meetings etc. I assume it's set up that way by the higher ups to protect themselves. The company culture is quite toxic in general, with lots of employee churn, lay off (reorgs), politics and people fucking eachother over to get into positions of power.\n\nA lot of people are in positions here that I can't understand how they've gotten to as it seems they provide little value but are in power and decision makers.\n\nI'm definitely going to be looking to leave, hopefully get lucky in the current market. Granted I've had a few calls with recruiters offering similar salaries. \n\nFingers crossed.",
            "Thx for the reply. I'm senior btw. And I'm not going to be looking for staff / principal roles. It's not something I'm that pushed about. It will likely end up being a side move rather than anything to progress my career. Just to get out of the toxic environment.",
            "And, when you resign, don\u2019t play the counter- offer game. Never ends well.",
            "And once someone digs in and actually asks him questions about the size of the team (3), they will immediately know that the term \u201clead architect\u201d is bullshit",
            "I was never given a choice. Or asked if it's something I was interested in.",
            "We have multiple teams in the company. Roughly 250+ employees.",
            "Not an architect role, staff engineer",
            "Scale up not the correct term, SME. Will edit OP",
            "Yeah, managers don't talk down to people like this unless they're trying to manipulate them",
            "> Manager also mentioned to me saying I likely won't get paid the same in other places \ud83d\ude02\ud83d\ude02.\n> \n> \n\nGet the fuck out of there.  Personally, on the way out I'd email the CEO and tell them why you're leaving.  I know that goes against the grain here because everyone wants to preserve any connections they can, but let's be real, that company is going to die and you'll never see those people again.  It's not like you're going to be blackballed from the industry for speaking the truth.",
            "> Manager also mentioned to me saying I likely won't get paid the same in other places\n\nYou have a terrible, manipulative manager. He's negging you so that you'll accept this senior role without being given the title and benefits of being a senior.",
            "Normal here means that this is a common thing in the industry. That\u2019s all. I am not using normal in the sense of normalising.\n\nOn the second point. Yes, I\u2019ll defend it. I\u2019ve taken an effective 50% pay cut just to work with technologies that I wanted to use in the future. That 18 months got me a job I **really** wanted, but couldn\u2019t get past the process for previously. I needed X and Y on my CV.\n\nThat\u2019s effectively what this is too. If this is the path they *want* to take, use them for the experience, so you\u2019ll look good in the interview for the great job.\n\nEdit: that pay cut was due to going to a startup with zero funding (just the founders\u2019 bank accounts), but good tech.\n\nI also said moving on every couple of years is fine. How is that taking the side of the employer?",
            "Nowhere in my response did I imply that. In fact, I complained about being poorly treated.",
            "Preaching to the choir buddy",
            "Yeah, fighting back is good if you have any leverage. If the whole org is OK to drop your project and team, you don't have much leverage else than suing for any breach of contract. But that's also time, energy and money. I have gone this path (in France) and it's not worth it (but I did win). Maybe in the US it's a better ROI.\n\nIf the org still requires the project. There are many ways to \"skip level\" without doing an actual skip level. Just drop the KPIs of the project (quality, productivity, security...). Blame publicly the lack of skills and resources. Explain the situation is because of the strategy (don't blame people). I mean \"cut 70% of the resources and expect it to be the same or better\" is insane for anyone on earth. You can do that more or less aggressively, your choice. Keep a private copy of all this so nobody can blame you for not warning (legal safety). Do it professionally, let emotions on the side (but you can say that you are not OK with some things).\n\nBut IMO, the best strategy for you is to protect yourself. If you wanna fight back for your sake, do it. Sometimes it feels better to know that you didn't eat shit. You didn't accept. It's important because we accept far too easily to eat shit for others. \"Don't set yourself on fire to warm up others\", read that the other day. Pretty on point for a lot of things.\n\nSo I would advise, seeing what you describe, to move away as fast as possible.",
            "You can take it, but only once. It might extend your tenure there for 1-2 years, but not more. That's what I've seen with people who did take counter offers. \n\nI personally think that by the time you decided it's time to leave, you really should leave anyway. I think I got counter offers at 4 out of 5 employers I left, and was never tempted to take them.",
            "You give them a choice:\n\n- the company has a staff engineer and a junior\n- the company has a junior\n\nYou will find a job. Key is to just be silent about it until the very last moment, when you got an offer somewhere else.\n\nYour management seems to respect thick skin. So go and get that respect.",
            "But you said you  have a team of 3.  The typical \u201cstaff\u201d level role is over strategy of multiple teams.",
            "That\u2019s not any better.  A \u201cstaff architect\u201d with a team of 3 is title inflation.",
            "Yeh I've never rly gotten along with him either. Have little respect for this person. In general he delegates all of his work to others and pretends to be always busy. It's a common opinion amongst team members / ex team members.\n\nMaybe our personal relationship is also getting in the way of him vouching for me and helping me get what I want / deserve.",
            "I do understand how taking up some new role and responsibilities to use as practice at a current place before moving on could be beneficial. Or branching off into something new in general without a salary progression. I think it's a valid point.\n\nHowever I guess my original post doesn't have enough context. I'd be moving away from coding / implementation to a more system design, mentor role and cross team collaboration role. Except*** without a title or comp change until \"I prove myself\". Lol. Basically some free higher level labour, that they have confidence in I can do.",
            "Speaking of counter offers. I did this once 1.5 years into working at the company to get a 60% increase as at the time they told me I was 1 week off finishing probation during a comp review period \ud83d\ude02\ud83d\ude02. \n\nWas told similar by the recruiter who offered me a new job that in general accepting a counter offer doesn't end well and you'll leave anyways.\n\nSeems like that's where I'm at now.",
            "Yeh this makes sense. Unfortunately already fucked the being silent part \ud83d\ude02",
            "Our orgs have staff per 6/7 people in some cases multiple teams. From what I understand also, roles are quite different from company to company. Senior can mean something at one company and another at another for example. \n\nMy post is not really related to the name of titles. It was clear my role is changing to a higher level, different work. Hence the post.",
            "We have had a growing team by next year would of been alot more than 3. And new projects ramping up. But we had resignations as I've mentioned.",
            "Is it the role progression you want?  \nIf so, could you realistically get it by moving companies, for more money, but without experience?  \nIf not, and being forced in to the role, find another company.\n\nThat\u2019s as simple as it is tbh.\n\nI think it\u2019s different in the US, from what I\u2019ve read here, but here it\u2019s very normal to get to have some say in your new title, and making it sound important is great for a CV. I\u2019ve gone from lead dev to architect, just for taking on some tasks.",
            "I suppose since then my line management changed since it's been a few years. If it was the same maybe the outcome of the current situation would be different.",
            "If I'm reading this right, your company has a 1.5 **year** probationary period? If I'm not reading it right, what do you mean?",
            "Always negociate from the position of strength.",
            "The team often ends up servicing multiple projects. So the staff level should be able to oversee multiple projects.",
            "It's the role progression I want, but not for free. If I'm stacked with more responsibility, stress, more hours, be on the hook for higher level decisions. Not for the same comp I'm on. \n\nBut yes also I'm being forced into the role. \n\nThis is in EU btw.",
            "It was 6 months probation. And didn't get a raise due to my probation being 1 week off ending at the time of comp review. I thought this was absolute bullshit, but stayed as I didn't have anything else at the time. I complained but got shut down. \n\nSo like 5-6 months ish after a mate of mine got a job at a company that was paying quite good and I applied got an offer that was 55% higher. The current company offered me a 60% raise and promotion to stay. Promoted 2 levels above my role at the time, to senior. I took it because I was on an exciting project and liked the team I was working in. They seemed to have also rly needed me at that point.\n\nSorry it wasn't exactly 1.5 years just over a year more like.",
            "The thing is, it is disadvantageous to take counter offers. They ALWAYS come with strings attached and you get instantly recognized as a flight risk.\n\nI negotiate from a position of power **with someone else**.",
            "Ah. EU. Then sorry, I\u2019ve had the very exact same experience. It sucks.\n\nHonestly, if you could negotiate a new job title, I\u2019d contemplate that, just so that could go on the CV, along with the extra important responsibilities.\n\nDoesn\u2019t matter if you only do it for a month before applying elsewhere.\n\nIf someone then wants to check your job title etc, it\u2019s what it is.",
            "Not applicable at staff level.\n\nWhat you say is true for mere ICs."
        ]
    },
    "How to handle a production incident? ": {
        "title": "How to handle a production incident? ",
        "score": 45,
        "url": "https://www.reddit.com/r/ExperiencedDevs/comments/1dlmcmp/how_to_handle_a_production_incident/",
        "content": "This noon we had a production incident which impacted huge no of customers not a financial impact but notifications was generated twice. \n\nWe had very intensive testing process and 2 tech releases before the actual launch yesterday and this issue never happened. Irrespective of all it malfunctioned. \n\nI am alone  feeling very low at this moment crying since evening.  Lost Half of the family in a fatal accident two weeks before, lack of focus and this prod incident today. \n\nManager and product owner were already mad at me for letting the whole go live down. Donno how to handle this \u2026 feel like quitting myself \n\n\nTell me some crazy  prod incidents happened for you and how did you answered to various stakeholders \n",
        "num_comments": 40,
        "comments": [
            "> Half of the family in a fatal accident two weeks before\n\nbruh you dont need to be worried about some whatever prod issue with zero financial impact. \n\neven if the company was going under as a result of this... you have way bigger things you are currently processing\n\nplease take time for yourself to grieve dont just throw yourself at the work its just not good for anyone.\n\nedit: i have dealt with many production issues. so long as i do what i can to prevent them in the future i generally find people are understanding.",
            ">Lost Half of the family in a fatal accident two weeks before, lack of focus\n\nWhat the fuck why are you even working?? That's self-inflicted... Right? Not your work forcing you to be in? \n\nTake time off for bereavement. Like now. I'm not sure how you could even begin to focus",
            "My first day on the job I took out the production elasticsearch cluster. One does not simply say \"oops.\"Took a week or two to get the cluster back online. \n\nYou need to stop working homie and take some time off.",
            "Hug-ops for you. 2x.\nOnce for the family accident. One for prod. \n\nAs for work. Blame-less post mortem time. \nLearn from what happened. Team wide ppl learn and commit to doing better in the future. Can't change the past.",
            "Red flag: people mad at each other for things going down\n\n\nRed flag: what the fuck take bereavement leave",
            "I took down a FAANG+ company for 24 hours leading to millions in lost revenue. And I probably don\u2019t have even the worst one here. \n\nMoral of the story. Take care of yourself friend. Multiple notifications are nothing. Product might even consider it a feature not a bug :)",
            "I work in a FAANG. Whenever we have a production incident, we conduct a review.\n\nThat review tries to go over the incident, its root causes, *the root causes of the root causes*, and if possible, the root causes of the root causes of the... you know the drill.\n\nThis is blameless. Things happen. The cause of bugs are engineers. We stop shipping on some times of the year when we absolutely need to have our services up.\n\nIf something happens *again*, we go over the first review, we see what recommendations were there, if they would have stopped the second incident. If we missed something, we then add that. Again, blameless.\n\nIf some recommendations would have prevented the second occurence, we ask why they were not implemented. Then, if no responses, we start assigning blame as that shows wilful disregard and intent.\n\nSo, in your case, I'd suggest doing something similar. Do your own investigation. Provide a set of suggestions that would have prevented the incident, and *take responsibility on implementing them*. Provide a plan, and at the end of the year, show every tick crossed for that plan. \n\nHigher ups *hate* uncertainty. At the moment, you're an uncertain entity - they don't have any assurance you won't do it again. \n\nProvide that to them.",
            "Last failed release, we just did a quick roll back followed by the post mortem.\n\nShit happens, but I still understand taking it personally. Learn from the mistake and figure out why none of the prior testing caught the issue so it is less likely to happen in the future.",
            "FULL STOP. \n\nPlease do not do a post Mortem exercise two weeks after such a tragic family loss. Doing the exercise named after when someone unexpectedly dies - is a horrific idea. In this case one is not needed anyways, your manager and the product owner should honestly both be fired. I am floored at their lack of humanity. \n\nYour management totally failed you, none of the problems with the launch were your fault at all. I am sorry you are feeling guilt. \n\nPlease take time to grieve. I lost 1/3 of my family in COVID and I needed 2-3 years to really feel like I could work well again. It never is okay - but it has felt better. If you do not feel like you can take time off - if you are full time you can take 3months with the family medical leave act with no fear of retaliation. DM me if you would like more details. \n\nI am so very deeply sorry for your loss.",
            "> I am alone feeling very low at this moment crying since evening. Lost Half of the family in a fatal accident two weeks before, lack of focus and this prod incident today.\n\nPlease focus on yourself first, second and third. Is your manager aware of this? If so they are a raging asshole.",
            "Don't worry, duplicate notifications is nothing in the grand scheme of things. Always prioritise personal health and family over work, unless for some reason you really have to do to pay bills\u00a0",
            "Are you ok OP? Don\u2019t worry about the prod incident or what your manager thinks. Prod incidents are a right of passage for software engineers. It\u2019s not the incident that counts, it\u2019s how you handle the incident, how you take necessary actions to make sure that what led to the failure doesn\u2019t happen again (e.g., figuring out why the tests passed), and what you learn from it counts in your career. I just had an interview yesterday where they asked me to give an example of a time where I had to handle a prod incident. At that moment I was thankful that I had some good learning opportunities. Please take some leave to process what happened to your family. That\u2019s more important. Take care",
            "Focus on yourself right now.",
            "A notification was sent twice? While that's certainly not great, it's also a blip that most customers will not think about after a few days have passed.\n\nI would schedule a root cause analysis.  Have the team walk through what went wrong and use the five whys exercise to get to root cause of the failure.  Typically a mistake like that isn't one person's doing; it's a cascade of failures.  Getting to the root cause will not only bring light to the cause of the omission, it will likely prevent an entire class of similar errors from occurring in the future\n\nIdeally your team understands that these things happens; if you handle it professionally, then I think they'll appreciate the candor, accountability, and the steps you've taken to improve things.\n\nAlso, as everyone else has said, if you're suffering from a personal tragedy, taking time off work is perfectly reasonable....remember it's just a job...your own life and well being are the most important things!",
            "Take some time off and grieve.  \n\nWork can cope without you for a bit.\n\nLet them figure it out and just give yourself time.",
            "The prod incident isn't as bad as you think it is. You are just in a tough spot emotionally which is very very very understandable.\n\nTake time to grieve for your family loss, that is way more important. I'm so sorry that happened.",
            "Hello! I'm sorry for your loss. Do you need some space to process the accident? I would highly recommend therapy or talking with friends, other family members, religious leaders if that's your cup of tea. That's a lot to unpack. Which maybe impacting your reasoning for the incident. \n\nAs for the incidents. They happen. Stay calm, process what happened, come up with a plan to resolve it. Once services are back up. Look into any long term fixes that can be applied to ensure the issue can't or less likely not happen again. \n\nLook into doing fire drills in a like for like environment and come up with plans for when things go wrong. Practice those plans during the fire drill. \n\nIf management is looking to blame and shame. That's not a good environment. It is time to move on. A good environment would allow you to have space to fix and prepare for the next fire and guide and help you with these things. \n\nAnyways OP best of luck and take some time, breathe, find time and people to help with processing your emotions. Also hugs! <3",
            "I am sorry for your loss. Not sure what country you are from, but take a look at bereavement employment benefits. Take time to grieve and breathe.\n\nAnyways, back to your question, usually a production incident is followed up by a meeting / discussion to know how it happened, why it happened, how long was the estimate, and how long it actually took to fix as compared to estimate and what could be improved on to prevent such from happening again.\n\nCompany will also determine if it's worth announcing in social media as status/incident as a proactive way if it directly affects end users so that support staff can manage the potential damage if any on the end users especially if it's a SaaS app.\n\nYour case is rather more on you really need to take some personal time off to feel your emotions and just grieve.",
            "sorry for your massive loss :( take some time off please, take bereavement leave, prod incident is nothing to worry about right now -- company will be fine, incidents happen",
            "Sounds like a management problem. Production issues need to be blameless and your incident reports should be focused on identifying the root cause and preventing it in the future.\u00a0\u00a0 These issues are rarely (and in fact, should never be able to be) caused by a single person.\u00a0\u00a0\u00a0\n\n\n\u00a0I work at a game company and and one of my coworker's inefficient code took down the login system for 2 hours during a peak in game event.\u00a0\u00a0 We never blamed and didnt even mention the name. We however created new rules where the 2 tech leads must approve those kinds of code changes, and QA lead must approve testing plan, before being released.\u00a0",
            "Sounds like your bosses are fucking jerks and not human at all if they didn\u2019t allow you to take bereavement leave",
            "Prod accidents happen all the time. Have a blameless post mortem and figure out why your process missed it and change it. On top of that take a mental health or bereavement break. You are always more important than any company you are working for.",
            "First time? It's really not a big deal. Stuff happens. Zero financial impact means it doesn't really matter.\n\nFill out the RCA paperwork, figure out what could be done better next time (if anything) and move on with your life. I've broken prod plenty of times in the past. Modern testing helps, and all of the standard industry practices we have now are written in the blood of mistakes someone else made, but it still happens. Don't sweat it.\n\n---------------------------\n\nFrom what you're saying, it sounds like this is just the straw that broke the camel's back. Dealing with death is hard, and can take a while. I've had lots of friends and family die in my life. Usually I can push through in the moment to accomplish what needs to be done (funerals, paperwork, cleanup, etc.), and then a month or two later it hits me hard and I'm just crying uncontrollably for a couple hours.\n\nGood luck.",
            "I\u2019m so sorry for your loss. In my opinion it\u2019s crazy you\u2019re still working and not taking bereavement.\u00a0\n\n1. Post Moderm (objective and blameless) - figure out how it wouldn\u2019t get caught during testing.\u00a0\n2. Push back against stakeholders.\u00a0\n\nYea double notification during a go live doesn\u2019t give the best first impression.\n\nHowever it\u2019s not really that big of a deal, and I\u2019d be pushing hard at the powers that be to take a chill pill and stop taking so many little things seriously. Nobody got hurt and the bank accounts are normal.\u00a0\n\nI get why your product owner is upset but I\u2019m sorry your manager is spineless.\u00a0",
            "Jeez dude, you need to take some bereavement time.\n\nOn production incidents: been there done that. The org needs to understand that production issues WILL happen, potentially with big financial impact, and prepare for when those issues happen. As a rule, a crisis manager should be assigned, there should be a ticket system to document the issue's progress, and the first priority is mitigation, even if you don't know the root cause; find the impact and try to circumvent it or at least alleviate it. And another thing: never feel guilty about it, it's the team's responsibility, and it's a fact of life - the important thing is to work on the problem and solve it. All is well that ends well.",
            "sorry for your loss...maybe take some time off to get yourself straight after this\n\nmy second week at the job i'm at now, there were a bunch of tickets in the backlog and i took on a ticket to only load the stripe library on routes where we need it, since it's a fairly heavy script...it was required to accept payments on a new feature we had just launched, and the routes where it was needed was listed in the ticket, but the PM hadn't updated with a few new cities the feature was going to be active in \n\nalso, i joined during a big launch so no one really ran down the release process and i didn't realize merges to main get automatically deployed to prod\n\ni took down the payment form for a whole weekend on a shiny new feature, and had no clue til monday at like 8am when i got a ping..i immediately knew what it was and pushed up a fix, then added a test for the fix\n\nthe VP of Eng was in the post-mortem / post-launch retro because there were a few other issues to discuss...i was nervous, but he actually used the way we handled the issue i created as an example of how to handle issues\n\ncode is going to break...how fast you can recover from a mistake and how can you ensure it won't break in the same way again is about all you can control...sucks people are trying to blame you, but if a single person can be at fault it's actually an team/org/culture problem",
            "bruh doesnt matter how extensive and focus the testing was, there is always a possibility for bug to occur. Remember the idea of test is to reduce tisk, not to guarantee no bugs. \n\nEvery major bugs, create RCA root cause analysis and put lesson learn. Never blame and admit if therr are anything you didnt do and learned from it. \n\nOnce our release related to mail notif went allright but there was an alert related with convenience store that was already closed but still available in our platform. This cause the user to be able to choose to that place and our manager went ham to the PIC. \n\nOur defense was that we didnt receive the updated list nor we can proactively check which store already closed or not. This is very very edge cases and I felt bad for our colleague who got blamed for it.",
            "This will seem like a much bigger deal because of the emotional state you're in from the tragedy you're still dealing with. It sounds like you don't really have support from your team, which sucks, but try to go easy on yourself.\n\nIt's important to remember that production incidents are a team effort. Yes, you may have written the code, but someone reviewed it, and it passed the test team, and there wasn't infrastructure guards in place to prevent something like this. If code reviews and testing didn't happen, it's probably because management isn't budgeting the time or money into those areas, or leadership hasn't put those processes in place. \n\nI'm not saying to pass the buck, but it's easy to take on the whole weight of these incidents and lose sight of the whole picture. The best teams I've worked on always try to learn what processes can be put in place to prevent an incident from happening again, and it's always the sloppy teams that focus on placing blame.\n\nI don't care if you're an absolute genius of a developer, everyone who regularly contributes code to a production environment is going to eventually introduce a bug. It's the whole team's job to figure out how to catch those before they go live.",
            "Sorry for your loss.\n\nBugs happen, the shuttle software was the most rigorously tested written software I\u2019ve ever heard of, it still had bugs.\n\nSoftware development is a team sport, failures belong to the team not a single dev, the issue arises because we are at the far end of the pipe so when all the fuckups happen upstream they don\u2019t become a problem til they get down to us but accepting that intellectually is far easier than internalising it emotionally (doubly so when emotions are fraught already).\n\nIt\u2019s not your fault anymore than anyone else\u2019s.",
            "First one huh? It gets easier after a few prod incidents",
            "read about incident management and non blaming post mortem  https://sre.google/sre-book/postmortem-culture/ - good starting pointing",
            "> Notifications was generated twice\n\n> Manager and product owner were already mad at me\n\nWhat the fuck?\n\nFind a better team. If people don't share responsibility when shit hit the fan, they don't deserve to make any money. I hope their business will die soon.\n\nIn my dev team, we pretty much all killed production for a few hours in the middle of the week and nobody blamed anyone.\n\nI cherish my notion page dedicated to incidents as it is the best way to learn to make a better system.\n\nWhen everything goes right, there's nothing to improve and nobody become any better.\n\nAlso no amount of test is going to prevent bugs from hitting production. That's a fact.\n\nFinally as everybody mentioned, work is not your family.\n\nTake care of yourself first.\n\nYour priorities are not right at the moment.\n\n> feel like quitting myself\n\nShow them you can own your mistakes by improving the process.\n\nBut don't overdo it. Just do one single improvement and call it a day.\n\nBaby steps are how you build a robust tech stack.",
            ">Manager and product owner were already mad at me for letting the whole go live down\n\nProd incidents do happen despite. It is never one person's fault, but often a mix of some missing test coverage and bad luck. \n\nYou should talk with them and adjust their expectations. \n\nA blameless post-mortem is what could help most with reducing the frequency of incidents.\n\n>Lost Half of the family in a fatal accident two weeks before\n\nThis is the real omg, not the prod incident. If your country work laws or company policy allows bereavement leave, then do so. If sick leave is possible for mental reasons, with doctor's notice, then use that. \n\nYou might also want to talk with a mental health professional. \n\nTake care of yourself!",
            "I just want to add to the chorus of other voices here and say, please when you can, prioritise your own healing and grieving in this time. Whatever that might look like for you.\n\nProd will recover with or without you, wishing you all the best OP",
            "Not appropriate for this sub.",
            "I know your heart's in the right place, but OP likely doesn't need the blaming tone right about now.\n\nThough you're right about taking bereavement time if possible. Not all companies are great, or even decent to their employees, and one tenet of grief periods is not to make large life changes despite frequent desires to do so - as in, not quitting/losing your job.\n\nOP, it fucking blows, I lost my wife and had to work a late night hotfix 2 or 3 weeks later. It's some bullshit. I was actually passing out when I got a call saying my last publish didn't fix it, so logged on at about midnight to rerun a build and publish a fixed package after I had thought I previously did it.\n\nLuckily I had previously been part of our package manager's POC and setup so still had privileges to just do the needful in getting the package uploaded quickly with the correction. Ran the manual package install and test process to validate, called back coworker and let them know we should be good. Then put my ass back to bed.\n\nThere's my outage story for ya.\n\nNow I hope you may take time to grieve. It's awful and you won't have enough, but do what you can during work too to execute at a minimum. I remember running a branch strategy definition group and finding that felt productive and low stress because it was all documenting and consensus building, no deep technical investigation, timeline, or responsibility needed. I took more breaks, often I'd take a 2 minute drive from the office to a park to just walk there for 20-30 minutes, sometimes a couple times a day. Find your own coping strategies and I hope your company is good to you about dealing.\n\nIt sucks OP and I'm sorry",
            "+1 for blameless post mortem. Individuals aren't faulty. Systems and processes are. \n\nAs a team, fgure out what aspects of your systems and procedures contributed to the outage, the time to detect, and the time to recover. Suggest, prioritise, and action changes to your systems and procedures to reduce the likelihood or impact of similar incidents in the future.",
            "I dropped prod db and shut down an entire factory/logistics pipeline.\n\nFortunately that was my second week, my first week was spent setting up automated backups on the prod DB (that place was a shitshow) so I recovered it within the deploy window (yep, they used to take everything offline for an hour to do a deploy\u2026because it was *all* manual).\n\nThese days, I have two accounts on my Linux dev machines, main only has read permissions for prod, I have to log out, back in to get to an account that can do destructive things\u2026and all prompts/backgrounds are red for prod.\n\nLearning from your mistakes is experience, learning from other peoples is wisdom ;), I have a lot of experience :D",
            "My friend, that last line makes me laugh, and rings very very true. I think many of us understand the pain."
        ]
    },
    "Just a reminder to get up and stretch ": {
        "title": "Just a reminder to get up and stretch ",
        "score": 115,
        "url": "https://www.reddit.com/r/ExperiencedDevs/comments/1dl7ft5/just_a_reminder_to_get_up_and_stretch/",
        "content": "I was just diagnosed with osteoarthritis of the cervical spine (arthritis in my neck).  It's a direct result of well over a decade of being hunched over a keyboard all day.  I suffer from excruciating neck pain on a daily basis now.  Some days I'm not able to even turn my head.   So make sure you're keeping good posture while working at your desk,  taking a break to stretch every 45 mins and doing your daily neck and back exercises.  ",
        "num_comments": 53,
        "comments": [
            "Physical therapy and yoga are just the ticket for this - made a huge difference for me.",
            "Don't cheap out on your health. If you wait too long you might not ever truly recover.\n\nEat well. Drink lots of water.\nGo for walks or bike rides.\nBuy a nice desk chair.\nBuy a nice mattress.\nGet enough sleep.\nDon't use your phone in bed.\nGo to Pilates once or twice a week.",
            "I've been a software Dev for about 20 years now, a few years ago I started triathlon (multi discipline sport basically) and have now moved into swimming cycling and martial arts. The martial arts has actually increased my resistance to back issues considerably. Something about compound movements, strength and agility training.\n\nMy desk at home has the monitor mounted on an arm with my eye level at centre screen, which for someone at 198cm tall is important. Gives me little reason to slouch.\n\nI make sure I get up at least every couple of hours to get a drink, eat, move a little play with the dog, etc.",
            "Just a reminder walking pads are around $100 on amazon.\n\n\nSpending 2 hours walking a day has changed my life and basically resolved my back and booty pain.\u00a0",
            "If you think stretching is enough to avoid osteoarthritis I have a bridge to sell you",
            "If you can, get your monitors several  inches above eye level. I started doing this and it means I have tilt my head up. Which make me more conscious of where my posture is. Standing desks are great if that's your thing, but if your neck is still craning downward to look at your monitors, it ain't helping your posture.",
            "My spouse has that but I'm the programmer, he works retail. Doesn't seem fair. (PT has helped him a bunch, there is hope).",
            "I didn't do physical therapy, but I got a trainer who was very knowledgeable with clients who work desk jobs (this is probably hit or miss so I'd just go see a physical therapist).\n\nI had crazy muscle imbalances that led to one side of my body compensating for the other, ultimately leading to a lot of pain in my neck and lower back. I had no idea this was even a thing. But since correcting my muscle imbalance, I've cleared up a lot of tension and feel great.\n\nI can also actually lift heavier weight than I ever have in my life. Even more than when I was in my 20's.",
            "This only reinforces the need to have a standing desk and a walking pad to be covered by insurance. My insurance FSA paid for both once my doctor gave me a letter of necessity. I lost 40 lbs and loosened my joints from pain",
            "Learn proper form for ergonomics, 34 years a programmer, no issues",
            "When I work from home, I like to play physical records when I\u2019m not in a meeting. It forces me to stand up and change it every 20 or 25 minutes.",
            "Worthwhile post. It's so easy to fall into the bad posture trap. If I can add 2 cents, exercise & nutrition, one or both, fixes most of the slovenly problems. And of course attention to the spine.",
            "not 45 minutes. every 20 minutes 3 minutes strech. ive developed software that locks me out and shows me exercises after n minutes use time",
            "Before I started WFH I had this dialed in: after your morning coffee and between meals or other breaks, drink water all day. Getting up to refill or to go to the bathroom are good timers.  And you get a little exercise looping around the office (take the long way if not). \n\nNow I forget all the time.",
            "If I get up and stretch my Slack icon might go yellow and I'll have a meeting with my manager about how its very important to be at my desk and working.",
            "I feel your pain. I get shooting pains in my arms after typing and sometimes it lasts for days, makes me miserable. Sorry you have to deal with this \ud83d\ude22\n\nHow did you get a diagnosis? I\u2019ve been trying for 5 years\u2026",
            "I\u2019ll add something for those working from home. I keep a kettle bell and resistance bands under my desk. Taking short breaks to move around, exercise, do some stretches, it really helps with not just physical well being but mental health. I strongly encourage everyone who can to carve out time for it. Even if you feel like it\u2019s \u201cnot enough\u201d it\u2019s infinitely better than nothing.",
            "Not just stretching; exercise. Sitting is the new smoking. And the older you get, the faster you'll lose muscle mass if you don't work out. \n\nAnd as a dude over 40; do weightlifting. Your testosterone levels will thank you.",
            "Visit doctor, get a lot of PT (whatever works in your country for this, if permanent pain, we have an extended PT in Germany), LEARN those moves, DO those moves, take diclofenac/diclo patches until you get better.\n\nNot everything is lost but it will be pain for a while. There is a vast difference between \"do some move you learned on youtube\" and \"do the program a PT trainer did show you.",
            "I\u2019m in the same boat except I\u2019m having rotator cuff issues in my dominant arm. Going to physical therapy for it.",
            "going through some lower back issues right now..sitting at a computer for 25 years + 2 kids in little league that want to try and learn how to pitch got my lower back all sorts of messed up right now, but really did it in going down waterslides for my oldest son's birthday a few weeks ago\n\ngot back x-rays on wednesday, going over it with the chiropractor today because this pinched nerve shit sucks and i haven't had a decent night of sleep in like over a month now\n\nposture / monitor and chair positioning / hydrating regularly are all things to keep in mind as you get older and coffee and cigarettes don't do what they used to",
            "with the right training plan and dedication you could get yourself back to pain free",
            "+1 on Yoga. Basically fixed all my back issues",
            "Any advice on yoga? What type of yoga and how to start?",
            "https://www.barbellmedicine.com/blog/where-should-my-priorities-be-to-improve-my-health/",
            "Ive only been doing software for about 10 years (including school) but BJJ/kettlebells/lifting have i think completely inoculated me from back pain.",
            "Which Martial Arts? They are all pretty different.",
            "Everybody here knows what a triathlon is bro",
            "Got a standing desk + walking pad combo. Total quality of life changer. Feels much better, losing weight.",
            "Hey now, no need for negative waves in one of the few decent subreddits left. \"Stagnation hurts\" is the name of the game here.",
            ">\u00a0taking a break to stretch every 45 mins and doing your daily neck and back exercises.\n\n  \nYou are one of those developers going off on a tangent, are you? ;)",
            "This seems to be the opposite of what ergonomic guides recommended. Can you elaborate further? Recommendations are for the top bevel of your monitor to be at or just below eye level.",
            "Dumb question, but do you mean the bottom of the monitor? Like what part of the monitor should be several inches above?",
            "Could you share the repo ?",
            "Chiropractors are just glorified massagers, go to a real doctor.",
            "Chiropractors are quacks, go to a physical therapist.",
            "Yeah 100% agree.   I've started doing twice daily neck exercises/stretches and will be starting PT to hopefully get back to feeling better.",
            "I wish it worked on backend issues ...",
            "Look at yoga studios close to you and what they offer. There are an incredible amount of different 'types' of yoga and the names are rather confusing. Often it's best to just call, explain the 'type' you want to do, and ask if that matches what they offer.\n\nI do yoga at a trainer attached to our Crossfit gym, and I never even bothered to ask her what 'type' this is. It's really just a combination of stretches and static muscle holds.",
            "I did Vinyasa for a while and it was great. If you go into a studio, they can help you pick a class to try. The first class will be difficult, but do not despair, keep at it.",
            "If you like to workout already and enjoy fitness try power yoga. It's a western style yoga focused on strength",
            "Dude\u2019s in software. 90% chance it\u2019s BJJ.",
            "Taekwondo and BJJ. I like the intensity and explosiveness of TKD as a balance to cycling and sitting in a chair or wrangling kids.\n\nI know the memes about TKD, and honestly have experienced a few clubs like that, but mine while it caters for kids also caters for adults that like full contact sparring. You won't grade past purple belt without being good at it.",
            "Yeah but not everyone that sees the word understands immediately that it works most of the body in different ways for different sports.",
            "Maybe go do one and fuck off",
            "If you're specifically looking at spine/bone things, the medical specialty you want is \"osteopath\". Skip the chiropractor, they don't actually solve anything. (Also, fun bonus: if they sever your spinal cord, you're just utterly fucked and usually can't sue them over it.)",
            "yeah i'm still not sold on it but it was covered via insurance and i kinda do just need a glorified massage and back cracking..i've thrown out my back before in the past and it just takes time to get back right but at my age that time has gone from like a week to a month",
            "Musk's grandfather was one of Canada's first chiropractors - being a huge grifter runs in the family. \n\n[https://www.theatlantic.com/technology/archive/2023/09/joshua-haldeman-elon-musk-grandfather-apartheid-antisemitism/675396/](https://www.theatlantic.com/technology/archive/2023/09/joshua-haldeman-elon-musk-grandfather-apartheid-antisemitism/675396/)",
            "Doctors recommend chiropractors for certain issues. They have their place in a comprehensive health plan, and that may or may not include massages.",
            "glad to hear it, also I'd strongly recommend a standing desk with a walking pad, not only do i have less neck and back pain since getting my setup but its noticably improved my base level of fitness",
            "How are you so sure he's in software",
            "What sub do you think you're in?",
            "Lol tough crowd. I should've known \ud83d\ude02"
        ]
    },
    "6 months in my new job and boss bashed me for bugs": {
        "title": "6 months in my new job and boss bashed me for bugs",
        "score": 240,
        "url": "https://www.reddit.com/r/ExperiencedDevs/comments/1dl08yf/6_months_in_my_new_job_and_boss_bashed_me_for_bugs/",
        "content": "I joined a new company 6 months ago and the tech stack and business area was different for me. Day 1, I am assigned a large migration project with a sharp deadline. I am assigned a buddy but he is busy in another migration. So, the help is rare and scarce. Anyways, I worked day and nights to complete the project on deadline. My boss says I have done a great job with the project being new yada yada.This was in march.\n\n1 months down the line, a bug came in one of the code. We find out, my code and all code upstream had to be changed. But, still a bug.\n\nToday, another bug was reported which resulted in some dups in the data. I had made some change in the code which to me at the time looked ok, but apparently wasn't. This prod issue was identified after 3 months in production.\n\n**My boss called me as soon as he heard about the defect**, and bashed me. Blaming me that I don't care about the job and ain't interested to work. I have had too many mistakes and things can't go on this way. When I asked what was the business impact of the issue, he clarified there was NONE because that file was internal and isn't used anywhere. When I pointed code there was no code review or QA, essentially my self tested code was deployed to production-- duh.... The whole project was rushed because of the time deadline. He said he understands that but I am still responsible for my code.And, how great our team is that there is no blame culture.\n\nAny advice on how to salvage this situation?\n\n  \nFor background, my boss is from a research background if it matters. This isn't FAANG or any of the tech companies. ",
        "num_comments": 117,
        "comments": [
            "Rushed project, no code review, and still blamed? That's on the team, not you.",
            "The bug sat in production for 3 months without anyone noticing and he expects you to have found it solo while working on a deadline/time pressure, with no good processes around QA? Either he's getting pressure from above and doesn't know how to protect his direct reports from that sort of pressure, or he has a poor understanding of your work. Either way, a big red flag, and not someone you want to be working under long term.",
            "Bugs are a part of life and even billion-dollar companies with QA armies experience faults and hacks. There is no point in bashing an engineer - it's not feasible for us to never make any mistakes. Sadly, not every boss understands this and getting bashed doesn't magically increase your skills. Quite the opposite, the more stressed and anxious you are, the less attentive to your work you will be.\n\nWhat is worrying to me is that you are describing very accurately what was going on in the previous company I worked at, to the point where I am wondering if it's the same company. No QA, no automated tests, always short deadlines, working nights/weekends, you deliver a major development only for the CTO (former researcher with great pride at having a PhD) to yell at you a few days down the line because of bugs you failed to catch with your manual testing only. Rare help from anyone else, because everyone is just as busy. New colleagues jump right into major development because there are piles of work and there is next to no onboarding.\n\nOur team lasted for several years, but after some point everyone had had enough and in a matter of months everyone, except for one, left. That place has been a revolving door of hiring new people ever since. If you think this might be the case with you too, it is probably better to not plan a long-term stay with the company.",
            "Your boss it a twat.\n\n3 months into prod and finding bug ? Ha.. tell him to go fly a kite.\n\n&#x200B;\n\n>When I pointed code there was no code review or QA, essentially my self tested code was deployed to production\n\nYea.. if that is how it's going to be in the future, I would start looking around for something else.",
            "You dont salvage with karen customers bosses and clients. You ignore them",
            "Only two bugs? Wow. You did an amazing job. Find a company that values you more.",
            "Don\u2019t take it personally, no code review, no testing\u2026 this would have happened to the best of devs",
            "Rushed project with no review? Amazing there are only two known bugs. Congrats!",
            "I had a somewhat similar experience around 20 years ago - my task at the time was to convert data from XML generated by, I think, a SOAP-like web-interface, to some ancient file-format last updated in the early seventies. I did not have acces to any tools that could either read or write that format, only the original spec written for mainframe-programmers. Whenever I thought I had a running version, I'd have to ask my manager to ask the customer to run some queries and test the output.\n\nIt seemed to work for a few months, then suddenly broke.\n\nTurned out I hadn't accounted for the fact that some of the strings in the modern database were longer than were accepted by the mainframe. This wasn't mentioned in the spec, because it was standard for that kind of machine back in the day.\n\nWell, I fixed it, but **my boss suggested that I shouldn't be paid for the fix**, since I was the cause of the bug.\n\nI got extremely upset - this was just the latest in a series of bad experiences - and I told him that I would immediately roll back the code to the previous version, quit, and they would have to pay someone else a lot more to figure out what was happening. He apologized and of course I was paid ... I still quit a short time later though - but let the code stay functional.\n\n  \nAnyways - I don't think either of us handled that very professionally back then. Today, and in your specific case, I would \"apologize\" for the bug, excuse myself with that the project was very new to me, on a tight deadline, and without any way of organized test or review. And then take it as an opportunity to suggest either a more test-driven approach, or as a minimum acceptance-tests or perhaps code reviews with other developers. And stress that since the project is important, we should all be interested that no bugs slip through the cracks, so the more eyes on the finished work, the better. You could even suggest that were you to review others' code, you would also improve your own understanding of the intricacies of the platform or something ...\n\nA bit of a \"humble politicians-ploy\" to suggest improving quality reviews and such!",
            "There's a lot to be said about how this is wrong on so many levels, but you asked about how to salvage this. Let's see. \n\n1. Ask your boss who's responsibility it is to establish and enforce software development processes in the dev teams, processes that maximize effectiveness and mitigate risks.\n\n2. Based on his answer discuss with him where he thinks your role is in all this. Does he expect you to come up with process improvement proposals? Or just small improvements?\n\n3. If his answers are \"I don't know / I don't care / we don't need this / just don't make bugs\" then there's little hope.\n\nEdit: There's a chance he is waiting for someone in the dev teams to step up and help him establish these things, which would make this a great career growth opportunity for you.",
            "One man show for migration is really red flag .",
            "He said there is a blameless culture and in the same breath he berated you for a bug that didn\u2019t surface for months and caused no user or business pain? Do you have any sense how your teammates feel about him as a manager?  He doesn\u2019t sound at all competent or emotionally intelligent. I would quiet quit and start looking for a new job.",
            "Nobody takes this seriously and everyone wants to cut cost in qa and testing department.\n\nBut as an engineer i will sau one thing, good qa's have saved me a ton of times. I won't deny this, some qa are more resourceful to the company then even devs. The fact management and mba holders are using ai to say we dont qa and testers and shit and that devs can write their own test are bizarre.\n\nAny worthy products that has clients need qa ,period",
            "I have more than 20 years experience\u2026 I have made more than my fair share of mistakes.  A little piece of advice\u2026 stop seeing the retro as an opportunity to vilify you, and see it as an opportunity to mitigate future risk. A few things you can think on before the retro.\n\n1.  What testing was in place during the migration?  Was your code unit tested?  How rigorous was QA?  Was there any regression?  I\u2019m guessing some corners were cut if there was a hard deadline.  The retro is where this can be addressed.\n\n2.  They left someone without solid domain experience in charge of a migration.  Absolutely point out that you weren\u2019t well supported.  There may be some things you could have done to escalate support you needed.  The retro is opportunity to learn how to get the support you need next time.\n\nI don\u2019t care when people make mistakes, but I do care how they handle it when they do.  I want to work with people who own their mistakes, and jump in with both feet to help fix them.  It makes it a lot harder when people get defensive and can\u2019t have an adult conversation about it.  Retros can help you work better as a team if you approach them with the right attitude.",
            "Who reviewed my code before deploying to production? Noone? Well who tested it before deploying? Noone? What safeguards do we have in place to protect our production environment? None?\n\nSounds like a process problem. Now who controls the team's processes? Me? Or... you?",
            "I had a similar situation with a boss. What did I do? I ran. I ran so far away. I stuck it out over a month afterwards and he said \u201cI\u2019m seeing some great improvement in your performance, what did you change?\u201d I didn\u2019t change anything. What an idiot. Had my new job offer in hand a week after that conversation and left. Should have left sooner but it wasn\u2019t easy to find something.",
            ">Blaming me that I don't care about the job and ain't interested to work.\n\n>no blame culture.\n\nYour boss needs to choose one. You should probably also choose your sanity and start job hunting.",
            "I had basically this exact same meeting today. Been at this company for a while, I get put in charge of migrating 3 years of data to a new app. The way the vendor designed the app, we couldn't really use any existing ETL tools and had to custom design the migration. Original estimate (which I wasn't even consulted on) had that effort around 2-3 months, which me being new to an ETL process sounded reasonable, actual buildout takes closer to 6 months due to delays in our UI and downstream testing (I couldn't even do anything besides a basic happy path smoke test until 3-4 months in). Actual data migration goes pretty smoothly, except one bug that slipped through all our test cases, and that was fixed within 2 days of that release\n\nThe feedback that I got today was that the ETL buildout should have taken *1 month* and that everything on the release should have gone *perfectly*. All that despite this project having\n\n- no automated testing, manual testing only\n\n- no CI/CD pipeline\n\n- no code reviews\n\n- two senior developers on one side and two contractors on the vendor side (none of whom took more than about 2 days off in 6 months)\n\n- developers and QA team working nights and weekends\n\n- completely abandoned the Agile/sprint cycle and basically been working ad hoc to deadlines (usually without any written spec)\n\nI've had a bunch of interviews the last month but nothing lined up yet, my only regret is that I didn't start interviewing 3-4 months ago when I could see this coming",
            "Lucky you. He just gave you the hint to find new job while not firing you\u00a0",
            "Just go into grey person mode and help find a solution. Treat this as an opportunity to lead ways that this doesn\u2019t happen for others. Focus on the process and not the people will be what has to come through here and you definitely will get a chance to show some leadership chops\nYour boss absolutely lacks here.",
            "In any conversation about blame, I almost always try to diffuse and redirect convo to become about problem solving instead. Unless it is clear someone just wants to yell at me. Then I just mentally block them out and wait for it to be over. I evaluate if my job is at risk, and if so, I do what I can to change my behavior to salvage my job.",
            "Root cause analysis time, nothing wrong with that. Does the company need more unit tests? More documentation? Do they need more QA? What carried the errors and how can we prevent that at least better?\u00a0\n\n\nTry not to take it personal, just cold scientific analysis\u00a0",
            "Sounds like your boss set up the perfect meeting for you to be honest and tell the team your point of view. You should have no fear being transparent and honest so they can decide who's really in the wrong. If they decide it's you.... find another job ASAP.",
            "\u201cThere is no blame culture\u201d while they are actively guilt tripping you about a bug. No sort of review at all? Get what you pay for. \n\nOffer your boss to look it over before you push next time. I\u2019m sure they\u2019ll use a fine tooth comb. Just kidding, they probably won\u2019t. Are they technical?\n\nYour boss sounds like an idiot at best, manipulative and unreasonable at the worst. I had a boss like that, he just wanted to guilt trip people and have his ass kissed.\n\nEnded up with a bunch of terrible devs who kissed his ass. Get what you pay for, I\u2019d start looking for another place personally. I\u2019ve seen people blamed way less for bugs that had LARGE impact at fortune 50 companies. Because it\u2019s a team sport with many layers of redundancy.\n\nIf you\u2019re responsible for the code being written, being bug free, and being on time. What is your managers skin in the game? I\u2019d bust my bosses balls indefinitely and look for a job immediately, if you\u2019re less petty than me just do the job search part.",
            "Let me guess, your boss was never a SWE?\n\nBugs are inevitable, especially if there are no processes in place to catch them.",
            "You\u2019re a god if your code went to prod untested and only two bugs were discovered over 3 months.",
            "Seems like they told you day one what kind of assholes they are, and then confirmed more recently.  Why do you let people treat you like that?",
            ">And, how great our team is that there is no *blame* culture.\n\n\n\n>**My boss called me as soon as he heard about the defect**, and bashed me. *Blaming* me that I don't care about the job\n\nIf these two are true, then your boss is a gas-lighting asshole. The general advice to someone in an abusive relationship is to leave that relationship.",
            "Post-Mortem.\n\nPeople make mistakes.  You're never going to write bug free code, and even if you do you'll never know exactly how it's going to interact with all the other code everyone else is writing.\n\nIn my experience (FAANG-adjacent tech, to be fair, not research, and we've always had decent funding / higher up backing for this stuff) there's almost always a cascade of several things happening which ends up causing the issue.  Or sometimes it's one silly thing that got through code review which no one noticed.\n\nYou've already somewhat laid out the issues above.  Now come up with a plan to fix the various areas that are lacking.  Talk through it with the team.  You don't have to implement every solution you come up with (or even any of them), but having a discussion around what happened and why can get people thinking about making things better for the future:\n\n- Enforced code coverage of unit testing - don't necessarily rely on QA discovering your issues, and it actually provides readable code utilizing the class you just implemented (those tests can be better than writing documentation in many cases).\n    - If a class gets checked in with less than the required percentage of code coverage, then a PR policy fails and it can't be checked in until either: a manager approves adding it to an exception list; or: the coder implements higher coverage.\n    - if you have reasonably good code coverage when you _do_ find a bug, it should be easy to implement a failing test as proof, and then fix the bug so the test passes (a small form of Test Driven Development).  Now the caller utilizing that class can't make that mistake again.\n\n- Enforce at least 1 approver required for every PR (and no self-approving) would mean that at least _one_ other person looked at your code.  Or maybe they rubber stamped it, but hopefully they actually care about the team having good code and want everyone to improve.\n    - Also if you're having the problem of no one actually looking at your PRs when you ask them to, you get to repeatedly come to stand-up and say \"Oh I'm waiting on <X> to approve my PR, please take a look when you have time.\" and hopefully eventually your manager will get the hint.\n\n- Telemetry - no one knew there was a bug for 3 months?  Do you have telemetry?  Do you have dashboards?  Automated alerting at certain thresholds?  Does anyone regularly inspect the dashboards?  All of that's a lot to ask if you have nothing, but you the sooner you start flexing that muscle the sooner you'll have something.\n\nA lot of the above unfortunately is very dependent on team culture, and it can take some time to swing people around to it.  But if you want to have a team which writes good quality code, you need mechanisms in place and hurdles to jump over to enforce that.\n\nOn the bright side, in my experience, _most_ people want to write good code and make a good product, and if you can find those people on your team and get them on your side it will be a lot easier to swing your boss around to it as well.",
            "If you aren't writing unit tests with good coverage and edge cases considered, I'd suggest doing so going forward. It will both make your code cleaner and more reliable.\n\nIt may slow you down in the short term, but your and your boss will sleep better in the medium/long term.\n\nIf anyone complains about slower progress, impress on them how important good code and a stable product is. It's hard to argue against this. Show your maturity in identifying and using these best practices. \n\nThe lack of code review is a red flag for the company in general. The lack of QA isn't uncommon though, even in some larger companies. The best you can do is ensure your code is clean and well unit tested. If there is more time, you can do more testing further up the test pyramid too.",
            "I have an almost identical story. Teammates don't have time to review and test the code, and everything is always rushed.... dont sweat it",
            "Sounds like a really bad boss. Every engineer will introduce bugs at some point and sometimes reviews can catch these bugs while other times they don\u2019t. Either way that doesn\u2019t warrant you being chewed out and told you don\u2019t care about the job. Just sounds very toxic to me. \nFor some contrast, I recently introduced a bug that was only picked up in prod and my managers response when he noticed was \u201cHuh this is interesting. Let\u2019s get this fixed\u201d\n\nNot saying his approach is the norm but should probably be somewhere in between my manager and yours.",
            "I\u2019ve seen CTOs complain about bugs, despite it was written by themselves.",
            "Bugs are never 1 persons fault. For me a disparaging boss is a one way ticket to looking for a new job, I cannot put up with that kind of toxic culture.",
            "> When I asked what was the business impact of the issue, he clarified there was NONE\n\nThis alone is reason enough to recognize that this management is immature. Any execs worth their salt will want to remove these managers asap.\n\n  \n> **My boss called me as soon as he heard about the defect**, and bashed me. Blaming me that I don't care about the job and ain't interested to work.\n\nMid correlation - loser management traits. Just ignore and do your thing.",
            "Only two bugs? Thats almost a fairy tale",
            "So your boss is bug bashing huh?",
            ">Any advice on how to salvage this situation?\n\nYou don't.  You already pointed out that there is a serious lack of processes in place to protect production, and he disregarded that and chose to blame you.  Your boss clearly has no idea how good development works, so now you start hunting for a new job and let everyone else wallow in that toxic swamp.",
            "Sounds like your team has a bad process for checking in code and catching bugs ahead of time.\n\nOn top of that, an emotional boss who would rather assume the worst of you than cooperate as a proper team to fix an issue?\n\nYeah, no. You can't change people, but you can change jobs.",
            "A boss like that can drain your morale. On the other hand, does this code have any kind of automated tests like unit test? How are you testing your code?",
            "Sounds like an opportunity to lead and propose a framework for automated testing infra. If they push back then you quit.",
            "Don't salvage, start looking for your next job.",
            "You should be good. Projects delivered on time discard bullshit. Just cover your ass and have steps you do written down and them signed of that these are in fact test sufficiently. Next time they find something point to steps signed of by them.",
            "Nah tbh don\u2019t play games with them. Tell him and the uppers x, y, and z should have been done to prevent this. \n\nExpecting a new employee to migrate anything is ludicrous. You need at minimum 1 - 2 months of business kt and discovery before I would let any new dev make any meaningful change to prod \n\nI\u2019ve had to call my direct manager out for incompetence several times this year and now he is under close watch and supervision. The older you get the less you care. As long as you can prove the correct way things should be done and the lack of structure, the company can suck it.\n\nDon\u2019t be the nice guy. People get paid to do a job, call them on it. Obviously be understanding of circumstances (life happens), but if it\u2019s intentional, call it and shut it down. It will only continue to others. \n\nFinally, be firm in your work. I\u2019d ask what the meeting is for, what are the expectations, and then proceed. If they find more bugs, then recite:\n\n\u201cWow wish we would have had the proper structure to review this at the proper time and not 3 months down the line. We need to be more transparent with business on proper deadlines for these things to prevent this in the future\u2026 whose job is that? Additionally, who do I talk to about setting up proper training for new employees to prevent a terrible onboarding experience in the future?\u201d",
            "> Any advice on how to salvage this situation?\n\nI wouldn't try to salvage the situation too much and I'd focus more on trying to find a place where they appreciate good engineering. Your value isn't reflected by the environment you're put it, your reaction to events is. \n\nIf you think the project is rushed, you need to find a place that appreciates that mindset. It's just not good match, sorry. Go back to the dread of interviews and make sure you ask questions that makes you accept a job that fits your mindset.",
            "Toxic workplace, find a new job.",
            "Do they have testers?",
            "No blame culture, but blames you.",
            "Did you tell him that\u2019s not how a bug bash works?",
            "Every problem is an opportunity to improve for all involved.  If it happens once, it will happen again. Your boss should be learning as much from this as you. What can be done to prevent the problem in the first place, etc.  They should know better, but at the same time people sometimes go thru things which prevent them being at their best.  Take the lessons and be compassionate to the deficient.",
            "Find a new job. This guy is a moron.",
            "A few questions to clarify some things. None of this is to say that you\u2019re wrong, just that some details are lacking, and the same words could mean different things to different people.\u00a0\n\n>\u00a0I joined a new company 6 months ago and the tech stack and business area was different for me. Day 1, I am assigned a large migration project with a sharp deadline.\n\nDuring the hiring process, was there discussion about the tech stack? Was there discussion about what kind of work you would be starting with? How much time you would have to ramp up? Was the migration project large to the company? Or only to you, especially for day 1 on a new stack. Were everyone\u2019s expectations clearly communicated and agreed to by everyone?\n\n>\u00a0Today, another bug was reported which resulted in some dups in the data. I had made some change in the code which to me at the time looked ok, but apparently wasn't. This prod issue was identified after 3 months in production.\n\nWhen you made those changes, were there tests that should have caught the bug? Either existing or added by you. During the three months, was there follow-up to check the direct or downstream results of your work? At the present, do you understand the bug and what things could have prevented it? Looking back, do you think you reasonably could or should have known these things while making those changes? Is this kind of issue unique to you? Or is it a more general problem that the other devs also go through? Have you talked to the other devs about how they deal with or prevent this kind of issue?\n\n>\u00a0My boss called me as soon as he heard about the defect, and bashed me. Blaming me that I don't care about the job and ain't interested to work. I have had too many mistakes and things can't go on this way.\u00a0\n\nDid your boss actually say those things, or did he say things that could mean those things? Did he give specific reasons why he\u2019s saying those things? For example were there mistakes that he could point to, or instances where you reasonably should have cared about something but did not. Were things in line with the expectations agreed to by everyone? Assuming expectations were properly set earlier on.\n\n>When I asked what was the business impact of the issue, he clarified there was NONE because that file was internal and isn't used anywhere.\n\nDid he actually say that there was no business impact? Or just that the file was only used internally? E.g. internal reporting and tooling can have significant business impact, especially if incorrect data has been potentially building up for months. Was there discussion about the purpose and intended impact of what you were working on? At the start of the project and/or more recently.\u00a0\n\n>When I pointed code there was no code review or QA, essentially my self tested code was deployed to production-- duh.... The whole project was rushed because of the time deadline.\n\nWere these things discussed at the start? Were expectations adjusted to account for these things? E.g. some teams \u201cmove fast and break things\u201d, while others move slow and steady, but both styles only work if everyone involved is aligned.\u00a0\n\n>\u00a0He said he understands that but I am still responsible for my code.And, how great our team is that there is no blame culture.\n\nDo you disagree with either of those statements? Do you feel that those two statements disagree with each other? Was there discussion about what exactly each statement means to the team? Do discussions around problems tend to focus on the problem and solutions, or on the person?\u00a0\n\n>\u00a0Any advice on how to salvage this situation?\n\nI would start by trying to understand the situation a bit more. Keep an open mind about what each person is saying, why they\u2019re saying it, and how it might be received by other people. If you see gaps in the process, try to find ways to improve the process, no matter how small. Or at least figure out how the rest of the team operates and manages risk. And I guess you\u2019ll find out soon whether the team culture is actually blameless, but do try to make the distinction between blame and stating what happened, even when it\u2019s in the form of \u201cthis person did this and it caused this problem\u201d.",
            "How does one say no blame culture while blaming?",
            "I am a very experienced dev and I work with the best in LARGE corporations.  The brightest beyond my skill and multitudes submit prs to fix a bug they\u2019ve created. There\u2019s no way to be perfect, but you can be the best that you can and learn from all mistakes",
            "I had a boss like that, would start looking for a new job ASAP. All it took was two production bugs to get PIPed and he was ex-Amazon manager. Go figure.\n\nMeanwhile, his favorite wrecked havoc on almost every platform causing SEV1/2 incidents every week.",
            "Find a new job mate, red flags everywhere at your current company",
            "Don't forget to throw underthe bus everyone that approved the PR, wrote the ticket, and QA'd it.",
            "Dear boss,\n\nThanks for the recent feedback and your offer to review all my code!\n\nI\u2019m glad I have your support and feel more confident knowing that nothing will get to prod without your expert eyes ensuing there are no bugs!\n\nThank you!\n\n   ~Every engineer ever",
            "Educare your boss on how things work generally. This sort of reviews and bashing is uncalled for. But reviews are happening finally, still a sign there is care.\n\nAlso ask what you need to fix the situation and how much time you need. Explain how exactly you have arrived at your thought process and what this learning will do to improve your thinking going forward.\n\nThat is the only part of your job and take personal equation out of the scope while discussing. Good luck.",
            "Sounds like it's time to find a new job, these types of bosses never improve and it's always a blame culture. He's probably talking shit behind your back.",
            "If it passed peer review and qa it's not your fault.\n\nPeer review shouldn't be pencil whipping check boxes.\n\nTesting should be updated to ensure conversions are bug free.\n\nThis is a management failure of the team.",
            "Sounds similar to the last company I worked at...",
            "Good, fast, cheap. Pick two.",
            "Now, there is a meeting today to review the PR of what went in production 3 months back. I don't know if the purpose is to find something else that was missed or something to crucify me.",
            "It\u2019s on management for putting the dev team in that situation to begin with.",
            "100%. The only time blame is attributable to a developer for a bug is if there is a process, the developer is aware and trained in the process, and the developer didn't follow it. \n\nIn all other scenarios, the failure is a failure in the process. Refine the process to reduce the chances of the same failure happening again.\n\nIf that doesn't happen where you work, they're not interested in engineering, look for another role.",
            "Bosses like this are a dime a dozen at non-tech companies",
            "Absolutely agree!  \n\nEven in a rushed project, the safeguards like requirements clarification, code reviews, testing, sign-offs, verification, etc etc should be in place. \n\nIf the safeguards don't exist, it is the fault of the team/department/organization for not having these things in place.  Without these safeguards, these types of problems are bound to happen.  If the safeguards are circumvented, it is both the fault of those who circumvented the safeguards and those who allowed the safeguards to be circumventable.  \n\nUnfortunately from my experience, when this happens everything devolves into finger-pointing, blaming, and crap-slinging, and the fault always gets pushed to the person closest to the root of the problem (IE the developer).",
            "What team? Have you even read his post? It's him and another guy pretending to onboard him.",
            ">no automated tests, always short deadlines, working nights/weekends, you deliver a major development only for the CTO (former researcher with great pride at having a PhD) to yell at you a few days down the line because of bugs you failed to catch with your manual testing only. Rare help from anyone else, because everyone is just as busy\n\nDescribes my job to a T and I can't wait to get out of here",
            "There is no blame culture but he is blaming you. Ok then. Starts applying to other jobs.",
            "Bugs can crop up anytime, we have seen bugs years down the line. A professional understands this and doesn't take it all personally.",
            ">I don\u2019t think either of us handled that very professionally back then.\n\nNah you handled it great. Shithead doesn\u2019t deserve the response of a professional for saying you shouldn\u2019t be paid",
            "You handled it perfectly. Do unto others as they do unto you!",
            "All very reasonable and useful tips to learn from. I think since the manager wants to assign blame -- and they might've gotten the hint from somewhere else in the company. It may also help to phrase some of the tips as assigning areas of responsibility in a realistic manner -- basically going over what code review does in a business sense.\n\nBut I also wonder: clearly there is something for the manager to learn as well; by doing what's suggested so far, said manager is not learning that. As a result, more problems can arise down the road. But more importantly, OP will expect more problems down the road and will stay unhappy the whole time until then. \n\nImagine if the rest of the company has a good environment, I wonder if there is a way to deal with the underperformance of this manager in this instance by the OP.",
            "this is the way",
            "A first QA is almost always worth more than a 5th dev IME. And a first BA is worth more than a 4th dev.",
            "Currently my situation. Retarded non technical boss frustrated that there's bugs yet he thinks het can away with underpaying me as the sole dev at his shitty company. I'm looking for a new position",
            "This",
            "Win win situation \ud83d\udcaa",
            "From OPs comment, it doesn't look like they would be understanding the delay because of \"some\" tests. I mean no PR reviews, no QA?",
            "What ever the case, go job hunting. The way you describe your boss, he is not a good manager at all. Blaming individuals for problems that  obviously come from bad processes. \n\nIn the long run this type of management is going to run you down and might even lead to a burnout.",
            "If the code is on main its everyone\u2019s responsibility. Youre on a pathetic team",
            "PR review after it's already in PROD? Whoever made that decision doesn't understand how other software departments run in other companies and that is a big red flag...on top of others you mentioned. \n\nThey may be trying to find a reason to put you on PIP. I'd start job hunting and quiet quitting if it were me.",
            "The fact that a meeting is required and is happening to review a PR that has been merged to a production branch three months ago will give me nightmares tonight",
            "A post-mortem to review what went wrong and provide feedback to improve the process would be appropriate. Reviewing the code 3 months after merging, well, what's the point?\n\nAlso, mistakes happen. Being accused of not caring about quality because of one bug in code that was not even reviewed, is not appropriate or professional, unless you didn't follow established protocols. And, even in that case, mistakes happen (especially since you are new).\n\nIf you reported to me, I'd dig in to find the reason why this happened, and take the necessary steps to prevent similar issues in the future (see post-mortem above). It's absolutely a team failure, and not your individual failure.",
            "Lean into it and tell them you wish you had the team\u2019s support of a code review before it went into production.",
            "Blameless root-cause-analysis of issues can be great. If the discussion is: bug was introduced here, had this impact, followed by detailed analysis of: we could have stopped it with code review, with unit tests, with integration tests, with A/B testing in production, with domain-specific quality control checks.  Companies that do that excel and they're soo good to work for.\n\nBut if the discussion is OP did this, didn't find the bug, was defensive when issue was raised, with no mention of the larger organization then it's a blame-oriented place headed by people who don't understand how to make high-quality orgs or code. If that happens, don't quit (bad time) but start on everything: resume, interview prep, reaching out to friends. In the meeting, cheerfully agree to everything, make positive suggestions.",
            "So how did your meeting go?",
            "This is laughable, I hate it when people say this usually but find a different team / job.\n\nThis manager is awful\u00a0",
            "You need just one thing: thick skin.\n\nWhen you get assigned a project, you need to discuss about deadlines and resource allocation before anything else.\n\nYou're not on it with a team, so you are the sole responsible for it.\n\nAlso, ask for an agenda for the meeting NOW, so that you can prepare.\n\nIf there is no agenda, you don't join!",
            "I once worked at a company that claimed to have blameless postmortems.\n\nThe same company implemented a demerit system for outages, meaning you got punished any time you broke something and were at-fault for it.  It was intended to be for negligence, but realistically was handed out at the VP-Eng's discretion based on outage severity and frankly speaking whether he liked you or not.  Enough demerits and you are fired for cause.  With such a policy in place, the blameless postmortems quickly devolved into everyone trying to cover their ass and point blame at the other party. \n\nThe only time we had a real blameless postmortem was when the VP-Eng broke something in prod by making untested changes directly with the AWS root account.  He thought he could lower cost on our main DB only to discover that his cost-cutting measures left our DB under-resourced, and with no autoscaling policy prod went POOF.",
            "They only way to avoid bugs is not to write code.",
            "Yes, as long as they're good. If you get a shit BA and a shit QA you'd genuinely be better off without.",
            "BA = Business Analyst for anyone else who was confused\n\n(All of my roles had the PM as an analyst. Either that or we\u2019d just call an analyst by their name. \u201cSend it to BA\u201d doesn\u2019t roll of the tongue like \u201cSend it to QA\u201d but maybe that\u2019s just me.)",
            "Sound more like a Root cause analysis maybe OP misunderstood",
            "It makes sense to get a review of something once you realise it was never looked at",
            "Deadlines have nothing to do with non-existing testing and review processes",
            "This made me so upset I instinctively wanted to downvote you.",
            "Did anyone subtly hint at the hypocrisy of that being the only real blameless postmortem during it? Also curious if the VP-Eng even attended it",
            "Our execs: \"Make the BA be the QA?  Got it!\"\n\nOur PM has 3 projects they are BA and QA for.  It's going as well as expected.",
            "That sounds like some process maturity this company doesn\u2019t have. I would put my money on this review being a witch hunt.",
            "Really? Testing and reviews take 0 time for you?",
            "To my knowledge nobody brought it up in our company communications, but it was referenced in a 2-star Glassdoor review.",
            "\ud83d\ude2d",
            "I'm a little worried about an architect who can't see the difference between a dev testing their code and a project having a testing/QA process",
            "I'm worried about people trying to help out of their idealized world instead of actually reading the OP and helping punctually on the base of the problems exposed by OP.\n\nThat's not real help, it's vanity help.",
            "The help OP needs is verification that the problem here is the company and management. They can and should test their code, but they are not responsible for the lack of QA processes/staff",
            "[removed]",
            "The advice, while indirect, is practical. You just failed to read between the lines.\u00a0\n\nIt's a dysfunctional environment, leave or accept that. There's little he can do to change being the lightning rod of a flawed process. A super detail meeting agenda will change nothing about his situation",
            "Rule 2: No Disrespectful Language or Conduct\n\nDon\u2019t be a jerk. Act maturely. No racism, unnecessarily foul language, ad hominem charges, sexism - none of these are tolerated here. This includes posts that could be interpreted as trolling, such as complaining about DEI (Diversity) initiatives or people of a specific sex or background at your company.\n\nDo not submit posts or comments that break, or promote breaking the Reddit Terms and Conditions or Content Policy or any other Reddit policy.\n\nViolations = Warning, 7-Day Ban, Permanent Ban.",
            "While I generally agree with you, I disagree with your use of autistic here as a slur. You can do better."
        ]
    }
}
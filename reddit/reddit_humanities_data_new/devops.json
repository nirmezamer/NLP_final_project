{
    "'Getting into DevOps'": {
        "title": "'Getting into DevOps'",
        "score": 705,
        "url": "https://www.reddit.com/r/devops/comments/yjdscp/getting_into_devops/",
        "content": "**What is DevOps?**\n\n* [AWS has a great article](https://aws.amazon.com/devops/what-is-devops/) that outlines DevOps as a work environment where development and operations teams are no longer \"siloed\", but instead work together across the entire application lifecycle -- from development and test to deployment to operations -- and automate processes that historically have been manual and slow.\n\n**Books to Read**\n\n* [The Phoenix Project](https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/1942788290) - one of the original books to delve into DevOps culture, explained through the story of a fictional company on the brink of failure.\n* [The DevOps Handbook](https://www.amazon.com/dp/1942788002) - a practical \"sequel\" to The Phoenix Project.\n* [Google's Site Reliability Engineering](https://landing.google.com/sre/books/) - Google engineers explain how they build, deploy, monitor, and maintain their systems.\n* [The Site Reliability Workbook](https://landing.google.com/sre/workbook/toc/) - The practical companion to the Google's Site Reliability Engineering Book\n* [The Unicorn Project](https://www.amazon.com/Unicorn-Project-Developers-Disruption-Thriving-ebook/dp/B07QT9QR41) - the \"sequel\" to The Phoenix Project.\n* [DevOps for Dummies](https://www.amazon.com/DevOps-Dummies-Computer-Tech-ebook/dp/B07VXMLK3J/) - don't let the name fool you.\n\n**What Should I Learn?**\n\n* [Emily Wood's essay](https://crate.io/a/infrastructure-as-code-part-one/) - why infrastructure as code is so important into today's world.\n* [2019 DevOps Roadmap](https://github.com/kamranahmedse/developer-roadmap#devops-roadmap) - one developer's ideas for which skills are needed in the DevOps world. This roadmap is controversial, as it may be too use-case specific, but serves as a good starting point for what tools are currently in use by companies.\n* [This comment by /u/mdaffin](https://www.reddit.com/r/devops/comments/abcyl2/sorry_having_a_midlife_tech_crisis/eczhsu1/) - just remember, DevOps is a mindset to solving problems. It's less about the specific tools you know or the certificates you have, as it is the way you approach problem solving.\n* [This comment by /u/jpswade](https://gist.github.com/jpswade/4135841363e72ece8086146bd7bb5d91) - what is DevOps and associated terminology.\n* [Roadmap.sh](https://roadmap.sh/devops) - Step by step guide for DevOps or any other Operations Role\n\nRemember: DevOps as a term and as a practice is still in flux, and is more about culture change than it is specific tooling. As such, specific skills and tool-sets are not universal, and recommendations for them should be taken only as suggestions.\n\n**Please keep this on topic (as a reference for those new to devops).**",
        "num_comments": 103,
        "comments": [
            "And to add further, I\u2019ve also got a quick free one hour introductory course on Kubernetes architecture that\u2019s a bit different.  Rather than slide after slide of diagrams, we build a Kubernetes cluster, disable each component one by one and then, attempt to use Kubernetes.  As things fail, we discuss each component and what it does, then re-enable.  Like a reverse kit car.  This is on YouTube here as one long video: https://youtu.be/n4zxKk2an3U\n\nAlternatively it\u2019s free on Udemy also with the videos being split into smaller chunks.",
            "This is bullshit and has nothing to do with beginners  \n\n\nThe only efficient and quick way getting into devOps : a lot of practice and googling from day 1  \n\n\nNone of these endless videos  \n\n\nFrom 1 structure practical task, you can get more expeirnece than whole video course all together.   \n\n\nIt is about hands on skills!!!   \n\n\n* Someone who mentor & interview devops people for number of years  \n\n\nNone of the resources higher, will have any influence  \n\n\nDoing something 10% of this [https://github.com/100daysofdevops/100daysofdevops](https://github.com/100daysofdevops/100daysofdevops)will make you a lot better DevOps than authored list higher  \n\n\nSorry u/mthode , but your list is valuable for people already in DevOps :)",
            "DevOps evolves around 3 key principles:\n\n1. Automation\n2. Monitoring\n3. Integration\n\nThe rules are simple:\n\n# Automation\n\nDon't ever do anything by hand. The only allowable manual action is configuring a provisioning system to do what you need.\n\nInvest in learning Terraform ([https://www.terraform.io/](https://www.terraform.io/)) or Ansible ([https://www.ansible.com/](https://www.ansible.com/)), or any other similar tool for provisioning systems and applications.\n\nDon't be trapped into repeated tasks. If something needs to be done twice, you need to automate it.\n\n# Monitoring\n\nMonitor everything! Every infrastructure component and application, including databases, web servers, proxies, message brokers, and make sure you have alerts for all of them.\n\nDon't create a monitoring system yourself. You will waste your time and energy and you will never get it as complete and holistic as a ready made monitoring solution.\n\nUse tools like Netdata ([https://github.com/netdata/netdata](https://github.com/netdata/netdata)) that have a bottom-up philosophy. Such a tool can automate the entire monitoring process for you and provide you  with fully automated dashboards and hundreds of pre-configured alerts, out of the box, to detect common issues and anomalies.\n\nAlways convert your access logs (web servers, proxies, etc) into metrics and attach alerts to them. Netdata can also help you with that.\n\nShortcut: remember that by monitoring everything at the entry points of your infra (the points where requests come in and responses are sent out), you can get 90% of the visibility you need on the actual customer experience. So, be sure that everything is monitored (workload, errors and latency) at these points. You monitor the rest of the infra, to actually figure out why something is broken.\n\n# Integration\n\nInvest in learning the APIs of your cloud provider and be fluent in managing your infra through them.\n\nMake sure you understand the capabilities of your monitoring solution. You will need them at 3AM.\n\nLearn how to create robust glue code that connects everything together. You are not a developer. Don't think algorithms. You are an integrator. You combine things together to bring the result.",
            "This month I focused on releasing videos that focused on tools for Kubernetes such as Kustomize and Helm. Here are the videos:\n\nKustomize:\n\n[https://youtu.be/spCdNeNCuFU](https://youtu.be/spCdNeNCuFU)\n\n&#x200B;\n\nHelm Playlist (What Helm is, Deploying applications using Helm, Creating Helm Charts):\n\n[https://www.youtube.com/watch?v=w51lDVuRWuk&list=PLnFWJCugpwfzCjufOk52ufg7CDxpLEmXi](https://www.youtube.com/watch?v=w51lDVuRWuk&list=PLnFWJCugpwfzCjufOk52ufg7CDxpLEmXi)",
            "This is a Fakespot Reviews Analysis bot. Fakespot detects fake reviews, fake products and unreliable sellers using AI.\n\nHere is the analysis for the Amazon product reviews:\n\n>**Name**: The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win \n\n>**Company**: by\n\n>**Amazon Product Rating**: 4.7 \n\n>**Fakespot Reviews Grade**: B\n\n>**Adjusted Fakespot Rating**: 4.7\n\n>**Analysis Performed at**: 07-11-2022 \n\n[Link to Fakespot Analysis](https://fakespot.com/product/the-phoenix-project-a-novel-about-it-devops-and-helping-your-business-win-006670d6-15bb-4e22-a315-2712c1133abe) | [Check out the Fakespot Chrome Extension!](https://chrome.google.com/webstore/detail/fakespot-analyze-fake-ama/nakplnnackehceedgkgkokbgbmfghain)\n\n*Fakespot analyzes the reviews authenticity and not the product quality using AI. We look for real reviews that mention product issues such as counterfeits, defects, and bad return policies that fake reviews try to hide from consumers.*\n\n*We give an A-F letter for trustworthiness of reviews. A = very trustworthy reviews, F = highly untrustworthy reviews. We also provide seller ratings to warn you if the seller can be trusted or not.*",
            "I really like the Gene Kim's material, such as the Phoenix Project.  I so enjoyed the entertaining story.\n\nIt is interesting though, careful to navigate misinformation out there.  DevOps is about accelerating delivery of software to the cloud by knocking down silos.  In the past, ops and devs were separated in silos for good reasons.  These rigid patterns, before arrival infrastructure-as-code and virtualization, are no longer tenable in the cloud, because most software is no longer shipped on a CD in a shrink wrapped box, and no longer downloadable from a BBS, usenet, or ftp servers.  \n\n\nThere's the new term for platform engineering, with some promoting that DevOps is dead and this is the new way, but this is re-introduction of silos.  Essentially, a platform is made to delivery to the cloud, but this limits devs to their silo and has a controlled path to the cloud.  Most implementations, platform engineers cannot predict all use cases, and time to delivery is delayed, because platform engineers have to invent a platform.\n\nBoth DevOps and Platform Engineer have the same goal to accelerate delivery, but DevOps works with collaboration.",
            "Hi guys, I started 2 Youtube series to help new people getting into devops.\n\nThe first one: https://youtube.com/playlist?list=PL-WCaWbINSZ6tTkXVYXKvB7oC7-t19rHF revolves around containers and kubernetes in a follow along manner, with materials supplied for each video.\n\nThe second one (path2DevOps) caters to audiences who come from a technical background and want to dabble/transition to a devops-centric role. The format was tested on some friends of mine who actually made the transition from testing to devops. This is also a follow along, as we try to build, understand and deploy 3 \"microservices\" (2 java be and 1 angular fe) while sprinkling in some pipelines, k8s, helm, IaC, cloud infra and more!\nhttps://youtube.com/playlist?list=PL-WCaWbINSZ6xyqY9mNlfvgx3MgKpOuxG\n\nPS the video quality was quite bad at the start as I hadn't invested in the full equipement yet, but keeps getting better. Hope this helps you!",
            "Any mentors out there willing to chat? I'm worried I'm digging myself into a hole working with a custom on-prem cloud solution. Anyone willing to chat, I'd be extremely grateful.",
            "The 2019 DevOps Roadmap link (aka https://roadmap.sh/devops) is no longer useful and should really be removed or majorly updated as it's confusing to newbies.   It's actually linked twice in different ways, first link via GitHub.\n\nI have to warn people off this roadmap when linking to this thread, even though clicking on the general boxes (like CI/CD) and relevant technologies is helpful.\n\nThe roadmap doesn't cover the core of major clouds like AWS, Azure or GCP, which have a lot of relevant technologies in various categories (ECS, CloudWatch Logs, etc).\n\nIt mentions various technologies that are very rarely used in current DevOps:\n\n- Nagios and Monit in monitoring (but no AWS CloudWatch) - see Stack Overflow tag popularity here: http://sotagtrends.com/?tags=prometheus+grafana+datadog+zabbix+nagios+amazon-cloudwatch&relative=true (Monit doesn't have a tag)\n- Docker Swarm and Nomad (but no AWS ECS) in container orchestration - see http://sotagtrends.com/?tags=kubernetes+docker-swarm+nomad+amazon-ecs&relative=true\n\nIt has some very specific topics that are only occasionally useful or far too low level - why are text manipulation or process listing tools given the same prominence as Ubuntu, Terraform or Kubernetes?\n\nThe tech-specific roadmaps such as https://roadmap.sh/kubernetes and https://roadmap.sh/docker are much better, with consistent level of detail.",
            "With the transition from dev to devops in mind, we have created a complete guide to publicly available materials, webinars, books, newsletters and e-learning paths. All you need - in one place:\u00a0[https://gitprotect.io/blog/how-to-transform-from-dev-to-devops-a-complete-guide/](https://gitprotect.io/blog/how-to-transform-from-dev-to-devops-a-complete-guide/)",
            "I\u2019ve got a \u2018Dive Into Cloud Native, Containers, Kubernetes and the KCNA exam\u2019 course that I\u2019m currently creating videos for (on YouTube), I\u2019ve done 6 and next one will be Serverless.  With it being Cloud Native there is a lot of cross over with what you\u2019d expect to see in a DevOps curriculum.  If that sounds like it might help, playlist is here: https://youtube.com/playlist?list=PLeIwMz0ukkhHnQEO37Z5ZQHuSTRU60CQQ",
            "I find this interesting, just a new DevOps here with a background in Linux systems administration this is a helpful one for me especially the roadmap.",
            "These are some of the things we just discussed this week!  \nYou're welcome to listen:\n\nSpotify: https://open.spotify.com/episode/5FPKgaa26YJ50eI5BomcdY  \nApple Podcasts: https://podcasts.apple.com/us/podcast/how-to-get-into-devops/id1656241865?i=1000590593023  \nYouTube: https://youtu.be/Nj575YjUSHQ",
            "Forgive my ignorance, but I'm interested as to why this pinned item is tagged as NSFW?",
            "Why is this nsfw?",
            "Before I learned Kubernetes, I had background in Docker, AWS (such as ASG), Ansible, and Terraform.  Before I was deploying stuff to the cloud, I worked with virtual machines, Puppet (and Chef) on VMWare.  Before this, I had systems engineering type roles that required scripting (shell with posix/gnu tools like sed/grep/awk, and perl, python, ruby) as well as network engineering.  This required knowledge of systems themselves (Linux) and networking (gateways, switches, routers, subnets, vpns, DHCP, DNS, firewalls). I also have some experience with LDAP, Kerberos, RADIUS, TLS, SSH, FTP, NFS, HTTP, IPSec, OpenVPN.\n\nI think for the basics, you are going to need:\n\n* Foundation in Linux System Administration  \n* Foundation in Linux Network Administration: L4/L7, bridge network, ipchains/iptables, etc  \n* Optional: Change Configuration, Deployment such as Ansible, Chef, Puppet, or Salt  \n* Optional: Cloud provisioning with Terraofrm (Google Cloud, Azure, or AWS)  \n* Familiarity with virtual machines and containers  \n* Load Balancer, Reverse Proxy, Gateway, Service Discovery\n* Monolith or Microservice stacks and backend services  \n    * Webstack(s) - Rails, Spring, Django, Sinatra, Flask, ExpreJS (NodeJS)  \n    * SQL Database like Postgres, MySQL/MariaDB  \n    * NoSQL like Memcached, Redis, MongoDB, Cassandra, Dgraph, Neo4j, etc  \n    * RabbitMQ, ElasticSearch, Solr, ZeroMQ, ActiveMQ, etc.\n* Continious Integration: Jenkins, Gitlab, CircleCI, Github Actions, etc.\n* Orchestration/Scheduling with Kubernetes  \n    * Service Mesh with something like Istio  \n    * Observability with Promoetheus  \n    * GitOps and Continious Delivery with FluxCD, ArgoCD, Spinnaker, etc.",
            "My first time in this subreddit, and I'm happy that I have and have read all of the books in that page.\n\nI'd also love to add \"The Kubernetes Bible\" to that list!",
            "Have only had a chance to briefly skim the roadmap but this is exactly what I\u2019ve been looking for in my life.",
            "AWS Cloud Practitioner how to pass the exam tutorial https://www.youtube.com/watch?v=YQy13WfvqPs",
            "Updated Roadmap\n\nhttps://twitter.com/orhanergunccde/status/1349700336609615875",
            "and if you're looking to stay up to date with the latest DevOps tutorials, tools & news, you can subscribe to my weekly DevOps newsletter: [https://www.devopsbulletin.com](https://www.devopsbulletin.com/) :)",
            "For someone who is a student / new grad, and isn't yet working in a professional team environment, how would you recommend they practice and gain DevOp skills while they job hunt?",
            "Would like to add some reading material. Please let me know if you know of some other books that should be added!\n\n* Accelerate: The Science of Lean Software and DevOps",
            "you MUST listen to the Phoenix project audio book!",
            "I'm assuming every link posted is a pornhub link to some sexy server stacks with amazing cable management, or some simply stunning CI/CD pipe...\n\nOtherwise I really have to ask why NSFW?",
            "Nice write-up.  Why `nsfw` flag?",
            "Very interesting  - As an investor we look at devops not as a role but as a practice that when done well (in any sized organization) can do three things:\n\n1. Lower headcount (aka. expense curtailing)\n2. Increase revenue (Scale without increasing tech debt/hardware)\n3. 1+2 = return to profitability.\n\nAdmitedly - we do see a lack of training and accountability to own the above when our founders interview candidates.  Even our devops summer labs can only provide so much hands on experience.\n\nWe have also done experiments in our summer labs over the last couple of years - and have two case study groups.\n\n* Group #1 - has to use (YOM) - Your Own Money (Reimbursed)\n* Group #2   has a budget with (OPM) - Others People Money\n\nIn all scenarios, maybe unsurprisingly - group #1 consistently outperforms group #2 and provides better automations, does more small scale testing before committing to a path and seems to be better aligned with a company financials goals.\n\nNot foolproof but is definately develops a pattern.",
            "Thanks for sharing this.",
            "Thanks I actually plan to read some of these books.",
            "I need help in putting my resume together.",
            "My keys wallets is : 0x461F7F0272235C60DaBcEFD95094CB469C6204e8 ! I need this NFT !",
            "I am in the DevOps for almost 3 and half years now. Can someone please confirm reading this books will help in any way compared to watching a video, reading a blog/article, doing something practically, or even googling? This is a legit question.  I thought of buying these books but before that do you really recommend this (reading the books) over the things I mentioned earlier?",
            "There are also some good twitter account to follow: https://twitter.com/i/lists/1085367722370686976",
            "Necro comment but, thank you for this!",
            "Tnx, subscribed!",
            "Do you think a year of doing personal projects incorporating elements of 100daysofdevops is enough to break into devops for someone with over 10 years of broad python development and fully automated systems admin experience ? ( but mostly non-cloud) \n\n\"Junior Devops\" roles don't seem to exist, and I have zero experience with devops specific tools like jenkins and kubernetes.  I'm worried that even if I spend the next year working towards devops I  still won't be able to get hired into devops roles since I won't have enough \"real world\" experience.  Even 1 year of real experience doesn't seem like enough for the postings I see.",
            "100 days of devops seems really heavy on the AWS infra...",
            "I guess the biggest issue is how to get a devops job. I'm a data engineer and touched Terraform/Docker/K8s lightly as user but I still found it impossible to get a Devops job.",
            "Can I dm you?",
            "I do not fully agree on the monitoring part. Yes of course you can monitor everything but when you decide to monitor every component in very detailed way, you will quickly get overwhelmed by a bunch of nonsense metrics that do not matter for you.  \n\n\nMy aproach will be something like this:  \nTurn on the logging and monitoring on everything but every week/month take a time to decide which metrics and logs are important for your infrastructure/application and which are not.   \nThen slowly but surely cut down these extra irrelevant metrics.",
            "I'm going to watch your helm playlist, I just started researching a cloud system for my job in order to transfer knowledge to our devops teams to migrate our services from on-prem to cloud, and I've had trouble understanding where the helm charts come into play.",
            "Looks great. Thank you for sharing :)",
            "Good Bot",
            "Could you elaborate a bit more why platform engineer is reintroducing the silos?",
            "subbed (Y)",
            "I'm not a mentor by any standards but I hear you, I have the same situation right now due to working with a very unique on-prem env. \n\nMy two cents: \n\nSpecific technologies come and go, if you have your flow set up in a similar way to a \"real\" cloud then you can move that experience anywhere you go. Good practices, CI/CD, canary deployments, red/blue, disaster recovery, etc. You should be able to implement decent workflow in almost any env.\n\nOf course if you change jobs you won't be proficient with AWS/GCP/Azure right of the bat but for that you could get a certification in the meantime (only if it's so important to you).",
            "Thank you for the feedback, I am the maintainer of this roadmap. We try and keep all the roadmaps up to date. There is a revision coming up for the roadmap and, looking at the changelog, we do have what you mentioned and more logged under improvements.\n\nAlso, there is a \"Suggest Changes\" button which you can use to suggest any improvements in GitHub issues.",
            "Subbed :)",
            "[https://twitter.com/orhanergunccde/status/1349700336609615875](https://twitter.com/orhanergunccde/status/1349700336609615875)\n\ntry this one too",
            "I am assuming you put optional for the cloud provisioning & changing configuration because you are mentioning the basics?",
            "Seriously? GPT",
            "I\u2019m a book reader, so I\u2019ve read most of them.  To me it helps me think - forcibly by the act of reading - about the topic for long periods of time.   \n\nWhile blog post and doing it are also great. I find that tutorials work well if done right.  YouTube videos work well, if done right.  IMO reading is for background and concepts. being hands on keyboard is where you learn how to do. \n\nWhatever works for you is what you should do. Continuous improvement - this is the way.",
            "Imo necroposting isn't something one should worry about. It was a thing in regular forums but Reddit isn't one.",
            "There are Junior DevOps positions. But, it just means you gonna work in a company as DevOps engineer where you are first devops, there is no devops culture at all or they don't even care (as far things get done)   \n\n\nMost of candidates nowadays are Juniors or even worse. Though still getting hired.   \n\n\nHalf a year intensive training would get you into DevOps position.",
            "AWS is all that exists, we're now all one with Amazon",
            "People want you to get job done  \nSo, you have to learn to showcase that  \n\n\nGet LinuxAcademy or something and to a lot of hands-on, until you learn enough",
            "sure",
            "Yes, a lot of people do this, especially when they want to minimize the cost of monitoring or improve its scalability.\n\nHowever, how can you tell if metric X is useful if you have never faced an issue that may need it to help you understand the issue? What if a metric is irrelevant under normal conditions, but when its volume over time is big, it is a clear indication that something is wrong? \n\nIn practice the methodology you suggest tends to ignore useful insights you may need to troubleshoot an issue that you have never faced before, or to spot an issue that is totally abnormal.\n\nThe \"overwhelming\" part comes when you have to deal with all the metrics yourself. If for example you use Prometheus and Grafana, of course it is an overkill to go and create dashboards for everything. You will never finish.\n\nBut when you use tools like Netdata that automatically create dashboards for you and they provide tools to find what is relevant and what is not (based on both statistical patterns, but also based on anomaly detection), having access to all the metrics improves visibility and your understanding of the situation.\n\nI can give you numerous examples that having total visibility of every single metric is far superior to having selective visibility. When you have selective visibility you live in a bubble. You think you monitor your infra. In reality, a lot are happening or could happen, including things that should never happen, but you don't know...",
            "I am happy to share. I have used helm for two years to deploy my own services in k8s.",
            "I'm not sure if it is all platform engineering, or just implementations I have seen.  The ones I have come across is where Ops tries to create a platform, such as GitLabs for deployments, where engineers can participate through this.  The Ops would approve or disapprove the merge, and devs could deploy through that.  For new technologies, ops have to build it (gitlab templates, terraform, helm charts, etc), and then devs can use it through submitting PRs to new implementations of the platform ops designed.\n\nThe problem is that, the CI/CD scrapyard that ops created becomes the platform and a gate that devs have to use.  The ops  become a service center, and devs are blocked until ops implements a controlled mechanism (platform).  There's a lot of misalignment, ops seldom understand fully the needs of devs.  It quickly becomes silo'd.\n\nIn DevOps with Ops and Devs pairing together, or a an Ops integrated into the Dev team, the ops can infer what is needed by participating in their meetings, seeing their needs, not being removed from dev teams (like the silo'd service center creating these platforms).  Often times, the devs themselves do not fully know their operational needs, or fully the technologies they need to use.  Ops have to work closely to help co-develop the backend systems and elicit the needs together, and rapidly.  The silo'd back and forth (serial communication) with different teams doesn't work very well.",
            "Do you have a link to the changelog for the DevOps roadmap?",
            "Good point.",
            "How do I get an internship in DevOps?",
            "Internship = 10 to 20 or 30 years living on the internet and surviving hacker assaults while learning to code in various languages and deploy to your various home systems and linode instances or AWS or Microsoft or other server farm companies. See Homelab, Selfhosting, etc on Reddit. Self-taught, in other words.",
            "Thanks. I'm teaching myself Linux system programming and this is teaching me a lot of the concepts I don't know because I only use it sparsely.",
            "Can I also dm you vvrider ?",
            "Can you please help me understand the role of helm charts in the process of managing code and configuration of a webapps?",
            "Well I think, re-introducing silo from platform team, could be similar to the \"DevOps team\" pattern where DevOps team may take responsibility to build CI / CD pipeline and infrastructure automation for example. So platform team might not be the right symptom. \n\nWith \"Devs and Ops pairing together\" is a solid start for discovery or startup stage, but it may not work very well for already established services or ongoing applications. At the organizational wise, the needs for specialization is inevitable in terms of growing. Developers could not 'bear' the pressure from delivery objectives, and keeping up with modern cloud practices at the same times for example. \n\nI think people underestimate the importance of team structuring, responsibility and communication, and put too much focus on automation and tooling, so that Devs and Ops team are a little confused on what they should do or not.\n\nThe platform team should instead carry out the mission of providing X-as-a-service, which respect the autonomy from the development team - or stream aligned team (reference to: Team topology approach). But development team should also have the capacity of Ops, so they can have a capacity of \"you build it, you run it\". \n\nAnyway, thanks a lot for the reply, really appreciate you putting the time to answer my question.",
            "Great convo. One of the principals I learned w Devops is that more participation is better, so this is why DSL type languages are preferred.  If anyone can read it and understand what it does, then more can participate.  This leads to higher collaboration.\n\nOne mistake I have seen is when Ops team tries to impose a technology on engineering, a platform approach, which is doomed to fail as doesn\u2019t have buy-in/support.  Needs of developers are not realized, especially as different tech has unique use cases, rarely does one tech fit all solutions.  This particular team imposed Puppet, and that didn\u2019t go well, so they tried to impose Kubernetes when that became the next big thing.  The team never learned.  Since their leadership never \u201cgot it\u201d I decided not to join such an org.\n\nOne successful platforming, was actually w puppet and gitops patterns before that was a term.  The company had no success in reusing their technology for different customers, as it was bespoke solution per customer with a similar core.  They couldn\u2019t capture the config needed to get the software to work, as devs didn\u2019t document, became a bottleneck and later left after burn out, and tribal knowledge was then lost. \n\nThe devops patterns to fix this were to destroy dev shared test servers each week, and thus all configs and everything lost.  Devs either had to code puppet manifests to capture their config, or submit a request (there was a form) to get devops resource to pair and write the manifest for the dev.  There was also a code promotion pipeline where artifacts and change config code is promoted from dev, to test, to ci, to preprod stage, and then to prod.  This was very much like Spinnaker and gitops before these were a thing.\n\nThere are definitely a lot of antipatterns, especially w gitops, where CI platforms say they can do CD too, and mix/match CI and CD pipelines into a mess. Both Cloudbees and Gitlab promote thes antipatterns.  \n\nIn job searches, I look for these antipatterns, and if the company builds unusable platforms, I would definitely avoid them if I have a choice.  Also if there is barrier between dev and ops, I would avoid that too.  You want to be able to build the platform from code as well as deploy it.  This helps avoid environment divergence.  Another thing I look for is disposability of the platform, phoenix server pattern.  With containerization these days, this isn\u2019t a problem for the deployable images, but it can still be an issue w cloud provisioning.  This is also why it is important to build everything from scratch and quickly destroy it in a variety of environments, e.g. dev, test, stage, prod."
        ]
    },
    "How should this sub respond to reddit's api changes, part 2": {
        "title": "How should this sub respond to reddit's api changes, part 2",
        "score": 41,
        "url": "https://www.reddit.com/r/devops/comments/14n6ghq/how_should_this_sub_respond_to_reddits_api/",
        "content": "We stand with the disabled users of reddit and in our community. Starting July 1, Reddit's API policy blind/visually impaired communities will be more dependent on sighted people for moderation. When Reddit says they are whitelisting accessibility apps for the disabled, they are not telling the full story.\nTL;DR\n\n    Starting July 1, Reddit's API policy will force blind/visually impaired communities to further depend on sighted people for moderation\n\n    When reddit says they are whitelisting accessibility apps, they are not telling the full story, because Apollo, RIF, Boost, Sync, etc. are the apps r/Blind users have overwhelmingly listed as their apps of choice with better accessibility, and Reddit is not whitelisting them. Reddit has done a good job hiding this fact, by inventing the expression \"accessibility apps.\"\n\n    Forcing disabled people, especially profoundly disabled people, to stop using the app they depend on and have become accustomed to is cruel; for the most profoundly disabled people, June 30 may be the last day they will be able to access reddit communities that are important to them.\n\nIf you've been living under a rock for the past few weeks:\n\nReddit abruptly announced that they would be charging astronomically overpriced API fees to 3rd party apps, cutting off mod tools for NSFW subreddits (not just porn subreddits, but subreddits that deal with frank discussions about NSFW topics).\n\nAnd worse, blind redditors & blind mods [including mods of r/Blind and similar communities] will no longer have access to resources that are desperately needed in the disabled community.\nWhy does our community care about blind users?\n\nAs a mod from r/foodforthought testifies:\n\n    I was raised by a 30-year special educator, I have a deaf mother-in-law, sister with MS, and a brother who was born disabled. None vision-impaired, but a range of other disabilities which makes it clear that corporations are all too happy to cut deals (and corners) with the cheapest/most profitable option, slap a \"handicap accessible\" label on it, and ignore the fact that their so-called \"accessible\" solution puts the onus on disabled individuals to struggle through poorly designed layouts, misleading marketing, and baffling management choices. To say it's exhausting and humiliating to struggle through a world that able-bodied people take for granted is putting it lightly.\n\nReddit apparently forgot that blind people exist, and forgot that Reddit's official app (which has had over 9 YEARS of development) and yet, when it comes to accessibility for vision-impaired users, Reddit\u2019s own platforms are inconsistent and unreliable. ranging from poor but tolerable for the average user and mods doing basic maintenance tasks (Android) to almost unusable in general (iOS).\nDidn't reddit whitelist some \"accessibility apps?\"\n\nThe CEO of Reddit announced that they would be allowing some \"accessible\" apps free API usage: RedReader, Dystopia, and Luna.\n\nThere's just one glaring problem: RedReader, Dystopia, and Luna* apps have very basic functionality for vision-impaired users (text-to-voice, magnification, posting, and commenting) but none of them have full moderator functionality, which effectively means that subreddits built for vision-impaired users can't be managed entirely by vision-impaired moderators.\n\n(If that doesn't sound so bad to you, imagine if your favorite hobby subreddit had a mod team that never engaged with that hobby, did not know the terminology for that hobby, and could not participate in that hobby -- because if they participated in that hobby, they could no longer be a moderator.)\n\nThen Reddit tried to smooth things over with the moderators of r/blind. The results were... Messy and unsatisfying, to say the least.\n\nhttps://www.reddit.com/r/Blind/comments/14ds81l/rblinds_meetings_with_reddit_and_the_current/\n\n*Special shoutout to Luna, which appears to be hustling to incorporate features that will make modding easier but will likely not have those features up and running by the July 1st deadline, when the very disability-friendly Apollo app, RIF, etc. will cease operations. We see what Luna is doing and we appreciate you, but a multimillion dollar company should not have have dumped all of their accessibility problems on what appears to be a one-man mobile app developer. RedReader and Dystopia have not made any apparent efforts to engage with the r/Blind community.\n\nThank you for your time & your patience.\n\n[View Poll](https://www.reddit.com/poll/14n6ghq)",
        "num_comments": 26,
        "comments": [
            "Step down. You guys have handeled this horribly.",
            "The protests haven't worked and Reddit is not reverting the change.\n\nIt's a protest out of spite at this point which is pointless.",
            "Honestly now im really annoyed of this sub being NSFW.  DevOps is such a small community that it really had no effect on Reddit now that most big subs arent protesting.",
            "I  don't use third party aps and think reddit is free to do with its API what it wants. do nothing or step down in protest.",
            "Reddit has been very clear that commercial apps like Apollo, RIF, etc will not be whitelisted on accessibility grounds. Seems like you\u2019re the one not telling the whole story \n\n> \u201cWe\u2019ve connected with select developers of non-commercial apps that address accessibility needs and offered them exemptions from our large-scale pricing terms,\u201d Reddit spokesperson Tim Rathschmidt says in a statement to The Verge.\n\nReported by The Verge on June 7th",
            "If you don't wanna adhere to the rules of Reddit just leave the mod role and hand it to someone new. No need to suffer the whole community for it.",
            "Please don't close the sub.",
            "Sad how many people here basically don't give a shit about anything other than their lil dopamine hit. I shouldn't be shocked the guys that usually don't give a fuck about anything as long as there's cash in it wouldn't care about accessibility to a platform. Sure Reddit has the legal right to do whatever it wants, literally no one is arguing that. Something can be legal and still immoral.\n\nIf you idiots are all that's left, I'm fine not participating in this sub again.",
            "Long term actions are important when you're doing something in protest. I really like the idea of once a week closures, which for Reddit means a permanent loss of revenue until they satisfy concerns.",
            "As DevOps engineers we should have the API-first mentality. By basically ruining the API, there should at least be some kind of signal.",
            "so.. did it work?",
            "It's slacktivism. It's annoying, it does nothing, and Reddit has final say over the subs anyways because it's their platform. Not only that, but it really isn't in our particular interest to start fighting with companies that pay our bills during a tech recession and layoffs. Reddit is obviously trying to become profitable, they're laying people off, and cost cutting. \n\nAlmost every single one of us knows, or should know, it's a bad idea to build your business on top of another companies services that can't be substituted. Apollo bit into Reddit ad revenue, it cost Reddit money for each request, and truthfully from a business perspective it's odd it went on as long as it did with a non profitable company. \n\nWith interest rate hikes the end of free VC money for a hope and a dream of profitability is over. Investors won't be willing to flip the bill anymore. And you know who needs to eat? Us. We need jobs and we should all want to be working for tech companies that put an emphasis on our work instead side quests that usually lead to layoffs via email. \n\nIf Reddit sucks, maybe someone will come along and make a competitor, and that's good for us still. But until then, can we stop with these perfunctory gestures that none of us will give a shit about 4 months down the road? People find value in this sub for now, and it's tiring have to follow some weird slacktivist crusade in tech subs while reddit essentially just becomes more about lame politics.",
            "Just because capitulation isn't immediate, doesn't mean _it isn't working_. I guess someone hasn't sufficiently studied history to see that plenty of things worth changing and protesting about take time.",
            "I did use 3rd party apps and I think reddit is free to do with its API what it wants. I can't list a single other webapp I use that has ever allowed 3rd party apps, yet people act like it's a right of theirs with regards to reddit.",
            "Mods would rather make a point by throwing the community under the bus, before they even consider stepping down. They are still here even though they are hating it. And for what? Some imaginary powers that are of no benefit.",
            "who says your opinion represents the community?",
            "\u201cThe shutdowns will continue until morale improves\u201d",
            "You don't need a public API to reduce unit sizes",
            "\\#care",
            "Twitter? Its mobile client for iDevices was originally a 3rd party app: [https://en.wikipedia.org/wiki/Tweetie](https://en.wikipedia.org/wiki/Tweetie)",
            "I also don't know many webapps that use community driven moderation at this scale.",
            "I am a part of this community. I suffered. I don't care about others.",
            "Sure you don't...",
            "True. 4chan I suppose. It's amazing they've made it this far with community mods, but I guess it shows in how poorly moderated most subreddits are"
        ]
    },
    "Is Pulumi worth it?": {
        "title": "Is Pulumi worth it?",
        "score": 11,
        "url": "https://www.reddit.com/r/devops/comments/1dltcoy/is_pulumi_worth_it/",
        "content": "Had someone build something big with it already? How do you compare your expirience compare to TF? Are there any showcases or public repos to look at?",
        "num_comments": 28,
        "comments": [
            "One thing to note is that the current AWS provider for Pulumi (Classic Provider) uses Terraforms AWS provider. For example, check the \"package details\" for a resource like: https://www.pulumi.com/registry/packages/aws/api-docs/acm/certificate/\n\nPulumi do however have their own \"Native Provider\" but it has been in preview for awhile now and I personally haven't used that myself.\n\nI have used both Terraform and Pulumi and I can say the documentation and examples provided in Terraform is way better than Pulumi.\n\nHere's one I needed an example for recently and Pulumi just has \"coming soon\" under the example section.. and I've seen this a few things already..\n\nhttps://www.pulumi.com/registry/packages/aws/api-docs/wafv2/webacl/#example\n\nWhat I often end up doing is look through the terraform docs, reference the example there to know what pieces I need to make things work in Pulumi. However, it's with noting that this would only work with the classic provider and I don't think it'll work for the native one as they are different..\n\nI don't mind either but I do like the simplicity of Terraform as things just work and has plenty of information and examples online... but with Pulumi, whenever you do a google search for help, you'll most likely end up on their Pulumi AI page where you can ask it questions, it works somewhat ok, but has given me bad code a few times.",
            "It\u2019s a solution in search of a problem in my opinion. My use case might be limited but I never found a compelling reason to use it over HCL.",
            "If you have a software engineering background, you will probably prefer Pulumi over Terraform. I was on dozens of projects with Terraform and to this day I never saw a single configuration without duplicating Terraform code (especially when having to manage multiple environments, I never saw a single solution which I considered \"lean\"). Pulumi can solve this issue (or you can continue using Terraform and add some tooling on top such as Terragrunt, since other people already tried to solve the same issues Terraform has).\n\nI would still advice to go with Terraform most of the time, unless the people in charge have strong software engineering backgrounds and knowledge about software design patterns. Seeing what OpenTofu has in mind for the upcoming releases, we may finally see what Terraform should have been since its creation.",
            "The only reason I'm am currently using Terraform is because one AI makes HCL useable, I can use AI to get example code for what I'm trying to do. The ability to debug and walk through and your code in pulumi, is way underrated in my opinion. There are still certain cases where nested loops and conditions can not be performed in HCL. I still prefer Pulumi. In my opinion HCL is a solution in search of a problem. Should have used a first class programming language from the beginning, like Terraform CDK does.",
            "You'll never get a proper answer. You need to try them both out so you can see the pros and cons of each for your particular use case.\n\n\nThere are two different commenters in this thread that each option is a \"solution looking for a problem\".\n\n\nPulumi:\n\n\n\n>\u00a0It\u2019s a solution in search of a problem in my opinion. My use case might be limited but I never found a compelling reason to use it over HCL.\n\n\nTerraform:\n\n\n> I still prefer Pulumi. In my opinion HCL is a solution in search of a problem. Should have used a first class programming language from the beginning, like Terraform CDK does.",
            "I don't get the issues people have with HCL. I've never encountered a problem I couldn't solve with it.",
            "TLDR: no palumi is ass\n\nLong answer: it's a wrapper of TF which is a wrapped for cloud sdks.\n\nToo many abstracted out layers, community isn't there and it's annoying to use. Things could break at the sdk level, the TF level or the palumi level, most often it's the palumi level.\n\nAlso just in general, avoid anything where you put your env state in someone else's \"cloud\" setup. IDC how secure they might think it is, it's not.",
            "You can dynamically get examples by using the pulumi AI tool. [https://www.pulumi.com/ai](https://www.pulumi.com/ai)\n\nStatic examples are kind of old school.",
            "Five years ago, HCL was very limited and Pulummi probably made a lot of sense. Modern HCL is still quite awkward, but it does almost all things I need it to.",
            "I feel HCL is a solution in search of a problem. Why invent a new programming language ? It was never needed, could have used one of the widely used programming languages.",
            "Can you give a bit of background for your case?",
            "Why are you duplicating terraform code, use a module",
            "Terraform has modules, dynamic blocks, loops, variables, and conditional expressions. I've yet to find something I couldn't DRY up but maybe that's because I have a software engineering background beyond basic scripting",
            "I\u2019ve got a software engineering background and I actually get turned off by the thought of having infrastructure as actual program code where I can introduce bugs instead of having it in a descriptive language. Then again, I never actually worked with Pulumi and it\u2019s probably not that black and white.",
            "This. Pulumi is for Developers that are forced to do DevOps and are too snooty to learn Terraform (or Bicep). Works great when the Dev team is responsible for DevOps. Completely breaks down if you want \u2018professional\u2019 DevOps people to maintain it, who don\u2019t usually have the predisposition to work outside of DSLs like Terraform.",
            "Let's say I want TF to be on less dominant position. I want to create hosts in accordance with ansible inventory. Which is just a yaml file (or json output of ansible-inventory).\n\nI can't, because TF is dictating me that things should be very specific way. So, I kinda look around, searching for a good tool (the thing which does the job, not dictate policies).",
            "Correction, it was a wrapper of TF. Now Pulumi has native providers.",
            ">Static examples are kind of old school.\n\nAnd reading anything is so not fetch. I don't understand why we have libraries anymore tbh",
            "No two companies use hcl the same. Modern hcl just gives you more options to do things differently and hack around its limitations differently with no uniform approaches.",
            "HCL is not a programming language though. It's more of a language to define constraints. Terraform reads the code, creates a graph out of it and does a lot of API requests to find out whether or not this graph, the stored state and reality match. And if they don't match, how to adjust it.\n\nThat's why there is no explicit loop for example.",
            "json is supported",
            "I think this take is correct - these \"as Python\" languages are generally bait and a good marketing story but just create more leaky abstractions and places for complexity where you really don't want to deal with it",
            "This times infinity.\u00a0",
            "I would say, that it's very dependent if there is a good unit testing available or not. I hate when I need to do integration testing to find simplest typos.\n\n(And this is my next question to Pulumi, how to test the code).",
            "My fault\n\nIts still ass",
            "It's a very simply language so I don't know what you mean by \"No two companies use hcl the same\". I'm referring to a lot of the language features that have been added since Pulumi was made. You couldn't use to do for loops in modules for instance. HCL was very limited for a long time",
            "Every ass is entitled to an opinion I guess."
        ]
    },
    "What does a devops project look like?": {
        "title": "What does a devops project look like?",
        "score": 25,
        "url": "https://www.reddit.com/r/devops/comments/1dld29z/what_does_a_devops_project_look_like/",
        "content": "I'm a pipeline/infrastructure engineer who has been in the VFX industry for almost 20 years.  But I'm trying to transition into the devops field to expand my job opportunities.  I'd like to put together a project that will allow me to learn the skills needed for devops.  I was hoping for some advice on what to do for a project.\n\nMy initial thought was to create a simple weather app and distribute that onto a cloud infrastructure.  Any advice would be welcome. ",
        "num_comments": 25,
        "comments": [
            "Your idea sounds like a perfect devops portfolio project. Make sure you put the app in a github repo with a readme, instructions to develop locally, and automation to build the cloud infrastructure and deploy code to it (CI/CD pipeline).\n\nThere's a lot of other stuff you can add on top of that but this is a good starting point.",
            "There's lots of ways to skin it, I would take a look at a few job posts, see what they're asking for and see what you can do to learn that.\n\nwhen I was looking to jump from sys admin to devops I decided a good way for me to prep was to upgrade my homelab. Writing my own apps is still on the list but not gotten around to it yet, I figured that as I primarily would not be a developer I saw that as something to come later.\n\nWhat worked for me may not work or be helpful to you but what I did was ripped down my servers, set up truenas then set up a host server using Ubuntu and set up truenas as my iscsi storage. Then I set up a single node k8s cluster and started writing helm charts to configure it in the way i wanted and deploy common containerised apps like prometheus, grafana, unifi controller, home assistant etc etc etc. From that point I built out the services, set up traefik and cert manager, moved services over to be exposed through that over https. Set up gitlab to get my repos into source control. Argo CD and key cloak are next on the list to do. I purposefully chose to do things in harder ways to make sure I got deeper understanding of how everything hung together. \n\nI will admit though, that approach leaves out cloud infra and stuff like terraform but that wasn't my focus for this project.",
            "Check out Cloud Resume Challenge for a project idea.",
            "Have you seen the AI Weather Panels that use LoRA Wireless Ethernet?  Just saying.",
            "Eldrich screaming.",
            "Pain. It looks like pain.",
            "Deploy it two ways:\n\n- into vm on cloud leveraging vagrant and ansible\n\n- another into vm on cloud leveraging containers\n\nThen expose both to public internet with an own domain managed outside of the cloud and subdomain managed in the cloud\n\nThen try to add persistance layer to the app and deploy it using two ways:\n\n- managed service\n\n- self managed on vm\n\nConsider industry standards for security and IaC repeatability.\n\n\nThis should teach you ALOT about \u201eHow to\u201d but not alot about \u201ewhen to\u201d",
            "OK so funny thing is that I've had my own home Truenas server for years now (actually I used it when it was still called Freenas).  I don't really use all the tech you mentioned though.  I have a different set of apps I use in jails....mainly Plex and other apps that support that echo system.\n\nI feel what I'm missing is Docker/Kubernetes experience plus some cloud experience like more in-depth work with Terraform, and I have only used CI/CD for one small python app that I wrote that is published on PyPi.\n\n>Then I set up a single node k8s cluster and started writing helm charts to configure it in the way i wanted and deploy common containerised apps like prometheus, grafana, unifi controller, home assistant etc etc etc. From that point I built out the services, set up traefik and cert manager, moved services over to be exposed through that over https. Set up gitlab to get my repos into source control. Argo CD and key cloak are next on the list to do. I purposefully chose to do things in harder ways to make sure I got deeper understanding of how everything hung together.\n\nCould you elaborate more on what you are doing with this?  It's tech I've heard of but have never had any reason to use it.  Like I have grafana in a jail on my Core setup.  But I never really used it because I didn't see much need for it on my home setup.",
            "Cool thanks for the tip!",
            "No I haven't.  Is this something that would help me build devops skills?",
            "I agree on deploying the app in different ways, but I would start with doing so with some serverless cloud offer like AWS lambda and or something which is able to run containers like Google Cloud Run. This would greatlz reduce costs.\n\nIt's not the typical way though, as DevOps often have to deal with legacy VMs and databases. But I think it will give OP some practice and might be cheaper.",
            "I'll be honest, some of what you wrote didn't make sense to me.  Like what's a persistence layer?  It makes me wonder if I need a more rudimentary education first before I start trying to build things I don't understand.",
            "People still use vagrant?",
            "ArgoCD is basically one of the proper ways to deploy apps into Kubernetes, with a GitOps approach.",
            "If you did it yourself.  I could see it being beneficial.  Like understanding a Skill.  \n\nGood a luck with your journey.  What all do you know about Developer Operations as a Skill Set or Career Field?",
            "Yeah cost is for sure a concern considering that I'm currently out of work and have been for going on 8 months now.  I was thinking that maybe I was just a few skills away from being able to land a devops job.  But /u/pojzon_poe makes me wonder if I have more work to do than I realized.",
            "20$/m is not much to learn as you go. Ppl spend more on a breakfast.\n\nIdeally you should be able to learn it free, but world is not ideal.",
            "You know any better tool to spin up VMs per spec ? For test environments ?",
            "Is that something you would suggest using in a demo project?",
            ">Good a luck with your journey. What all do you know about Developer Operations as a Skill Set or Career Field?\n\nThanks.  I would say that I have some experience in the skill set but not enough to get past any interviews so far.  I actually did have a job at Wish.com as a cloud automation engineer for about 7 months before they started their massive layoffs.  So I have some experience working with AWS and Terraform.  I've played around with CI/CD setups in my personal work.  But I don't have any experience managing more complex setups.  The same goes with deployment technology.  I've used Docker and I'm very comfortable with the idea of VMs and containers.  But I have never managed more complex systems in a job environment.\n\nTo sum up, I feel I have plenty of technical expertise given my experience developing tools for VFX pipelines.  I just don't have solid experience with the tech involved in devops.  I'm trying to figure out how to refine what I do know into something that I could confidently take into an interview.  I have been getting interviews, I just haven't been able to seal the deal.",
            "Terraform.",
            "It depends what is your scope. If you want to demo an app and destroy everything after, you obviously don\u2019t need ArgoCD. But if your goal is learn and execute proper deployments of Kubernetes apps, then yes, ArgoCD is a good approach. I recently open-sourced my homelab cluster deployment, feel free to look at it. https://github.com/axivo/k3s-cluster",
            "Try asking r/homelab or r/homelabs what sort of learning projects they have situated around devops - do it as an ongoing career study project, make it into a hobby.  You may end up leading a new field or something - anyways, good luck to you and your search.  \n\nIt's really not defined very well.  So answering what is devops, isn't going to help much.  But, that's my perspective - how does your perspective answer what is devops, and how might your experience may light of devops in such a way to help you see a path forward in devops?",
            "Thanks I think that's a good idea.  I've always had an eye on homelabs but I never really went deep into building one.",
            "Your welcome! I learned a lot just studying"
        ]
    },
    "How to create and update ansible inventory automatically from terraform via GitHub actions?": {
        "title": "How to create and update ansible inventory automatically from terraform via GitHub actions?",
        "score": 1,
        "url": "https://www.reddit.com/r/devops/comments/1dlu5f3/how_to_create_and_update_ansible_inventory/",
        "content": "I run the terraform to create the AWS infra and store the tfstate in tf cloud via GitHub actions workflow.I need to list automatically all my AWS ec2 instances public IP addresses as an inventory file to run ansible.I don't sure I articulate it well,if any confusion,let me know",
        "num_comments": 2,
        "comments": [
            "Just use an AWS dynamic inventory script, it'll be a lot more reliable and accurate.",
            "If you CI|CD with yourbTF deployment, you can use pre/post scripts/actions to update a CMDB to keep these meta data reconciled."
        ]
    }
}
{
    "New? READ ME FIRST!": {
        "title": "New? READ ME FIRST!",
        "score": 827,
        "url": "https://www.reddit.com/r/learnprogramming/comments/61oly8/new_read_me_first/",
        "content": "# Welcome to /r/learnprogramming!\n\n## Quick start:\n\n1. New to programming? Not sure how to start learning? See [FAQ - Getting started][faq-start].\n2. Have a question? Our [FAQ][faq] covers many common questions; check that first. Also try searching old posts, either [via google][google] or via reddit's search.\n3. Your question isn't answered in the FAQ? Please read the following:\n\n## Getting debugging help\n\nIf your question is about code, make sure it's **specific** and **provides all information up-front**. Here's a checklist of what to include:\n\n1. A [**concise but descriptive title**][debugging-title].\n2. A [**good description**][debugging-description] of the problem.\n4.  A [**minimal**, **easily runnable**][debugging-posting], and [**well-formatted**][debugging-formatting] program that demonstrates your problem.\n5. The output you expected and what you got instead. If you got an error, include the **full** error message.\n\nDo your best to solve your problem before posting. The quality of the answers will be proportional to the amount of effort you put into your post. Note that title-only posts are automatically removed.\n\nAlso see [our full posting guidelines][debugging] and the [subreddit rules][rules]. After you post a question, **DO NOT** delete it!\n\n## Asking conceptual questions\n\nAsking conceptual questions is ok, but please check [our FAQ][faq] and search older posts first.\n\nIf you plan on asking a question similar to one in the FAQ, explain what exactly the FAQ didn't address and clarify what you're looking for instead. See our full guidelines on [asking conceptual questions][conceptual] for more details.\n\n## Subreddit rules\n\nPlease read [our rules][rules] and [other policies][policies] before posting. If you see somebody breaking a rule, report it! Reports and PMs to the mod team are the quickest ways to bring issues to our attention.\n\n\n  [faq-start]: https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_getting_started\n  [faq]: https://www.reddit.com/r/learnprogramming/wiki/faq\n  [google]: https://www.google.com/#q=site:reddit.com%2Fr%2Flearnprogramming\n  [wiki]: https://www.reddit.com/r/learnprogramming/wiki/index\n  [debugging]: https://www.reddit.com/r/learnprogramming/wiki/index#wiki_getting_debugging_help\n  [debugging-title]: https://www.reddit.com/r/learnprogramming/wiki/index#wiki_writing_a_good_title\n  [debugging-description]: https://www.reddit.com/r/learnprogramming/wiki/index#wiki_writing_a_good_description_of_the_problem\n  [debugging-posting]: https://www.reddit.com/r/learnprogramming/wiki/index#wiki_posting_code\n  [debugging-formatting]: https://www.reddit.com/r/learnprogramming/wiki/index#wiki_formatting_code\n  [conceptual]: https://www.reddit.com/r/learnprogramming/wiki/index#wiki_asking_conceptual_questions\n  [rules]: https://www.reddit.com/r/learnprogramming/about/rules\n  [policies]: https://www.reddit.com/r/learnprogramming/wiki/index#wiki_rules",
        "num_comments": 9,
        "comments": [
            "[deleted]",
            "How about if there's input or output, give an example of what you think should be happening VS what is happening.\n\nI suppose that can be part of the error message if applicable. ",
            "[deleted]",
            "I think the main reason I haven't been trying to learn to code is because it seems daunting. How do I get past this?",
            "Can I make good money self educated? ",
            "Shouldn't that always be included?",
            "Good idea; edited.",
            "Unfortunately, post templates aren't a thing on reddit AFAIK :(",
            "It should, but it never is. ",
            "[deleted]",
            "Ooh, I didn't know that was a thing! I'll look into doing that."
        ]
    },
    "What have you been working on recently? [June 22, 2024]": {
        "title": "What have you been working on recently? [June 22, 2024]",
        "score": 1,
        "url": "https://www.reddit.com/r/learnprogramming/comments/1dlmwz9/what_have_you_been_working_on_recently_june_22/",
        "content": "What have you been working on recently? Feel free to share updates on projects you're working on, brag about any major milestones you've hit, grouse about a challenge you've ran into recently... Any sort of \"progress report\" is fair game!\n\nA few requests:\n\n1. If possible, include a link to your source code when sharing a project update. That way, others can learn from your work!\n\n2. If you've shared something, try commenting on at least one other update -- ask a question, give feedback, compliment something cool... We encourage discussion!\n\n3. If you don't consider yourself to be a beginner, include about how many years of experience you have.\n\nThis thread will remained stickied over the weekend. [Link to past threads here](https://www.reddit.com/r/learnprogramming/search?q=%22What+have+you+been+working+on+recently%3F%22&sort=new&restrict_sr=on).",
        "num_comments": 0,
        "comments": []
    },
    "Im dumb as shit": {
        "title": "Im dumb as shit",
        "score": 150,
        "url": "https://www.reddit.com/r/learnprogramming/comments/1dlb1x5/im_dumb_as_shit/",
        "content": "Hello I started to learn programming because i wanted a better career and life, I finished the free code camp course for html and css also the w3schools one as well and a youtube tutorial to build a youtube clone with just html and css, but now I started the free code camp course for javascript and I feel like a fucking idiot, i dont know what to do, just to let you guys know I barley graduate highschool so yeah I dont know if this is for me, any of you guys with a similar background to me have this problem and were able to become a succesful software engineer? ",
        "num_comments": 67,
        "comments": [
            "Being dumb is fine, but staying dumb is a problem.",
            "JS is an actual programming language. It deals with logic and handles totally differently than CSS or HTML. But the 3 need each other to work correctly. Think of it like this. HTML is the skeleton, CSS is the clothes, and js is the muscle structure that makes it all work. \n\nYou're not \"dumb as shit\" you're just dealing with something totally new. You will likely have to change the way you think to grasp the concepts it will take to use JavaScript.  You need to understand the DOM , and then learn the basics of JS and this will give you all you need to progress. You don't need to be a genius or learn it all. Just the fundamentals. Loops, variables,  constants, functions, objects, (not necessarily OOP) simple data structures, promises, and a few I probably left out. \n\nProgramming is not for everyone,  man. I started at 14 because my mom's BF gifted me an old ass computer with some programming tools. I never stopped, but fell in love with how it all works. It takes a real desire to learn to understand this stuff.  All you really need is the desire, and the willingness to put in the work.",
            "The two most important ideas I can share with you are:\n\n1. Failure isn't just a risk when learning, it's a crucial part of the process. Embrace it and you'll move so much faster.\n\n2. The best way to be incapable of learning something is to convince yourself that you're incapable of learning it.\n\nIf any of that vibes, my source for #1 is Andrew Huberman and for #2 is Carol Dweck (Growth Mindsets).\n\nArguably the most important trait in any developer is perseverance. You might well get further and decide this isn't something you want to spend your time on, but if you can start cracking the fundamentals of javascript then the real fun begins, so stick with it a bit longer if you can. Best of luck.",
            "Cs50. It\u2019s basically going to break you, but a lot faster than JS courses will. You don\u2019t need to continue to code in C, it will just fuck you up and down until you\u2019re comfortable getting fucked.\n\nYou\u2019ll also understand some basics which are imperative such as what arrays actually are and how memory works.",
            "Short of a genuine disability, I believe the vast majority of people are fully capable of being a successful software engineer.\n\nSomething that often holds people who think they are \"dumb\" back is that they overestimate their struggle and underestimate \"smart\" people's struggles. I got a 34 on my ACT, 4.0 GPA in high school, etc. And despite being naturally smart, programming was hard. No matter who you are, learning anything new is difficult. Programming is especially difficult because it's such a unique skill, so a lot of your previous classes won't really help you to wrap your mind around the initial concepts.\n\nAs someone who saw themselves as smart, I felt confident that I could learn to program if I just put in the work. Someone who views themselves as dumb might give into their struggle, thinking they are just not cut out for it. The issue is mindset, not ability.\n\nEveryone struggles. It is hard at first, but it gets much easier once you start to get a feel for the programming world. It might take you a bit longer to learn than someone who is \"gifted\", but you can make up that time with passion and work ethic.\n\nDon't buy into the programming culture you see on Reddit. People make it seem more scary than it is. I think often want to gatekeep programming to help feed their ego. It's not nearly as crazy as some people want to pretend it is. It's a skill, just keep at it.\n\nBest of luck!",
            "I felt the same. It took awhile to figure out that all programming languages have fundamentals that you can generally apply to all of them such as syntax and semantics, variable and data types, control structures, functions and procedures, data structures, object-oriented programming, etc. \n\nJavaScript is interesting because it interacts with the DOM, which is basically the webpage that has html and css. JavaScript makes those things interact with the user if you want it to. \n\nI highly recommend [Runestone Academy\u2019s Fundamentals of Web Programming](https://runestone.academy/ns/books/published/webfundamentals/index.html). It explains the big picture concepts and gives you exercises to complete. It\u2019s like an interactive textbook. \n\nOnce you learn one language, it makes the others easier. You\u2019re just going through the same pain many of us felt at first. You\u2019re smart enough, just push through. That\u2019s part of the learning process. Failing is a part of learning, but so is overcoming. You got this.",
            "Have you considered Scratch as a starting point?  \nJust try a few tutorials out and get things moving on a screen...then move onto a progamming language that suits your design intentions. \n\nAnd about the whole idiot thing....just lean into it, works for me! Most folk are usually too shy to be the idiot in the room...but if you're comfortable in that zone it can be useful to ask the obvious questions. Most folk are too afraid to look like an idiot for a bit and would rather put up with something that doesn't work!\n\nNah...just be you. Take a problem, break it down into chunks until you can chew through.\n\nGLHF!",
            "this should help u:[Making Badass Developers - Kathy Sierra (Serious Pony) keynote (youtube.com)](https://www.youtube.com/watch?v=FKTxC9pl-WM)",
            "I've been thinking of starting to do my own tutorials for people new to programming. I think, if you learn a new language, the key here is to be in a group of people who are at the same stage as you, so you need to be part of a class or part of a tutorials on YouTube watchers, who are at the same stage and who aren't ashamed to ask questions.\n\nIf you keep comparing yourself with programmers who already know the language, it is hard to find motivation to continue. You have to realise it takes time to learn the language until you become \"natural\" and \"effortless\". It is similar to learning a foreign language. For example, learning French. You can't expect to learn French a few weeks and it to not feel hard anymore. You need to expect to continue to feel awkward for at least a few years, and keep making an effort, and find people at the same stage you can talk to.",
            "We all been here, no one born as programmer. Only way is practice and practice. Year, two, three, etc",
            "To be fair, even as a programmer, javascript in particular has years of making you think you \"can't even\" built right into it.",
            "Just keep going.",
            "In programming you are going to have to get comfortable with the idea of feeling dumb. This is because you are learning something new and with that you are going to be a newbie all over again and struggle. I have about 11 languages under my belt at this point and for each one of them felt like an idiot at the start. The more you work with, and expose yourself, to learning and that feeling the easier it will get to overcome it.\n\nJust put your nose to the grindstone and push through, be comfortable with being an idiot at first and you will quickly find your footing to becoming a pro. Stick with it, you will get it. :)",
            "Just keep learning, I also switched carriers, and when I was studying, it took me a like a month to understand constructors and how to pass data between classes.\nYou will see that all the fuzz disappears after a while when you put extra time and practice in it.",
            "There is a learning curve when trying to learn syntax for JavaScript. If you think JS is too hard maybe you could try out Python.",
            "Congrats! You just started learning your first programming language. It will take you a bit. (No, html and CSS don't really count because they don't do any logic. They're a good intro though!!)",
            "Few things:\n\n-I would just do the odin project and join their discord for when you need help.\n\n-Everyone, their mother and their litttle dog too, wants to 'be a programmer and make decent money'. The market has people with a decade of experience unable to find work, so temper your expectations.",
            "Facing new knowledge, everyone is dumb.",
            "You'll be hard pressed to find anyone here that will tell you to stop. Aside from a few absolute numpties.\n\nThe jump from html and CSS to an actual programming language IS tough, but the good news is once you start figuring that out, other languages and frameworks become MUCH easier, over time.\n\nYOU GOT THIS!\n\nI didn't think I was smart enough to do this for a living, I was 24 when I made the jump (super late for some, I know), I took programming in highschool and did a few winter classes at one of our National Universities, but it always seemed above me.\n\nThen I joined a D&D group, that had a bunch of developers, testers, sales etc.\n\nThey weren't smarter than me, more driven, at all.\n\nSo I figured, hey, if they can do it, why NOT me?\n\nI'll never look back, you just have to stick to it!",
            "Html and css aren't programming languages, they are easy to learn there is no logic in them , on the other hand js is a programming language with logic,  dw it is normal to be confused and lost , once yoi get used to a programming languages it would all make sense for you and laugh about it , 2 years ago i was in your same sho haha , but unlike html and css programming languages take alot of effort and hard work especially for a begginer",
            "I wish someone told me these two things, so I'll tell them to you:\n\n* Focus on learning .map() and .filter(), and don't worry about the harder stuff until you master those.  They can and will be used to do just about anything and everything in JS.  Once you have a good handle on those two things, a lot of other stuff will make more sense.\n\n* Go on CodeWars and LeetCode and practice.  Get the paid access if you have the money.  It's fairly cheap for how much they'll help.  You can watch and follow along with tutorials until the cows come home, but you won't get any better until you practice.  Knowing how to write the code itself is important, but it's nowhere near as important as knowing how to logically walk through a problem and solve it.  YouTube tutorials are only good for getting familiar with the syntax and setup.  The logic and problem-solving can **only** come from practice.  Lots of it.\n\nEveryone goes through the \"I feel dumb\" phase.  I'm a self-taught dev who got an internship and then got hired full-time.  I'm now coding for a total of 3+ years and I've gotten way better than I ever imagined... aaaannnnd I'm on a PIP and probably going to get let go in September.  It sucks, but I keep pushing.  \n\nYou're not dumb as shit.  Coding is just hard as fuck.",
            "I'd say that where you are is an okay/average situation to be in when finishing highschool. You just have to practice, maybe try something different if you're 100% sure you're going nowhere after trying a bunch (like, a different course or language) and just know that you're NOT dumb, not knowing something is NOT being stupid. Nobody was born with the knowledge how to do programming or use javascript, 90%+ of people had the same struggle as you.\n\nIs there something particular about js that is troubling you? Maybe try a different tutorial/course cause this one just isn't working for you? Looking at something that teaches you general programming basics and concepts might help you before doing javascript maybe?",
            "I'm in a similar boat, the only thing that's kept me learning is that I actually DO LIKE solving the problems, big or small, although the small ones make me curse a lot. There are also days when I feel discouraged about my career path, or overwhelmed, and it makes me not want to do anything. Do you have any big dreams or other career advantages? I just think you should only pursue it if you like it",
            "You haven't described anything about what's actually confusing you, how much time and effort you're putting in, etc. Can everyone learn to code? No, not everyone. You got through html and css so maybe you're better with web design than development.",
            "take a look at fullstackopen.com/en. It\u2019s a free online course that teaches fullstack development. I think what you might be needing is more structure. Like how all these tech pieces fit together. Learning Html, css, and building a project is a great first step! Now you need see how all these pieces fit together.",
            "W3schools was my favorite, mostly because you could experiment with the examples to understand the code better instead of typing out each tutorial.",
            "Trying something and it not working is not failing. Standing still and doing nothing most certainly is.\n\nIf you are truly dead-serious about learning how to code, then one of the absolute best ways to truly learn and accelerate your growth is by undertaking your own projects of your own volition where the only thing keeping you going is your own desire to see it complete. Make a small tool, or a shell script, or a tiny game, a web utility. Something. Anything. So long as it's small, and simple, and does one specific thing that you are interested in.\n\nFigure out what that one thing is, think about what the end result should eventually look like, then solve it one problem at a time. Where do you start on a new (JS / shell / game / app) project? What information will you need? What controls will there be? What visual elements will need to exist? How can you plug information into those elements? Break down your one thing into broader questions like these, and liberally Google to your heart's content, and you'll grow in no time at all.\n\nGodspeed, OP! You got this.",
            "Slow down , take your time. Learn the basic JavaScript types really well. Learn how to debug your code with print statements , especially learning loops and nested loops. Don\u2019t be afraid to fail and fail and fail a lot. Don\u2019t skip something because you think you already know it. Don\u2019t learn any frameworks until you know how to manipulate the DOM and are comfortable with classes. Also don\u2019t ever give up, if you frustrated and you will, get off the chair and workout , the more blood flow to your brain and less panicky the better you\u2019ll perform.",
            "May seem like a stupid question but have you started writing code or just watched videos? It doesn't truly 'click' until you actually start making something.\n\nWhen I really had it make sense to me is when I thought of a personal project that was simple and just did it. I made a ton of mistakes and just googled the problem. Once you know what you are looking for the rest will come and before you know it you made your first functioning program.",
            "You just don\u2019t know it yet, keep going and figure out your areas of improvement.",
            "I struggled learning javascript the first time. I stayed away from it for over a year. Then when a coursework for web development came up, I was forced to learn it again by myself.\n\nNow ask me what I realized? That it's all in my head that it is hard. It is challenging but it can be overcome eventually with perseverance and self  confidence.\n\n\nYes you will struggle but there's google, code documentation,youtube and other resources to help you\n\n\nYou will be forced to go figure out in the jungle of resources everything that you need to learn\n  \n\nYes it will take time but youll get the hang of it. Eventually youll be proficient enough not to look for the syntax but instead figure out the proper logic of your code.",
            "Most engineers are anything but geniuses. It just takes time and dedication, like anything else. \n\nVery few can stick around until they catch on because it's very discouraging, but you'll figure it out.",
            "The answer is maybe.\n\nThe positive news is, I did poorly in school, left early, went to university late, struggled with study and graduated late, but I\u2019m now a successful software engineer and known for being competent and good people want to work with me again.\n\nThe bad news is, there is 100% an IQ floor to succeed as a software engineer and it is an above average IQ. None of us here know how intelligent you actually are so we can\u2019t tell you if it\u2019s something you\u2019re capable of or not.",
            "I\u2019ve been programming for more than three decades and evertyime I start developing something new, I feel like a fucking idiot",
            "JS is nothing like HTML or CSS. Expect to feel like you\u2019re back at square one because you kinda are.",
            "Hey! Found this video and this guy, Brian Cache, talks exactly about what you're going through (even references the freecodecamp javascript course.)  Very relatable!  If you're determined, you can do it...Brian breaks it down in simpler terms than Kathy Sierra did in a different comment here.\n\n\nhttps://youtu.be/d62KYDSVQ8I?si=qcb6jrjN-EGJqRZQ\n\nHonestly though, I just talked to a director who failed out of college level software engineering courses when he started.  He pivoted to cybersecurity and things just clicked for him.  Because he learned the basics of coding, he was able to continue to learn how to script jobs and that's how he went from security engineer to director. Very similar lesson on how to get good at something difficult like what the videos are saying.\n\nIt seems hard now and you're really beating yourself up for it.  You're not alone though.  Seems like you want a better life for yourself - keep going!",
            "just keep on. If i look back in retrospect I'm in awe how fucking stupid I was till I understood for loops lmao\n\n>any of you guys with a similar background \n\nI had 0 professional working experience ( started working at 31years), self learning for 1 year, landed job on first interview and I'm the only one person without degree in whole firm yet I managed outperform all that were hired at same time. Dedication and persistence is the key",
            "If it makes you feel any better, I finished highschool with a high GPA and was always considered to be fairly intelligent by my teachers. And I'm now 33 and broke, and trying to learn programming. And I find html and css both to be difficult so far. So I wouldn't worry too much about how you did in school or anything like that. Life is full of challenges and failures. Embrace and accept that and keep working towards your goals.",
            "Or maybe it's simply not the job for you.",
            "\nI feel I should leave this here.\n\nhttps://grugbrain.dev/",
            "I think I was dumber than you when i just started. I barely understood the basic concepts like variables. Nevertheless I didn't stop learning programming and after few months I noticed that I've improved a lot since then. So don't give up try your best and just wait. Happy learning!!!",
            "All I can say is stick with it, and you might be surprised how easy some entry-level dev jobs are. \n\nI know when I'm hiring someone entry-level, I appreciate people that I feel like I can teach more than anything. Are you someone I want to spend time with and teach? That's my number one thought. *It's entry-level for a reason*, we don't expect you to know everything, just that you are eager to learn. \n\nYou might benefit from some informational interviews. Just look up a few dream companies that you'd love to work for and reach out to them. \n\nAsk them if there is anyone on staff that would be willing to talk to you for a few minutes about what they look for in perspective employees and what it's like to work there.\n\n I ended up getting a job offer this way early in my career. There was a shoe company that I was a fan of that had an office in my city. I was a new designer/dev and I just walked in and asked if there was someone I could talk to or set up a meeting with. \n\nI ended up grabbing coffee with my future boss and we hit it off well and he let me know about a position that hadn't been posted yet with the company. I was working there 3 months later and it really kicked off my career.",
            "Why do you feel that you are struggling to learn?\n\nMaybe you are trying to take on too much in one go? Maybe you aren't spending enough time to properly absorb the current topic before moving on to the next?\n\nDo you have a project/career goal and thus focusing your learning or are you just learning stuff without a plan?\n\nI mean there could be lots of reasons, different people struggle in different ways and for different reasons. Looking at yourself critically and identifying your personal challenges is an important first step.",
            "realising that humans are dumb when it comes to coding is already a big step forward.",
            "Sounds like a mental block bud dw. You eventually hit that epiphany moment where it makes sense. Just takes a fuck ton of banging on the door. Keep it up",
            "Step 1 I am a idoit\nStep 2 Maybe I am not as much a idiot that I thought \nStep 3 Ok I know some stuff \nStep 4 I am a idoit that can learn\n\nAnd many more steps in between \nKeep going",
            "I think you may need to adjust your expectations of learning. I myself thought I\u2019d be a competent SWE after 6 months of a bootcamp. The reality is it takes years of practice. It\u2019s hard and not many people stick with it that\u2019s why it pays well.\n\nJust be patient, you wouldn\u2019t be good at anything you did for 3 months. Don\u2019t expect to make it to the NBA if you just learned to dribble!",
            "A lot of things in life is like learning to ride a bike. You get on it, fall off it, use training wheels until you don\u2019t need em and eventually you know how to ride a bike. It\u2019s the same thing with learning and being a software developer, or anything really. Maybe remind yourself why you started it in the first place too? Was it because it\u2019s fun or interesting, lean into that more. You got this!",
            "You can't become an engineer if you \"barley\" finished the school. Well, you can but that involves years of studying. Maybe an army would be a better place for you?",
            "lol you may not be dumb as fuck, I\u2019m the one throwing myself in the deep end here. My partner and her wife are teaching me all the React stuff and I have no cs background.",
            "Another one of those. \n\n\"I'm the dumbest mf'er around. Tell me where I'm wrong. Shower me with all the compliments I don't deserve.\"\n\nHoly Christ",
            "\u201cSkeleton\u201d\n\nOk yep that makes sense.\n\n\u201cClothes\u201d \n\nOk yep..\n\n\u201cMuscle\u201d\n\nOh yeah that makes sense.. wait.. CLOTHES?",
            "Yes. Try, fail and learn. Do it better than the last time.\nIf you look on your code from last year, you should think \"I would do this in another way today\", because that means progress.\nIt is perfectly normal to get stuck, need help, and have to look up simple things.\n\nI am a senior fullstack dev, doing this since more than 20 years.",
            "No, sorry. Most people are able to be a mediocre pseudo-software engineers that should do something else for life. But they hear that \"programming pays\".    \nAs long as they do webpages and other shitty thing it's ok. But for time to time someone is hiring one of those to make some critical stuff - and then people start dying. Ask toyota how hiring a student to program car computer went. \n\nAnd now, there is an incredible stratification in companies. People we would call \"true professionals\" do not want to work with random desperate people. They simply do not want to \"clean up after them.\"",
            "Thank you for sharing this!  Just re-shared to my teenagers because they tend to get frustrated and drop learning when the confusion sets in.  Kathy Sierra explains it beautifully.",
            "I learned some Java in high school and a couple university courses, as well as JavaScript for a frontend course last semester. Learning python know and coding in it feels like illegal. Its really simple. I would see if you could find a PDF of \"Python Crash Course\" by Eric Matthes. Do the examples within the chapters as you read them, learn Git that's within the book as well so you can get an understanding of version control. But that's if you want to go down the Python route instead. If you think you enjoy coding in Python you could try out this roadmap as well. [https://roadmap.sh/python](https://roadmap.sh/python)",
            "Python would be the best option for OP",
            "How is CSS easy to learn?",
            "I love that the suggestion isn\u2019t \u201ctry a different, more structured course\u201d or \u201ctry Python\u201d.\n\nJust \u201cgo be an infantry grunt\u201d lmao.",
            "yes i really loved it, i wrote everything she said\n\nall the best",
            "The basics is easy to learn , compare it to the basics of js",
            "lmao"
        ]
    },
    "I\u2019m no good at math, is there hope for me and programming?": {
        "title": "I\u2019m no good at math, is there hope for me and programming?",
        "score": 64,
        "url": "https://www.reddit.com/r/learnprogramming/comments/1dlh04p/im_no_good_at_math_is_there_hope_for_me_and/",
        "content": "So I\u2019ve been trying to learn programming for a few years now, and I\u2019m hoping to go back to school for it at 30. I\u2019ve never been good at math, like my brain doesn\u2019t process numbers right I feel, and I fear the amount of math programming might need. Is there hope for me with programming? Does anyone know a good place to start? I\u2019d appreciate it so much y\u2019all. \ud83d\udc96",
        "num_comments": 115,
        "comments": [
            "Rather than math, I think being able to track and organize large groups of items in your head is more important. Imagine you have a ton of items in a warehouse, you need to change labels on those items by groups, and sometimes items get misplaced or groups of items get mislabeled or for some reason the count is wrong. Someone who is able to mentally track everything and organize and re-arrange items will do well in programming imo.",
            "The underlying issue is logic and problem solving. If you don't enjoy those at least, it's probably better to find something else. Numbers are not the issue.",
            "You don't need to be good at math to learn programming. You would need some math if you delve into the more theoretical stuff, or decide to pursue a computer science degree, but for day to day programming you don't need anything more advanced than elementary level math.",
            "If you are consistent you will learn and go further than someone who is talented but lazy, so yes imo",
            "Computer Science degree is in the College of Engineering and requires quite a bit of math.  I hate math, but I survived it in college.\n\nThere are also school of Business Computer Science degrees, sometimes called Information Systems or similar that don't require as much math (at least at the university I attended).\n\nI like to say that I've always hated math and now I force computers to do it for me.",
            "You don't have to be good at math to understand math. Perhaps you've just had bad teachers. One day you'll have a moment where everything just clicks and math makes sense. Just how you challenge yourself to program, you can challenge yourself to do math. \n\nDon't treat numbers as demotivating or feel it's an impossible task. The language seems scary but it's just like learning any other vocab words. Math, of all things, is fairly concrete in how it exists on a basic level. More theoretical, obsure math stuff isn't really going to be present in CS unless you're doing like astrophysics or something.",
            "Sometimes people don\u2019t do well in math classes for reasons other than being bad at math - problems at home, problems with authority, mental health, apathy, etc.  But if you don\u2019t do well in math classes because it\u2019s too hard, then you\u2019re probably gonna experience a similar thing in coding.\n\nLet me ask you this - WHY do you want to learn programming?",
            "You don't need math. If you have a computer, start today. Create a web site or mobile app with a database.",
            "I was great at math and sucked at programming. My friend was pretty bad at math but a beast at programming. Do what you want with this.",
            "Maths is not needed.",
            "Just start. See if you encounter math. You will but it will not be the math you expect. It's more of logic and incremental math rather than complex computations.\n\nIt's not calculus.",
            "Complex Math is needed for a degree, but not for most programming.  If you suck at math get a business degree and learning programming on your own.",
            "I haven\u2019t taken a math class since 2003 and I\u2019m finally going to college for computer science! I\u2019m ok at math can do the most basic but i can speak computer if the math is that bad I\u2019ll get a tutor",
            "I suck at math and build cool things, besides for math you can let ai help you by explaining things.",
            "How bad?\u00a0\n\n\nCan you expand algebra formulas and stuff?",
            "Yes. Not all coding requires math. Find out what type of coding career interests you and be consistent towards it",
            "No need to know math actually, I've been in this business for 12 years, I have a Computational Science and Engineering Degree and I'm a Principal Engineer. Also, I've been part of projects directly related to physics and maths at work and I didn't have issues at all. I've started to learn math this year because I'm studying graphics and game programming in my free time, I remember nothing from my degree haha",
            "You can be a fine programmer with no math skills. You may however struggle in machine learning and data science. Good news is there are millions of jobs in programming not in those fields",
            "I am terrible at math (I have a learning disability, so I never was good at math. I had to have an extra elective class in high school just to get help with it and other homework assignments). I\u2019m mostly self thought programming. My main language is python but I have been dabbling in some Rust and C++ this last year and a half or so. Mostly just personal projects and ideas I have for tools to make. \n\nI would say I\u2019m intermediate level in python, rust and c++. I barely have needed to use complex math in my use cases. So you should be ok.",
            "you may have dyscalculia.\n\nnow, can you program? maybe. is it going to be harder for you? yes.",
            " I am HORRIBLE at math. like embarrassingly bad. But I am taking a precal class at my local community college and also doing Harvard\u2019s CS50x. there is not that much math involved, it\u2019s really just logic and understanding the concepts",
            "I may be wrong but the pure math part only helps to get a CS degree. At your job, there will be math but not nearly as much as here. Or even close. (BUT that also depends on the sector; I was formerly talking commercial. If you're in academia, better hit the books.)",
            "I studied Java in college, but I am not good at math. But our country's teachers always help us pass exams. Looking back at my major and current job search experience, if you are a lazy person who never learns automatically, you cannot become a good programmer. I can't even find a programming job. I really envy you. In my country, programmers are always very young. A 30-year-old programmer can either switch careers and become a teacher at school, or stop coding and become a manager. By the way, I am Chinese.",
            "It\u2019s okay, you don\u2019t have to be very good at maths. But of course, you need to learn the basic stuff like addition, subtraction, division multiplication and some coordinates parts also like X and Y . I am also a mathematic graduates who jump into the programming world. I easily learnt all those things because I am a guy like we are a math person who solve problem daily so programming is also like that you have to solve problems in the real world so learning Maths will definitely help you, but there is no much help so preparing for the DSA for the great companies you need to understand Maths",
            "For most programming, all you really need to know is discrete math and very basic algebra and statistics. Dealing with concepts such as graphics requires more math. \n\nFor CS, you\u2019ll need to know at least multivariate calculus and possibly linear algebra, depending on the university\u2019s program, since you will be dealing with concepts such as algorithm analysis, optimization, graphics, etc.",
            "Yes",
            "Yes there is. You  don't have to be a math wiz although basic algebra is a help. What you will need to be able to do is  research and find formula to fit your use case. A good example is finding the area of a circle when given the radius \nIt's simple enough to find the formula for that ( area = pi\u00d7(rad*rad)\nYou can do this \n\nSorry for poor formating cell phone and not sure how to represent Rad to the second power on here",
            "No.\n\nNote to everyone else:  I'm just following the Jerry Sienfeld method here.",
            "You don\u2019t need math for a lot of software jobs. This is true but you will have to take math to get the degree. All you need to do is pass though. Work hard, study, go to class you\u2019ll be fine!",
            "Computer science is basically all math, but you have a pretty warped idea of what math is. \n\nAfter a while, math isn't about numbers anymore, it's about theorems. \n\nI was \"bad at math\" until I hit calculus and then everything kinda clicked. Then it was a breeze through discreet, linear algebra, etc. \n\nThinking math is about numbers is kinda like thinking literature is about grammar. \n\nSure, grammar plays a part, but at some point you just abstract it.",
            "Programming is more about discrete math than calculus. I'm not going to say its easier, but it is certainly more digestible.",
            "Nope, give up.  Also, why would you proclaim you're not good at something when you probably have put very minimum work into trying?  If you go to get a degree you will have to learn math.  The good thing is you can start again from the beginning.\n\nI failed AP calc in highschool and went back to school at 27 and started all the way over from pre-calc and trig.  I now have a minor in math and probably most non major undergrad math classes under my belt.  I can tell you, as an older person it's easier to do well in college.  You may not have realized it but you've probably learned a thing or two about learning as you've grown up.  You probably will have an easier time with math now if I had to bet.",
            "Are you good at other logic skills like chess/strategy games/debate? If so, yes. If not, probably not",
            "Why don't you just use programming to learn math? https://www.udemy.com/course/math-with-python/?couponCode=24T6MT62024",
            "I learned to program and used mostly basic maths until I pivoted over to game development. Had to learn/relearn math for that, but a LOT of programming is basic maths or stuff you can use built in libraries for. Don\u2019t count yourself out before you give it a shot.",
            "I stuck at math too. I'm pretty good at understanding equations though, just don't ask me to find the answer without writing software to do it. And I have a very successful software career.",
            "I too, hate math. The thing about coding is that you can simply Google the formulas you need (you DO need to know WHAT you want to calculate), and plug them into your code. That way, the computer does the math while you just make sure the logic is right.\n\nUnless... you want to do stuff like building 3D games. Then I believe you need to know things like linear algebra.",
            "Math skills arent necessary, necessarily. Logic skills absolutely are though, and those two things are often kinda associated. If you suck at and/or hate discrete math/logic programming may be an uphill battle for you",
            "try freecodecamp!",
            "You need some bare minimum IQ and a sincere motivation for sure. Maths, not really, only if you are doing data science stuff. And it also depends on the subject data. If you work with JPL NASA for example which is physics heavy, yeah you do.",
            "Programming is simply handling data. If you\u2019re not good at *numbers* but good at *logic*, you\u2019ll be fine for basic stuff and could probably find work in frontend eventually.\n\nGood luck being bad at math and going much deeper.",
            "Most programming doesn't actually involve a lot of math. And the math you do need, you'll get practice on by programming. Programming is a better way to practice math than most actual math practice.\n\nChances are it won't be a problem, or at least not enough of a problem that you'll find that's the thing holding you back. You might as well try it. (I don't really recommend going back to school though.)",
            "Absolutely. I think the whole having math thing is overrated. If you work hard enough at a skill and have a hunger to learn, you will be fine.",
            "Yes that's still hope. I hate when people try to encourage the misconception needing maths to be good at programming (yes universities, I'm looking at you!)",
            "Sorry to break it to you, but computers work on MATH! Take a discrete math class, learn to write some proof and see. Even if you don't pass these classes, you will start seeing ways to code..",
            "The question is why your brain doesn\u2019t process math well. Is it because you have difficulty following sometimes complex chains of sequences that you find in more advanced problems? Because if that\u2019s the problem, programming may not be for you.",
            "Depends.. mainly on the application if you want to make websites or android apps you dont need to be a math genius. Just need good memory, capacity to grasp abstract concepts and to be obsessed with learning. If you want to do ML you may need to know some more advanced math concepts, but it depends on what you want to do, how and which language.. like we there are tons of languages and tons of fields and applications for them. If you dont like math maybe matlab, R, Julia, fortran, C, C++, Haskell, etc wouldnt be the way to go.\n\nI think a good recommendation would be Python or Kotlin there are tons of free resources.",
            "Unless you\u2019re working with really low-level, computation optimization type shit, you generally require algebra-level math 99% of the time. \n\nProblem solving skills are most important, like warehouse example above.",
            "It\u2019s abstract mathematics and you train your brain to work around those to solve real world problems. \nSometimes the best way to solve a problem is mathematically (logically). Just work on your ones and twos and you\u2019d be good, unless you\u2019re into ML or Ai stuff where you will need to learn statistics and all those deviations",
            "Not all programming is math heavy. What is math heavy is scientific programming, machine learning and similar...\n\nFrontend/Backend programming, not so much usually.",
            "Programming has nothing to do with math (unless you are specializing in numerical methods). I have many programmer friends, and they are not mathematicians at all",
            "It depends on direction you take. As long as you don't take the job that involves using math, you are good to go. Many heavy lifing was done already, so most often you will not even need to use math, or use it on very generic level, like writing sqrt, mod, sin, etc and adding a to b. For more complex tasks you can google some ideas.",
            "If you can understand logic and logical program flow, you can program (if not, you can learn along the way).   Being \"good at math\" is not a requirement.\n\nLearn the basic structures, like if..then, while..do, logic operators (less than, greater than, equals, not), and variable types.  Start with simple coding practices and build on it.  Learning programming (imo) is iterative, your first application is gonna be simple, and as you learn, your applications will also grow and become more complex as will uour skillset.",
            "I'm not really good at math, but I am somewhat acquainted with it. The only concepts that come to mind when I try programming are the usual PEMDAS and MDAS rules, and understanding how variables work. Besides that, I often find myself needing to relearn things. I think if you have a good grasp of how variables are supposed to function, it makes it easier to pick things up again.",
            "Yes. I am bad at math. I left my high school math final exam blank. I\u2019ve been a JS dev for 10 years and now engineering manager for 4. All is possible. Don\u2019t be discouraged. Analytical and critical thinking are more important than math",
            "Most programming don't require complexe math and when you need it you can Google or AI it. You all good. Just don't pick a job resolving around math.",
            "You will generally find cool libraries to handle \u201cmost\u201d of the math. Do it if you like CS, you will manage.",
            "Depends on the math. There are different branches in mathematics. For example discrete math is has a lot implications in programming. This is also valid for things like Graph theory, Design and Analysis of Algorithms, small parts of Abstract algebra, etc. There is  not a lot of \"numbers\" in them all of them (except combinatorics) but they crucial for understanding things like networks, most common algorithms, data structures, the operating system, etc.\n\nDisclaimer: the examples I gave are valid if you want to go a little bit deeper than scaffolding backend apis with CRUD operations and simple React application. It is totally ok to do only this things and i that case you do not really need math.",
            "Yes",
            "I studied extra math because that was a criteria to be able to study programming and I have after a year of studying not used more sophisticated math than plus or minus or the occasional division.",
            "The toughest math that most programmers deal with is the math they have to get through in college.  \n\nI'm not good at math, and I've been a software developer for my entire career.  I'm a desktop application developer, and I don't do any math.  Some backend developer jobs require math, but there's more jobs that don't.\n\nThe most mathy code I ever wrote was in a Modeling & Simulation class.  The algorithm the teacher gave us was based on a diffential equation, which is way out of my league.  But I just had to turn the equation into code, not solve it.\n\nThere's math involved with analyzing an algorithm's performance, but this isn't what most programmers deal with.  For most programmers, figuring out a performance problme is more like a manager analyzing worker performance.",
            "If you didnt study algebraic geometry in high school, you can't make a crud application. You need to finder another career.",
            "You don't need to be good at math for programming, it's just that being good at math often leads to better problem solving skills. But that also depends on what kind of career you want to pursue.\n\nWeb development? You don't need to know any math, because you're just making a pretty-looking website and maybe some backend stuff, but that doesn't require any math either.\n\nIf you want to make some applications (mobile or PC) it's pretty much the same story, unless you consider defining the width of some components as advanced math.\n\nMaking games might require some more math, knowledge, but it's more problem solving and making sure things run smoothly (which, again, could require some more advanced math, but you can find a lot of ready solutions online).\n\nCreating your own graphics/game engine requires knowing vectors, matrices and linear algebra (at least from my experience, there are probably more things you need to know). Again, there are ready solutions online, so you can just use those, but it might feel icky because you won't understand why those things work.\n\nTL;DR: You don't need math for most stuff in programming, unless you're trying to deal with some advanced 3d stuff",
            "I did go to college at 30 to become a programmer, it was not a waste but you will learn more at Udemy",
            "Web development does not require advanced math. Neither on the backend nor on the frontend. On the backend you mostly need to understand data, maybe Set Theory is the most advanced math I had a chance to apply on a day-to-day backend problem. On the frontend you might need some geometry, but I doubt it.",
            "You don't need math for most programming jobs. You do need math if you want to get a computer science degree.\n\nI went back to school at an age older than you having failed out of pre-calculus out of high school. But what I found out was that I had a terrible pre-calculus teacher that convinced me I wasn't cut out for anything math related. It's possible your math teachers are just bad math teachers. \n\nIf you want to try again with math, I recommend you check out \"Professor Leonard\" on youtube. He has a ton of math videos at all levels and explains every concept in an easy to grasp way. I went from someone who couldn't remember how to do long division manually and needed to re-learn algebra to someone who is going to graduate with a CS degree after the next semester. I got through most of my math classes thanks to Prof Leonard (there are some subjects he doesn't have videos for, like discrete math)",
            "This is kind of an old stereotype about programming. It came about for a reason. \n\nMaths is important for what's known as low level programming and if you're programming in what's called Assembly it can be very important because it can be necessary to translate numbers between, essentially, human language and computer language. On top of that, at this low level, you're basically programming the CPU almost like a scientific calculator. Everything it does is expressed mathematically, and you're combining these bitesize mathematical actions to achieve more complex processes.\n\nUntil about the 1980s calling yourself a computer programmer meant doing some amount of this. Since then, this has become an area that really only specialists or retro hobbyists work in and more and more programming is done in what we call high level languages. These languages can be written without requiring any kind of maths and then are translated into low level code for you by software called a compiler. (or an interpreter, depending on the type of language). \n\nThat's not to say maths doesn't come up from time to time. Sometimes you'll be writing a piece of code that is mathematical in nature, like say, a script to convert miles to km. But you only need to be able to figure out *how* the maths would need to work, not literally be able to perform the arithmetic yourself.",
            "Theoretical CS is very math heavy, just coding not really",
            "No it does  it matter really unless you want to specialise deep within certain topics, but programming just requires a problem solving attitude",
            "Unless you're doing research you've got nothing to worry about.",
            "Problem-solving skills are needed more than math when learning programming. Schools teach math because it helps you develop problem-solving skills.",
            "It might actually help you with math if you have to use some to learn something you enjoy doing ;)",
            "I was horrible at math through my 12 years of school - after I graduated I started my training as a software developer. I successfully finished it and it helped me to understand math. \n\nIt\u2019s not about calculating, it\u2019s about logic. The numbers don\u2019t matter, really. I love numbers and calculations now and I actually specialized in data science after finishing my training and working for a bit as a developer. Don\u2018t be scared if you\u2019re not good at math! You just need to be able to think logically. You\u2018ll be fine, trust me.",
            "Hey OP, I am currently a 3rd year student at university studying Applied Computer Science. I was never bad nor good at math, just the average but I hate it.\n\nI had some intense courses (if I speak for myself) in math and still succeeded because coding doesn't necessarily include math.\n\nYou can perfectly do fine, and don't have to be a math wizard!",
            "Yes",
            "Programming most apps is more about logic than math.",
            "I mean, algebra I guess.\n\nYou only need to get the math right once. Then it's no longer math, but a function \ud83e\udd17",
            "If you think 1+1=10, you'll be fine.",
            "There is a math refresher for adult book which I've been using and have found very helpful!",
            "You can definitely be a programmer, also I would explore using no code tools, there is a rise in request for these skills.",
            "Consider trying to be a Data Analyst with SQL (more favorable learning curve IMO), and then slowly loop in Python if you\u2019re able. It took me years of incremental progress but it was all worth it",
            "Generally no. \n\nI would say that Back-End programmers must be at least OK with math. Front-End Developers not as much. BUT, this is largely dependent on the company you choose to work for. \n\nI\u2019ve had clients where I did not have to think about math, and clients that needed quite a lot of math on the Front-End.",
            "if you don't have the logical framework that math requires then you won't be able to be a good programmer",
            "'bad' is a subjective term. You need to understand algebra and logic (discreet mathematics) to understand programming, otherwise you are never going to get what is going on. The good news is, you can learn it for free. Just get it done. 1brown3blue is good on YT.",
            "No hope, give up on your dreams",
            "Don't waste your time and taking all these comments as motivation either. All these comments are bullshit and get you no where. You can't do anything great in programming unless you are good at math.",
            "Math only matters if the program you're writing is all about math. Anything else it isn't a factor.",
            "Do you need math for programming? Most of the things IT does, doesn't involve math at all.",
            "this is too damn accurate, great analogy. Grouping data is the name of the game.",
            "100% agreed. I usually find math boring but I love programming, especially scripting. Most of my scripts in PowerShell and Javascript don\u2019t usually involve math and when it does, someone already did it on Stack Overflow lol.",
            "I agree with this a lot. I noticed people when they look at math they see numbers, but I tell them to look at the formulas and use them to solve for you. In high school I did C++/Advanced C++ my teacher told me this and it helped me learn to use more problem solving. \n\nNow I do construction and use math everyday \ud83d\ude02",
            "1+9 equals 10 correct?",
            "That\u2019s not entirely true. Yes you don\u2019t have to use (depending on the field) complicated formulas, but being good at math isn\u2019t about actually using it, it\u2019s about the ability to recognize complex patterns and finding solutions. Programing is all about by finding solutions to problems with different level of complexities",
            "This isn't true for all universities or even all good universities, many have their own separate schools? for comp sci related stuff and you can get a degree without all that many math courses. I do believe at least calculus I is required, though",
            "Is web dev still relevant?",
            "Don't listen to this...Without math, you can even get stuck in CSS...",
            "Fusion dance?",
            "Unless he's looking to get into ML or game engines and then it is. \ud83d\ude2d",
            "Comp sci is really heavy on math. It is science after all. Might wanna consider SE instead",
            "[3blue1brown](https://www.youtube.com/c/3blue1brown)?",
            "One thing I'm really sad about is when I was a kid my high school maths classes were all separated out into skill level streams. My mental arithmetic is hopeless so I always got placed in the lowest stream, doing nothing but basic arithmetic for like five years. I get right up to the end of high school thinking I'm useless at maths and it's this miserable, arbitrary shit and discover all the higher sets are doing conceptual, theoretical stuff I'm really fucking good at and interested in.",
            "What kind of math do you use? I'm quite curious",
            "unless you fuck up the types, then it's 19 lol \ud83d\ude43",
            "Or A.",
            "Over here most unis require maths for comp sci and then offer courses without called something generic like computing or computer studies.",
            "Most people still visit the internet so yes.",
            "How is that?",
            "Don't tell me this is not sarcasm",
            "For someone just starting to learn programming?  I doubt it.",
            "what is SE",
            "Haha yes, sorry my overtired dyslexic brain sometimes does this!",
            "Or an error",
            "Are you sure?",
            "It could be sarcasm if your programming is all about copy and paste some code from google that you don't understand...If you want to build single web page, sure. If your goal is to build a tic-tac-toe as a pet project, sure..it's sarcasm...Also, it could be sarcasm is you are big into quick scams like Bootcamp...\n\nBut any serious problem solver in CS will need some basic math...Those who want to be even better takes discrete math, combinatorics etc...\n\nHow can you even do an algorithm analysis without basic pre-calculus?",
            "Software engineering.  It will still have math, just not as much."
        ]
    },
    "Huge thanks to this community!": {
        "title": "Huge thanks to this community!",
        "score": 4,
        "url": "https://www.reddit.com/r/learnprogramming/comments/1dludts/huge_thanks_to_this_community/",
        "content": "I finally landed a job as a Junior Software Engineer. Took me 1.5 years of learning and 6 months of looking for a job(6 months are included in my learning time). Managed to land an internship and got hired after. \n\nI never paid for any course, nor did I went to the bootcamp. I started at freecodecamp with html and css, and then followed this community's advice. Continued on The Odin Project (tho, never finished it). \n\nYou guys are amazing and I wouldn't be able to achieve that without all of you! I'm very grateful to every single one of you!\n\nEveryone who is struggling with finding a job - you will manage, just don't give up (as long as you are confident that you enjoy coding and building things with code). ",
        "num_comments": 1,
        "comments": [
            "Congratulations! This is awesome news, always welcome a success story! Wishing you much success and learning in your new job!"
        ]
    }
}
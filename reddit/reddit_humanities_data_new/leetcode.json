{
    "How do you guys get good at DP?": {
        "title": "How do you guys get good at DP?",
        "score": 1108,
        "url": "https://www.reddit.com/r/leetcode/comments/sv82tg/how_do_you_guys_get_good_at_dp/",
        "content": "I'm really struggling with grasping DP techniques. I tried to solve/remember the common easy-medium problems on leetcode but still get stuck on new problems, especially the state transition function part really killed me.\n\nJust wondering if it's because I'm doing it the wrong way by missing some specific techniques or I just need to keep practicing until finishing all the DP problems on leetcode in order to get better on this?\n\n&#x200B;\n\n\\------------------------------------------------------- updated on 26 Jan, 2023--------------------------------------------------\n\nWow, it's been close to a year since I first posted this, and I'm amazed by all the comments and suggestions I received from the community.\n\nJust to share some updates from my end as my appreciation to everyone.\n\nI landed a job in early May 2022, \u22483 months after I posted this, and I stopped grinding leetcode aggressively 2 months later, but still practice it on a casual basis.\n\n&#x200B;\n\nThe approach I eventually took for DP prep was(after reading through all the suggestions here):\n\n\\- The DP video from Coderbyte on YouTube. This was the most helpful one for me, personally. Alvin did an amazing job on explaining the common DP problems through live coding and tons of animated illustrations. This was also suggested by a few ppl in the comments.\n\n\\- Grinding leetcode using this list [https://leetcode.com/discuss/study-guide/662866/DP-for-Beginners-Problems-or-Patterns-or-Sample-Solutions](https://leetcode.com/discuss/study-guide/662866/DP-for-Beginners-Problems-or-Patterns-or-Sample-Solutions), thanks to [**Lost\\_Extrovert**](https://www.reddit.com/user/Lost_Extrovert/) for sharing this. It was really helpful for me to build up my confidence by solving the problems on the list one after another(I didn't finish them all before I got my offer, but I learned a lot from the practice). There are some other lists which I think quite useful too:\n\n\\* [https://designgurus.org/course/grokking-dynamic-programming](https://designgurus.org/course/grokking-dynamic-programming) by [**branden947**](https://www.reddit.com/user/branden947/) \n\n\\* [https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns](https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns) by [**Revolutionary\\_Soup15**](https://www.reddit.com/user/Revolutionary_Soup15/)\n\n\\- Practice, practice, practice(as many of you suggested)\n\n\\- A shout-out to [**kinng9679**](https://www.reddit.com/user/kinng9679/)'s mental modal, it's helpful for someone new to DP\n\nSince this is not a topic about interview prep, I won't share too much about my interview exp here, but all the information I shared above really helped me land a few decent offers in 3 months.\n\n&#x200B;\n\nHope everyone all the best in 2023.",
        "num_comments": 208,
        "comments": [
            "I think just doing more problems will help.  Everything takes time.  A lot of it has to do with doing so many problems that you start memorizing different tricks/patterns.",
            "One thing that helped me was coming up with a recursive solution to the problem, then take a look at the parameters you are passing to the recursive function. \nThen check which parameters change between calls, those are likely the coordinate in your dp array/matrix.\n\nUnderstand how the recursive call generates its answer from the sub recursive calls, try to put that into an equation, like currentRes = f(subRes). That would be your DP build up equation.\n\nLastly find the exit case of the recursive function, that is the base case that you need to built up from in DP.\n\nHope this helps.",
            "Prctaiec.\nPrcatiec.\nPractiec.\nPractice.",
            "While the advice on solving more questions is correct, it is also important to dissect each problem you solve successfully so that you fully understand how DP was exploited to solve it. Spend lot of time on each problem, till you have a complete understanding of what is going on. If you move to other problems with a superficial understanding of current one, your understanding will not deepen.",
            "Leetcode published an explore card about DP 3-4 months ago\n\nhttps://leetcode.com/explore/learn/card/dynamic-programming/",
            "I was definitely in your position some time ago - I can relate. I found this post useful on the subpatterns of dp (done most of it): \n\n[https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns](https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns). \n\nAs others mentioned, typically you want to start with the top down approach (memoization) and see if you can convert it to bottom up approach. In few / several cases, it may be easier to come up with bottom up approach and then convert it to top down just for fun. Definitely the difficulty in dp problems is formulating what are the states and what is the recurrence relation. But keep practicing, it'll sink it.\n\nAs a data point, I have done close to 140 dp problems; Again want to emphasize the number of problems you do is irrelevant and may vary between person to person, it's quality and understanding, so it's important to revise some problems to ensure it sinks in. But for me, I felt like things started to click and saw the patterns easily once I did close to 70 dp problems. Just for reference, I didn't come from a computer science background though did take data structures and algorithm course.",
            "Two things you have to develop the intuition for are the state variables and the recurrence relationship.\n\nThis blog has a very good write up about dp: https://codeforces.com/blog/entry/43256",
            "If you've got money to spare, get grokking the dynamic programming interview.",
            "I am not an expert but I am able to solve decent number of medium level DP problems. \nMy approach to DP is finding the solution for extreme values (base case) and recursively solve the problem.\nAfter creating the recursive DP solution (Memoization), I convert it do an iterative one, i.e., bottom-up approach since recursion is slow due to overhead.\n\nAlthough, you can solve a problem either bottom-up op top-down, it depends on the problem which one could be faster.\n\nAll the best.",
            "1.\tfigure out a shitty recursive solution \n2.\tslap a `@functools.cache` on it \n3.\tcongrats, you now have a top-down DP solution\n\nI\u2019m still pretty terrible at deriving bottom-up solutions but I find that I rarely need to in practice (~600 problems solved).",
            "Watch this video: https://youtu.be/oBt53YbR9Kk\n\nIt\u2019s by freecodecamp, kinda long but totally worth it. You don\u2019t have to watch the whole thing, only until you start getting the gist of it. But man, this video helped me so much.",
            "Recursion + Learning to build states. Also one thing that I've learnt in past few weeks is that there are some problems which are indeed a core point for most other variation problems. Longest Increasing Subsequence, Kadanes Algorithm, Min Cost path Problems, Longest Consecutive Subsequence, Divide & Conquer & 1D Linear DP problems.",
            "Ha I came here to post something similar. The DP section of Blind 75 is absolutely crushing my soul. Haven't gotten any of them solo. I'm always having to revert to watching YouTube and debugging other's solutions. \n\nI don't feel like my approach is working though. I get nowhere on these still.",
            "I am not very good at DP, but I gained a lot of confidence in a month. Initially, I followed a YouTuber named Aditya Verma and then did LC Card. I use memoization most of the time. There are only a few problems where you have to use tabular DP. The most important part of a DP problem is identifying a state in my opinion.",
            "This is By Far the best Dynamic Programming resource that I have ever found - It\u2019s a 5 hour long walkthrough of a Ton of problems from a Really good teacher.  I\u2019ve watched it a few times and it has helped me a ton.\n\nhttps://youtu.be/oBt53YbR9Kk",
            "Lube, lots of lube.",
            "I feel like one should start with backtracking and understanding how to brute force problems (DP) before trying to do the more complicated stuff like optimizations with top down and bottom up. \n\nThat is my approach at least. Without understanding brute force/recursion/backtracking it'll be really hard to get better at DP IMV",
            "Errichto has a series of dynamic programming videos on YouTube which is pretty good. Coursera competitive programming core skills course is also good. Not that I am good at it now, but at least with that I learned a bit.",
            "Leetcode has an entire course on Dynamic Programming and its really helped me. If you have premium I'd give it a shit.",
            "Look for patterns. But the silver bullet here is nothing other than practice",
            "Recent MIT Intro to algorithms course had really great content on Dp.",
            "write recursion first, then translate it to DP",
            "DP is '*really*' about leveraging a directed acyclic graph (DAG) property over a implicit subproblem graph (in fact, it is a necessary condition). Top down (memoization) and bottom up (tabulation) are in essence form forward and inverse topological orders over this graph (it gives you a idea on what computation relies on what other computation). Why does this help? Many similar subproblem patterns come up all the time. So if you abstract the details, you can look at a variety of problems from a birds eye perspective.\n\n&#x200B;\n\nIn the subproblem graph, you can think of the vertexes as states, and the edges as actions. There is inherently recursive structure, but unlike some recursive algorithms (divide and conquer), where the subproblems are far smaller, the structure in dp looks like every subproblem is only slightly smaller/larger than the predecessor problem (it looks \"overlapping\" depending on how you squint or decide to merge states).",
            "I start from the brute force solutions in recursive way. Once you have been able to do it, there's nothing more than just finding the caching, for the top down memoization. And if a top down memoization approach has been derived, you can remove the recursive call and just use a loop to make it bottom up.\n\nBelow are some ways I approach problems, hope it helps:-\n\nhttps://youtu.be/CzFqZCI2gto\nhttps://youtu.be/C9w8-zdzByk\n\nEdit: for the top down approach,the caching should always be on the bottom nodes, so that everytime the graph doesn't have to traverse till the end. Remember dp is just a DFS with caching techniques.",
            "I found the grokking the dynamic programming course to be extremely helpful for distilling DP into different sub-patterns. Definitely worth a look",
            "just compute the solution manually for size=1 input. Increase the size by 1. Compute the solution manually again. Increase the size by 1 again and compute the solution manually again. After you do this  for like 3 or 4 steps, you'll see a pattern.   \nIdeally you want to learn both top down and bottom up approaches. You never know which will be easier to come up with when you face a new problem",
            "For me starting with 1-D DP and then looking at 2-D DP helped. I like to break the problem down to recursion and then caching the answer. Asking questions like this helped me.\n\n1. what are the possible decisions I can do at this level?\n2. Are there anything I have know about the previous level for me to make my decision at this level?\n3. what are the base conditions?\n4. Is the problem similar to any known problems?\n\nI personally can't memorize so I always think in terms of recursion.",
            "Just one practice: Don't try to do everything at once. You might feel after watching a YT video, that screw recursion, and jump directly to tabulation (I tried to do this and this might work for 1D DP, but 2D and 3D DP will make you question your thinking.)\n\nYour order should be Recursion -> Memoization -> Tabulation ->Space Optimization\n\nTip 1: The best thing to do, just think of how you would solve it RECURSIVELY. The best thing about DP is that, it's a domino process, and the smallest domino (recursion) is the toughest to move. So, focus on solving a lot of problems using recursion first and if you are able to solve it, you can do it using DP.\n\nTip 2: Even after you did the recursive solution, don't be so happy that you submit it, LeetCode will pass just 3 testcases and throw TLE at your and then you'll cry. Memoize it, and then submit. Memoization is easy. Identify how many dimensions you need and you're done.\n\nTip 3: Start with 1D DP questions, that are easy to solve and you can identify patterns easily. Remember, DP is all about finding patterns (Optimal Substructure), and one quote by Love Babbar (my favorite DSA teacher on YT), that always works for me is *ek case solve kar deta hun, baaki recursion kar dega* which translates to *Let me solve one case, rest recursion will solve*.\n\nTip 4: My custom approach for boolean based questions of DP (the easiest types I might add), is to use integer as the memo array data type, and not boolean. You will have three cases which you can store, namely not solved (-1), solved but got false (0), solved and got true (1). This way you don't need a visited array to track your progress.\n\nTip 5: Practice HARD.",
            "start with 0 1 knapsack , and move on to similar type of problems ,you will start seeing patterns in dp. also you need to keep revising the concepts once in a while",
            "its memorization  DP problems are being depreciated though.\n\nthey're getting rarer and right now the market is hot and hr is pressuring interviewers to accept more people",
            "I was taught in school to first write the recurrence. That helped so much in understanding the logic of the solution, once you are the point of writing recurrence comfortably for every problem you face, the code will come naturally.\n\nAnother thing is to understand the different algorithm approaches. Like when do you use greedy vs DP, and what are the fundamental difference between divide and conquer vs greedy vs DP.\n\nAnd the most important thing is to really grasp the concept of optimal substructure.",
            "Stop fearing dp problems, for one, and stop obsessing over it. It's unhealthy.",
            "pornhub helps",
            "*snicker*",
            "I can only speak from the male perspective (bottom part of the meat sandwich to be more specific), but it really depends on your relationship with the other thruster, and your ability to manage your thrust frequency to resonate with the pelvic movements of other two participants. Done properly, the performance should feel something akin to performing on stage with good friends whom you trust with your life and soul as you zealously strive to climb towards the peak of **Mount Climax** through your combined efforts.",
            "It\u2019s all about the angles of insertion.\n\nPlease don\u2019t ban me mods, just warn me and I won\u2019t do it again.  I love r/LeetCode.",
            "https://discord.gg/JvWHp2gV\n\nWhoever need a community for group and problem discussion can join this discord server.",
            "I did the Educative Dynamic Programming course. It breaks up DP problems into 5 different patterns and explains each one. Definitely worth the money IMO.",
            "that's the neat part you don't\n\njk",
            "you can try following dp patterns which can be seen from the link I provided below or alternatively, view playlists of youtubers teaching dp.  \npersonally, I saw the videos of striver, a popular youtuber in India currently working as a SDE at Google Warsaw. That helped  me a lot to level up my dp skills  \n\n\nLink to the sheet: https://leetcode.com/discuss/general-discussion/1000929/solved-all-dynamic-programming-dp-problems-in-7-months",
            "Maybe you should learn some discrete math firstly\u2026and also some memorized searching techniques are necessary..Good luck, buddy",
            "DP is all about finding the correct recurrence that relations your current problems with the sub problems. A good way to visualize these sub problems with relation to the current parent problem is to draw a tree of recursive calls. This is pretty much a brute force which you can optimize with memoization.",
            "Step 1 : Get comfortable in recursion \n\nStep 2 : Get comfortable in backtracking\n\nStep 3 : Solve the question recursively\n\nStep 4 : Transform solved problem to use dp - Memoization.\n\nStep 5 :  Transform solved memoized problems to Tabulation.\n\nYou can skip the Tabulation for the time being(only for a short duration of time), but you must feel confident in solving recursion problem atleast\n\nThen as my fellow leetcoders have mentioned, practice practice practice, more like grind grind and grind\n\np.s. : I've decent amount of DP knowledge, not a noob neither a dp god.",
            "Unpopular opinion: Study some of the theory for god sake. Pick up a text book or something and look over the principles. It will help recognize patterns when solving problems.",
            "I practiced DP on leetcode explore card for DP: https://leetcode.com/explore/learn/card/dynamic-programming/",
            "I watched this video three times over and this was literally how I finally understand DP. \n\nHope this helps you the way it helped me!\n\nhttps://youtu.be/oBt53YbR9Kk",
            "We do not \ud83e\udd72",
            "Nice summary. Learning by pattern and develop intuition is definitely the way to go. Check out my other thread on pattern-based DP practice list with video walkthrough:\n\n[https://www.reddit.com/r/leetcode/comments/14o10jd/the\\_ultimate\\_dynamic\\_programming\\_roadmap/](https://www.reddit.com/r/leetcode/comments/14o10jd/the_ultimate_dynamic_programming_roadmap/)\n\nThe list goes from easy to complex and questions are categorized by state transitions.",
            "Practice problems and try to write down the technique that you used (0/1 knapsack, DP on subsequences, palindromes, ..)  \nhere is a course helped with in my journey with DP:  \n[Striver's Dynamic Programming Series | The ULTIMATE | The BIGGEST | Teaser #shorts - YouTube](https://www.youtube.com/watch?v=FfXoiwwnxFw&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY)",
            "Don't do DP too much otherwise, you will think every problem is a DP problem :D \n\nYesterday I bombed it, mistaking a simple sliding window problem with DP and there was no one to stop in because it was an online assessment. I kept going and going and going with no success and time ran out.",
            "To master DP, you first need to master recursion and then backtracking. DP is just just multiple recursion call with ability to remember past calls. So, Take a pen and paper and trace out how recursion work, especially multiple recursion. Also, learn how to write recursive function using method like Leap of faith and defining sub-problems",
            "Just the way you learnt and mastered cycling and swimming.\n\nPractice.",
            "For interviews at faang is it sufficient to give the recursion with memoization solution to dp problems? Or is it always expected to provide the tabulation bottom up approach as the solution? Just wanted to know.\nUsually recursion with memoization comes easier to me, but converting it to the bottom up tabulation is a bit difficult to reach.\n\nCan someone comment.\nAny resource that shows how to convert the recusive memoization to tabulation would be a great.",
            "We tried categorizing each type of famous DP problem in this course. Will try adding more to it. Hopefully helps someone. \ud83d\ude0a https://www.udemy.com/course/ai-wont-teach-dynamic-programming-this-way-java/?referralCode=115F617A0211044D34B2",
            "start with recursion.",
            "I've found Alvin's courses extremely helpful! there's free video on YT - [https://www.youtube.com/watch?v=oBt53YbR9Kk](https://www.youtube.com/watch?v=oBt53YbR9Kk) . He starts with very easy to grasp concepts and builds the difficulty level on top of it  as you progress. Once you're done with free videos, you can check out his course, Structy! I'm currently preparing for interviews, and I find this more helpful than just blinding grinding LC, because I can never proceed if I don't 'get' the concepts!",
            "Lol I completely misunderstood what you meant by dp \ud83e\udd23\ud83e\udd23",
            "Ask your mom",
            "lots of hip thrusting practice",
            "I got better at double penetration (DP) by ensuring I think about something else before... hence lasting longer",
            "I have gone through this playlist it really helps me understanding that how should we identify ,approach DP problems .\nhttps://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go",
            "[https://www.youtube.com/watch?v=oBt53YbR9Kk](https://www.youtube.com/watch?v=oBt53YbR9Kk) \ud83d\udc4d",
            "Start with the Climbing Stairs problem. Really put effort into fully understanding it and you'll be thinking in a DP sort of way. Once you understand the basic idea, other DP problems will become a lot more doable.",
            "[removed]",
            "do many questions recursively top down first.\n\ndo many DPs like that, then re-do all the same  questions bottom up",
            "If you understand the mathematics behind it you can just visualize it and go from there.",
            "practice the right question in the right way",
            "For me it was https://youtu.be/r4-cftqTcdI and https://youtu.be/OQ5jsbhAv_M and https://youtu.be/KLBCUx1is2c",
            "Try getting recursive solution right",
            "this is a good blog post - https://www.freecodecamp.org/news/demystifying-dynamic-programming-3efafb8d4296",
            "If you know Hindi then watch this playlist\nhttps://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go",
            "VISUALIZE THE DAG",
            "leetcode",
            "Going over the following resources could help a lot:.  \n\n- Introduction to Algorithms by Cormen, this book lays a good foundation on dynamic programming.\n\n- Some live interview questions on \nwww.youtube.com/codageaider \n\n- geeksforgeeks.com",
            "Try AlgoExpert, solutions are better explained",
            "For me once I started to see the sub problems it started to make sense. Really try focus on how could I break this down into a small problem that is easy to understand. \n\nHouse Robber- if there was just (1,2,3) houses.\nFibonacci\nPascals Triangle",
            "Solve it recursively brute force first. Then, work on optimizing it",
            "I think get good at the memoization problems first. Do the recursive solution first. Then see if for an example you end up making the same calls repeatedly and memoize. \n\nThe next step is to look at similar problems and think: if I make the recursive call does the solution for my current input build on that result? Is there a \u201cbase case\u201d that everything can build from?",
            "Is DP design process? What does DP stand for? Asking for a friend who is also intrigued by DP.",
            "I'm still on the DP journey but neetcode's website and YT channel have been super helpful. His solutions are very clean and easy to understand. And of course attempt the questions on his site tagged as DP before looking at solutions.",
            "u/royboypoly could be helpful here.",
            "OP, since its been close to a year, which resource did you end up folllowing and any reviews? :) or are you still memoizing?",
            "Check out Build A Dev's staff article on Dynamic Programming in Javascript. Its a pretty effective and concise read:   \n\n\n[https://medium.com/@buildadev/dynamic-programming-in-javascript-67311ffe3100](https://medium.com/@buildadev/dynamic-programming-in-javascript-67311ffe3100)",
            "I think getting better at thinking recursively is the first step",
            "Thanks a bunch for the follow up edit man, I'm sure it's gonna help me a lot",
            "Get good at observing patterns.\nWrite a lot of edge cases before solving",
            "Asking ChatGPT for guidance when I get stuck: https://github.com/Liopun/leet-chatgpt-extension",
            "Hashmap is the same as dp. I started doing dp by converting hashmap memo do dp\\[i\\]\\[j\\], and going from bottom up to top down approaches.",
            "Understand the state transition and initial state clearly. And do much practice.",
            "Use dp array to store dp tips and tricks for doing dp. Check the dp matrix for if the you have already learned a tip / trick related to the current question, everytime you encouter a question that could use dp. Ya dig?",
            "Most of the DP problems are based on one common things and that is solving smaller tasks and then reusing those answers to build bigger answer. So I would suggest, at the begging, take simpler problems and try to see(before even writing a single line of code), what is  the smallest problem that you can solve trivially which would enable you to solve a bigger problem. Once you see the pattern try implementing a recursive solution for this problem. This solution would be just a simple recursive way to solve the problem. Once you solve it try to submit this problem and you would see some of the test cases pass and some gives out TLE. At this point you would know that you are on the right direction, only the solution is little slower. Now decide what is your state control variable. For example in Fibonacci, the current N is the state control variable. Similarly you ma have more than one state control variable. If there is one state control variable it is called 1 dimensional DP while if there are two variables, it is called 2 dimensional DP. Just recognise the state control variable and then use the state control variable to implement memoisation. Once done, if you submit the same problem again, you you see no TLE and most of the test case would pass. Congratulations! You have implemented DP solutions. For first few problems, focus on this approach. Implement a recursive approach and then memoise it make it DP. As of now, DON\u2019T TRY TO IMPLEMENT TABULAR OR BOTTOM UP DP. Once you become master solving DP problems with top down approach using recursion and memoisation, then slowly move towards tabular or iterative or bottoms up dp. \n\nThis is how atleast I got better at it.",
            "Make sure you really understand the building block DP problems.\n\n- Fibonacci \n- LIS\n- LCS\n- Knapsack\n\nThen start doing variations of those\u2026\n\nRepeat until you feel like it sort of clicks.",
            "just spent all day trying to figure out how to write LIS, longest increasing subsequence, using top down with the recurrence I wrote. Recurrence seems wrong and I have no clue how to start by writing the bottom up solution. \n\nI should be making a portfolio or applying to jobs instead of spending hours trying figure out DP at this point. Shoot me.",
            "To get good at dynamic programming, start by understanding the concept and studying problem patterns. Solve simpler problems first, analyze time and space complexity, and practice with a variety of dynamic programming problems. Study existing solutions, break down complex problems, and build on previous solutions. Refactor and optimize your code to improve efficiency. Regular practice and a solid understanding of the underlying principles will help you become proficient in dynamic programming. We all did it, so can you ;)",
            "I'm too stupid to get good at DP bruh",
            "Doing more. You really have to do a lot of DP to get good at it. \n\nFor your reference, at one point I did 400 leetcode and felt like I have done a lot but still can't figure out DP. Then now at around 800 leetcodes I feel much better with DP. I still find it hard sometimes but most of the times it's so obvious I just start writing and finish in like 5 minutes.",
            "At the beginning, I had the same question in mind. All I did was practice a lot of problems on DP. I would suggest you to do the same. At a point in the process you will get a click in your mind. until then you have to practice practice practice.... by understanding the concepts.",
            " !remindMe in 4 months",
            "Follow  striver's dp playlist  it will help your brother...",
            "And thanks for passing all this on to people just starting dp \ud83e\udee1",
            "A tad of self-promotion, but I have used this 6-step framework [https://www.youtube.com/watch?v=rb6QAh5e5Dw](https://www.youtube.com/watch?v=rb6QAh5e5Dw) to solve most of the DP problems. I hope you will find it useful",
            "I am giving you a very crude advice here.\n\n1. Become good at Recursion.\n2. Become good at caching the recursive calls.\n\nI am giving you very crude advice here.",
            "By working with your mom...and your dad?",
            "Make sure to comprehensively study the dynamic programming chapter in *Introduction to Algorithms* by Cormen and Rivest. Aim to solve each problem in that section in detail.",
            "Dynamic Programming Patterns: https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns\n\nthis list helped me",
            "b)  \nYou are the captain of a spaceship and you have been assigned a mission to explore a distant galaxy. Your  \nspaceship is equipped with a set of engines, where each engine represented by a block. Each engine requires a  \nspecific amount of time to be built and can only be built by one engineer.  \nYour task is to determine the minimum time needed to build all the engines using the available engineers. The  \nengineers can either work on building an engine or split into two engineers, with each engineer sharing the  \nworkload equally. Both decisions incur a time cost.  \nThe time cost of splitting one engineer into two engineers is given as an integer split. Note that if two engineers  \nsplit at the same time, they split in parallel so the cost would be split.  \nYour goal is to calculate the minimum time needed to build all the engines, considering the time cost of splitting  \nengineers.  \nInput: engines= \\[3, 4, 5, 2\\]  \nSplit cost (k)=2  \nOutput: 4  \nExample:  \nImagine you have the list of engines: \\[3, 4, 5, 2\\] and the split cost is 2. Initially, there is only one engineer  \navailable.  \nThe optimal strategy is as follows:  \n1. The engineer splits into two engineers, increasing the total count to two. (Time: 2)  \n2. Each engineer takes one engine, with one engineer building the engine that requires 3 units of time and the  \nother engineer building the engine that requires 4 units of time.  \n3. Once the engineer finishes building the engine that requires 3 units of time, the engineer splits into two,  \nincreasing the total count to three. (Time: 4)  \n4. Each engineer takes one engine, with two engineers building the engines that require 2 and 5 units of time,  \nrespectively.  \nTherefore, the minimum time needed to build all the engines using optimal decisions on splitting engineers and  \nassigning them to engines is 4 units.  \nNote: The splitting process occurs in parallel, and the goal is to minimize the total time required to build all the  \nengines using the available engineers while considering the time cost of splitting",
            "I need to get better at DP, thanks for this post.",
            "Aditya Verma",
            "So In order to get good at dynamic programming questions you solve smaller dynamic programming questions and then memoize them.",
            "Just practice, as much as you can and you will understand the DP pattern. This is a good list of DP problems for beginners.\n\nhttps://leetcode.com/discuss/study-guide/662866/DP-for-Beginners-Problems-or-Patterns-or-Sample-Solutions",
            "[removed]",
            "Memoize*",
            "I used to feel this too. Doing variety of problems and over and over again you'll get hang of it.",
            "I thought DP wasn't an interview heavy concept so just put it on the side for now?",
            "This is a great mental model. Do you think every DP problem can be solved recursively tho?",
            "Yeah same here. First come up with a recursive solution, then think of how to avoid repeated computation when your function is called with the same params. It usually leads to have some sort of a \u201cmemo\u201d table which is essentially a dp table when used in iterative approach",
            "agreed but it's not necessary that everytime you need to store all the changing variables , some of them become memory hogging too, just look at Problem Maximum Gain from Google Kickstart 2022 Round D and you'll get to know why we used prefix sums and not recursive DP",
            ">kinng9679\n\nhow do you first come up with the mental model /recursive solution though? any links that explain this?",
            "Aditya Verma OP!",
            ">Prctaiec. Prcatiec. Practiec. Practice.\n\nokay, but how you solve permutation problems? Recently been enjoying the backtracking approach. I think originally the 'cascading' append item approach made more sense, but not as translatable to the variants",
            "This. Highly need to emphasize this. \nAlthough this is true for solving any type of coding problems, it is essentially necessary for something like DP where a lot of things go behind the scenes when you're writing a recursive code. \n\nIn each problem you solve, its important to have a clear understanding of the overlapping subproblems before actually trying to memoize the recursion. In that way you'll know why DP was required here.\n\nFully absorb a problem before moving to the next.",
            "it is for premium user. Is there any alternative to access it.",
            "this link is dead now",
            "I second this, totally worth the investment (around 50 bucks I think)",
            "haha, good solution",
            "LOL I'm also at 595 solved and have done this for most DP problems. My process has been: \n\n1. Figure out the base case \n2. Figure out the recurrence relationship \n\nHit that bitch with an '@cache' and it works 90% of the time.\n\nNo idea how to derive any bottom-up solutions (but going to learn soon).",
            "Late reply, but totally seconding!",
            "I enjoyed this video too. Even though I have done a lot of DP questions, this is a great way to pull everything together and get rid of some of the cobwebs in your mind.",
            "With all due respect, before understanding DP by Aditya Verma, you have to understand his accent and his handwriting first. I can't even recognize a single word.",
            "\ud83d\udca9",
            "Link?",
            "I want to know more about DAG leveraged to DP. Please share some resources.",
            "Awesome!",
            "any example you can illustrate using this technique for the \"2-D\" kind of DP problems?",
            "Is there a recommendation to start learning how to write the recurrence? I found that learning about recurrences and visualizing them in an induction like proof really helped me with recursion. *I still can't write a proof though, but visualizing the problem like the proof really helped.*   \n\nwhat's the best way to start learning to write recurrences?",
            "Any starter resource or any websites based on this idea?",
            "\ud83d\udc40",
            "this is the way!",
            "happened to me today (luckily a mock interview lol). I had the right solution but kept thinking \"no, this can't be right - this HAS to be a DP!\"",
            "Just the way to did learn and master'd cycling and swimming. \n \npractice\n\n***\n\n\n\n^(I am a bot and I swapp'd some of thy words with Shakespeare words.)\n\nCommands: `!ShakespeareInsult`, `!fordo`, `!optout`",
            "Climbing stairs is only one 'type' as in the 0/1 knapsack problem right? Is there a good resource for other types also?",
            "start with fibonacci and make sure you know top down, bottom up, and space optimized",
            "Hi, I just updated my post to share more",
            "I will be messaging you in 4 months on [**2024-01-10 07:14:44 UTC**](http://www.wolframalpha.com/input/?i=2024-01-10%2007:14:44%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/leetcode/comments/sv82tg/how_do_you_guys_get_good_at_dp/jzxe2np/?context=3)\n\n[**1 OTHERS CLICKED THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fleetcode%2Fcomments%2Fsv82tg%2Fhow_do_you_guys_get_good_at_dp%2Fjzxe2np%2F%5D%0A%0ARemindMe%21%202024-01-10%2007%3A14%3A44%20UTC) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%20sv82tg)\n\n*****\n\n|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|\n|-|-|-|-|",
            "This is one of the funniest comments I've seen on reddit in a while, congrats sir/madam",
            "Brilliant",
            "bro explained dynamic programming with dynamic programming",
            "careful he is a hero",
            "lmao, good one",
            "\ud83e\udd47",
            "this is gold",
            "Oh, this is good!",
            "AHHHH",
            "Damn that\u2019s good.\n\nTwo years later. But damn. That\u2019s good.",
            "good joke :v",
            "Or have some better CPU!!!\n\nThe solution space of DP problems can be visualised using graphs or trees. So the basic idea is either you search and find an optimal path, or you expand the graph by connecting new links and nodes to optimal point of contact or you build the structure first and replace nodes and links with new optimal links.\n\nKeep the above statements when you approach a DP problem!!!",
            "lol",
            "RemindMe! 5months learn dp",
            "RemindMe! 1month learn dp",
            "RemindMe! 6months start dp",
            "what I personally feel is of you can develop the top down approach then it becomes much much easier to code the bottom up approach since bottom up requires base cases to be set and then we can further Fill up the tables with the same call that we make in the recursive call that's why making recursive tree becomes important sometimes in a top down approach",
            "It is memorizing and not memoizing. They meant to memorize the tricks.",
            "Yes. By definition, dp is solving multiple subproblems. However, recursion may causes TLE!",
            "Yes and thats the best way to come up with a solution at first, cause it's the only one that's intuitive, basically you can think of the inputs of your recursive function as \"state variables\" these are the ones that change with each state. If you have 1 state var, you need to have a 1d dp array for bottom-up, if you have 2 vars you need a 2d grid, if you have 4 vars you have a 4 dimensional dp problem, good luck not getting lost in the indexes there \ud83d\ude03. Basically you're moving between states means you are tweaking these variables, either by recursing, doing something like max(input[i]+f(i-1), f(i-2)) or doing dp[i]=max(input[i]+ dp[i-1], dp[i-2]. Your question mostly comes down to identifying these states, or you can think of them as choices you need to make at every traversal, and what variables you carry that are dynamic in respect to state change, sometimes it seems that you need to carry 3 but 2 is enough, for example in 2-string dp problems.",
            "It depends. In general, the recursive solutions are cleaner but the iterative solution may have the same Time complexity (assume the recursive top down solution is memoized) and similar or better space complexity due to overhead of the function call stack in the top down recursive approach.",
            "Yeah. You should first get good at recursion, then get good at recursion + repeated work that can be memoized. Then get good at recognizing the base case that the next case builds off of (bottom up).",
            "Yes. If you find it difficult to understand and if you understand hindi. You can watch Aditya verma's dp playlist on dp. He explains all dp problems using Recursion and this same mental model.",
            "Yes",
            "Re-read my comment.",
            "Understanding DP imo is easier",
            "Yeah! It was so bad",
            "The textbook Algorithms by Dasgupta, Vazirani et al talks about this approach.",
            "Lookup \u201cIntroductions to Algorithms\u201d by CLRS",
            "Haha. I bombed Amazon OA thinking it was DP. I was practicing DP all day long day before \ud83e\udd26\u200d\u2642\ufe0f",
            "Man it has been a while now but the most helpful thing that has stuck to my memory is to go through the blind 50 or blind 75 using the leetcode patterns website, look for the DP tagged questions, and watch Neetcode\u2019s explanations for the first like 5 or 10 on YouTube, and you\u2019ll probably start to get the hang of it",
            "how to be good at dp ? just do it xD",
            ".org",
            "I will be messaging you in 5 months on [**2023-09-10 07:12:59 UTC**](http://www.wolframalpha.com/input/?i=2023-09-10%2007:12:59%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/leetcode/comments/sv82tg/how_do_you_guys_get_good_at_dp/jfo3vhb/?context=3)\n\n[**CLICK THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fleetcode%2Fcomments%2Fsv82tg%2Fhow_do_you_guys_get_good_at_dp%2Fjfo3vhb%2F%5D%0A%0ARemindMe%21%202023-09-10%2007%3A12%3A59%20UTC) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%20sv82tg)\n\n*****\n\n|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|\n|-|-|-|-|",
            "I will be messaging you in 6 months on [**2024-08-01 09:25:47 UTC**](http://www.wolframalpha.com/input/?i=2024-08-01%2009:25:47%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/leetcode/comments/sv82tg/how_do_you_guys_get_good_at_dp/koew9xn/?context=3)\n\n[**CLICK THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fleetcode%2Fcomments%2Fsv82tg%2Fhow_do_you_guys_get_good_at_dp%2Fkoew9xn%2F%5D%0A%0ARemindMe%21%202024-08-01%2009%3A25%3A47%20UTC) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%20sv82tg)\n\n*****\n\n|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|\n|-|-|-|-|",
            "And he meant to make a joke.",
            "bottom up op",
            "touche",
            "I think they meant to ask what your thought process is when practicing permutation problems. What methods have you've tried, what methods do you currently use -- as well as any interesting tidbits you may have realized along the way. (What you liked and didn't like type stuff)\n\nThey'll learn many of those things as they practice themselves, but the question was more about... you, your journey, and what you learned/like/dislike; because the value in the question is your specific perspective.\n\n&#x200B;\n\nTyping all that out made me really want to add in a 100 other questions of my own but I'm holding off... Soooo I really need someone to take a moment to appreciate me right now for not turning this into a hundred page essay of nothing \"but why\" questions.",
            ">Lookup \u201cIntroductions to Algorithms\u201d by CLRS\n\nHeyo! I bought the book -- going through it and I'm only slightly less braindead",
            "That site and AoPS were my favorites in high school. I was legit addicted.",
            "+ a real concept used when implementing a DP solution\n\n\nhttps://en.m.wikipedia.org/wiki/Memoization",
            "Well, If you know top-down, then it is not that difficult to convert the same into bottom-up.\n\nRecurrence remains the same. Just assign the base cases to the table first."
        ]
    },
    "Finally achieved a daily streak of 300!": {
        "title": "Finally achieved a daily streak of 300!",
        "score": 82,
        "url": "https://www.reddit.com/gallery/1dlp9dp",
        "content": "",
        "num_comments": 18,
        "comments": [
            "Amazing rating. My goal is to get to Knight just like you have. Can you send your profile if too private maybe through DM and any tips to improve?",
            "How to start ?",
            "Does the 3819 mean that's the total number of problems on leetcode?",
            "Awesome job bro! Consistency is king!",
            "Congratulations. I recently started doing this. I am at 16 but want to maintain this streak forever. I feel like this is building my consistency.",
            "At what ratings did you get the knight badge ??",
            "I just started with Leetcode. May I ask how you go about obtaining badges?",
            "Check dm bro",
            "Start with the easies from topics like string, arrays, etc. Then move onto mediums after a while. I would recommend solving atleast one question daily. It would be even better that one question is the daily challenge. Ofcourse, you can solve more daily if you want to.",
            "Yes",
            "Thanks. And you are correct.",
            "Thanks. And yes steak helps a lot to maintain consistency. \n\nPs. I also want to maintain my streak forever",
            "It's around 1850",
            "just do stuff.",
            "You can earn badges from various things like being active for x(50/100/300) no of days in the year, completing all daily questions in a month, achieving certain rating, etc",
            "Am currently at 1760 I think the next 4 contest would make it",
            "Yup you can do it. Good luck!"
        ]
    },
    "Amazon Behavioral Tests are just ridiculous": {
        "title": "Amazon Behavioral Tests are just ridiculous",
        "score": 184,
        "url": "https://i.redd.it/byo2x2d7c08d1.png",
        "content": "",
        "num_comments": 41,
        "comments": [
            "After all of that struggle with often hard algorithm questions(even for interns) they now  insist on having these behavioral questions for couple hours....What kind of guys even allowed all of these psychological pseudo science bs to get so deep into industry",
            "This is most effective for culling bozos. The smaller they can make the interview pool the higher they \"raise the bar\"",
            "As an ex-Amazonian reading this shit gave me slight anxiety \ud83d\ude25",
            "This is all part of training an AI to replace programmers.",
            "Unpopular opinion: this test is bullshit",
            "Lol, they must have data that shows it works for them, but you know this initiative was someone\u2019s VP promotion push or something so the data is probably sort of bs too",
            "Rather have this than think of some script to recite to someone in a video call about what my personal weakness is. But yeah this is bs. A couple questions, 10 minutes wouldn\u2019t be to bad but an hour long quiz is terrible",
            "As someone who has worked there as a dev, trust me, you don\u2019t want to work there. unless your goal is to have a FANG on your resume and leverage it into a better job. That\u2019s just my opinion.",
            "Walk in the park compared to their coding questions",
            "is there a guide or something on how to answer these? how can you map the correct answer to the leadership principles (or vice versa)?",
            "It's so fucking stupid",
            "I'm sorry to say but if you thought your career was going to look anything remotely like leetcode and not some product manager trying to push an insane timeline that you are going to have to figure out how to make work, you are in for a swift kick in the pants.",
            "Simpler than optimizing their stupid drone delivery questions lmao",
            "I thought it was kinda fun lol",
            "They are looking for koolaid drinkers.  The kind of people who dont flinch when they see the compliance team dragging dead bodies out of a conference room.",
            "I think their principal questions are weighted the same as the technical questions before the hiring committee. Know who your perspective employers are before applying.",
            "Suck at the behavioral and you're not getting hired. Just saying.",
            "Why do you think this is stupid and doing an absurd amount of leetcode isn\u2019t?\n\nBoth are man-made ideologies of how tests should be taken.\n\nBoth are not used in real life during employment as much as you would like to believe.",
            "can someone tell me answer to this",
            "Dm me if anyone needs help with coding exams or coding interviews",
            "Gotta keep the arts majors employed somehow.\u00a0",
            "Wait until you find out the hardest part of the job isn\u2019t wrangling the CRUD app your team uses, but rather communicating with a bunch of other teams who don\u2019t know what they want and also don\u2019t understand how anything works.",
            "People focus WAYYY too much on technical and completely forget that at most companies, behavioural is far more important.",
            "What better job would you leverage it for instead?",
            "If you find one, let me know",
            "> is there a guide or something on how to answer these? \n\nUh, yeah, it is called \"software engineering\". :-)\n\nYou need to learn to talk with non-technical people, understand the problems they face, have the confidence and tact to tell them (diplomatically) when they are wrong, and design a solution even when the problems aren't all cute well defined DS&algos trivia with a beautiful well defined answer.",
            "hate to agree with the Downvoted One, but he's right.  test is a bit much imo but it does give them a sense of your decision making process and you an idea of what company you will be joining.",
            "can't agree more",
            "IMO the Amazon simulator is _waaaayyyyy_ more of an accurate model of what professional software engineering looks like than the technical screen.\n\nSure, it has limitations, most glaringly that it is entirely one-sided. Plus the problems are all still well defined textbook problems designed to have one correct answer. But still.",
            "I don\u2019t think that\u2019s true although it is important. 75% of onsites are technical and the remaining is behavioral",
            "How so? You can teach someone how to prioritize fairly easy",
            "No. A technically incompetent nice guy is worse than a very competent asshole. The only \"behavioral requirement\" should be \"don't be an asshole\". And yeah that vague. With no robotic guidelines and some mistaken statistical inferences as to what's more likely to be a better \"answer\".",
            "It opens a lot of doors. For me I was able to pick a cush remote job that allowed me to prioritize my work/life balance. Much happier.",
            "Do you really need a guide on how to mimic a brown-noser? \n\nJust think of any answer that would be good for the big boss and good for the company, but bad for you and bad for your team mates. \n\nThat's it.",
            "Technical questions are just behavioural questions under disguise.\n\nThe OA? Sure, I will agree the technical questions are just techinical questions.\n\nThe onsites care far more about how you communicate and how clear you are when speaking. They want to put you under pressure and see how you do. That is the essence of a technical interview and always has been.\n\nPlenty of people get into tech companies without solving technical rounds optimally. It's mostly just about communication and if you can make the interviewer like you as a person.",
            "Sure, but there\u2019s a middle ground too. Give me the technically okay nice guy over the very competent asshole every day",
            "Does it pay you as much as what ya were making at Amazon? Do ya feel ya are missing out in that way?",
            "Obviously no one's asking how to answer questions that are stupidly obvious, like\n\n\"What's the definition of a good worker?\n\nA) Someone who works on the weekends.\n\nB) Someone who never works and goofs off.\"\n\nNo one's asking for advice on some guide on whether A or B is the expected \"correct\" answer.\n\nBut for questions that have more nuance, the issue is that the optimal algorithm isn't as simple as \"pick the answer that's good for the boss and the company\", because the problem is precisely identifying which answer is good for the boss and the company.\n\nbut like, go off ig",
            "no no, you\u2019re only supposed to max your algorithmic problem solving ability.\n\nno points go into charisma, nor do they go into basic communication or emotional regulation\n\ncome on dude, get with the program-being socially inept and egotistical is how you WIN!",
            "Tc or gtfo",
            "Sure, I agree, but that's my point. The behavioral aren't realy more important and should be a binary classifier - Asshole or Not Asshole. \n\nPeople shouldn't fall into some behavioral patterns that some ethereous corporate entity deems good. \n\nSure private industry private rules. But I would encourage  people on the employee side to reject these things."
        ]
    },
    "Bruteforce -> optimized ": {
        "title": "Bruteforce -> optimized ",
        "score": 214,
        "url": "https://i.redd.it/7rf3wrsm2z7d1.png",
        "content": "https://www.reddit.com/r/ProgrammerHumor/s/K7AJi1vHmJ",
        "num_comments": 7,
        "comments": [
            "I have once coded a O(2^n!)",
            "Let me just throw in @lru_cache(none) and resubmit again.",
            "At least it works............",
            "Lmao",
            "Were you solving world hunger or what?",
            "we don't know yet it is still checking",
            "P != NP"
        ]
    },
    "Received referral from Meta": {
        "title": "Received referral from Meta",
        "score": 54,
        "url": "https://www.reddit.com/r/leetcode/comments/1dlk2kn/received_referral_from_meta/",
        "content": "A friend just referred me. The email said to complete the referral form within 30 days. How long does it normally take from referral to (assuming successful) screening interview? I'm only 40/150 in neetcode 150  and 25/75 in Blind 75, don't feel even nearly ready - I might be able to solve a Medium on my own but it'll take me 30+ minutes and with many retries, I understand I need to be in a position to get an optimal working solution in less than 20 minutes at first try. I see myself far away from that.\n\nMaybe I could be ready in 3 months, given that I can't practice more than 3 hours a day - have a job and 2 kids. I'm a seasoned engineer ( +10 years exp ) but I've never had to go through leetcode style interviews before. Would it be possible to fill the referral form in 30 days and aim to do the screening round at a later date?",
        "num_comments": 7,
        "comments": [
            "Sorry to say this but getting a referral does not guarantee an interview these days. I have been referred by my spouse at a FAANG company as well but still haven\u2019t been contacted by a recruiter. Go ahead and complete the form and cross your fingers. It\u2019s brutal out there.",
            "Referrals work at meta. A recruiter reached out to me 2 weeks after I applied with a referral. But at that time they were not hiring for E4 roles.",
            "Sorry to spoil this for you.I recieved a referral from Google and Amazon, got rejected on the application phase only. Even after being a knight.",
            "No need to apologize :) - I understand there\u2019s no guarantee, which is why I wrote assuming the referral is successful. Worst case is no interview, but what about best case?",
            "Same. Got refferal, then rejected after 3 days and the e4 role is no longer there.\u00a0",
            "Best case is you get hired, work there for years, eventually get promoted to CTO. Once Mark retires, he promotes you to take over as the CEO of Meta.",
            "\u2b06\ufe0fBro took the question to it\u2019s literal meaning"
        ]
    }
}
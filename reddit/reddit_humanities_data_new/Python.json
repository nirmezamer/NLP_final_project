{
    "Sunday Daily Thread: What's everyone working on this week?": {
        "title": "Sunday Daily Thread: What's everyone working on this week?",
        "score": 3,
        "url": "https://www.reddit.com/r/Python/comments/1dgv2s3/sunday_daily_thread_whats_everyone_working_on/",
        "content": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show & Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f",
        "num_comments": 15,
        "comments": [
            "Coded Streamlit app, attempted to recode using Django this am - took way too long but have 50% features. Oddly took a bit less time with Vite/JS and was prettier. So\u2026 Streamlit is good enough. Every incremental change in the other two takes 5x or 3x as long.",
            "Im trying to break into a technical role right now, so doing a lot of projects in a few languages to put on my portfolio right now, but for python I just wrote a script that clears temp files, kills zombie processes, checks cpu and memory usage and purges if its over a set amount, and reboots my touch bar on my Mac (MacBook pro M1 users I'm sure you know this issue) - also scheduled this to run in the evenings using cron and have a documented logging file to go with it, pretty happy with it so far, but any other project ideas would be great !",
            "I've been building [https://dataline.app](https://dataline.app) for the past year or so, looking for testers to get feedback now \ud83d\ude04\n\nIt's an open source and privacy-focused text to SQL + chart + more tool. Supports CSVs, SQLite and Postgres data sources, with more to come.\n\nNot sure which direction to take it in next, but I'm really happy with what we have so far. Please reach out if you try it out \ud83d\ude42",
            "Building Pharmacy management system using Django, with user auth, medication database, payments, notifications about stock and etc.",
            "About to start putting together a developer guide doc for PyPDFForm since there are users requesting it.",
            "Hi, I just finished a little tennis siumulation project and would be glad to get some feedback. I've been coding on and off for a few years, but never commited to finishing a project or going very far past demos. I'm quite pleased with the results and hope to continue making little games/simulation.\n\n[https://github.com/Ravensberg/ATP-Simulation](https://github.com/Ravensberg/ATP-Simulation)",
            "I figured this was the best place, but there's a game on Steam called \"The Farmer Was Replaced, \" a Python-adjacent coding game (the save file uses .py files) to teach you Python by farming and unlocking different functions.  \nIt starts with just doing harvest() over and over manually, then eventually gives you if/for/while loops, dictionaries, and def functions. and so on, as you grow your plants. Very Cool. Great intro to Python/coding in general though\n\n[https://store.steampowered.com/app/2060160/The\\_Farmer\\_Was\\_Replaced/](https://store.steampowered.com/app/2060160/The_Farmer_Was_Replaced/)",
            "If anyone would help I'm not sayin no as I want to to an Egyptian game call screw It's a card game multiplayer 4 players I also want it to be online I speak both Arabic and English I can teach you how to play and probably you will like it as 97%",
            "I'm working on a syntax/semantic validation tool for YAML documents.  It's a two part project. The first part will take a description of what your YAML document looks like and will validate any YAML document against the description.  It will check both the syntax of your document as well as the semantic aspect of your document.\n\nThe 2nd phase of the project is a tool that will take any YAML document and automatically create the validator description document.",
            "Learning Python Turtle, I am pretty good at it but not that good!",
            "I'm making a streamlit app as a first foray into web apps. Besides it being so different to what I'm used to, it's not very pretty! I was thinking after I'm done with the functionality to convert it to something I can make fit my vision.\n\nYou got any tips? Mind if I hit you up with a question once in a while?",
            "Streamlit is driver towards AI/ML/Data related apps. Have you made similar? Or different?",
            "i'm doing the same but with pyside6",
            "Sure! Take a look at my poorly commented repos at GitHub: DrDavidL",
            "Thanks, will do"
        ]
    },
    "Saturday Daily Thread: Resource Request and Sharing! Daily Thread": {
        "title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
        "score": 4,
        "url": "https://www.reddit.com/r/Python/comments/1dlig0j/saturday_daily_thread_resource_request_and/",
        "content": "# Weekly Thread: Resource Request and Sharing \ud83d\udcda\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! \ud83c\udf1f",
        "num_comments": 0,
        "comments": []
    },
    "I made a little Python quiz for interns and new Python developers at my company": {
        "title": "I made a little Python quiz for interns and new Python developers at my company",
        "score": 329,
        "url": "https://www.reddit.com/r/Python/comments/1dkz4gv/i_made_a_little_python_quiz_for_interns_and_new/",
        "content": "I put this quiz together to help create conversation for interns and new python developers at my company. Its based on the content from one of my favourite books ([Fluent Python](https://www.oreilly.com/library/view/fluent-python-2nd/9781492056348/)). I hope you enjoy it!\n\n[Quiz](https://us.idyllic.app/quiz/hpea2jl39w-how-well-do-you-understand-python)",
        "num_comments": 110,
        "comments": [
            "I mean, strictly speaking, \"self\" is a convention, not a feature of the language. There's nothing stopping you from defining\n\n```\nclass Foo:\n   \n    def __init__(this_shit, value):\n        this_shit.value = value\n```",
            "Nice quiz! 18/20, the question about the ABC language was quite puzzling :)",
            "18/20.\n\nI'm not going to kick myself about the ABC history question.\n\nThe \"Duck typing\" one - Is duck typing a language feature? I answered on the basis duck typing is more like a pattern you can use because the language is dynamically typed (which *is* a language feature).",
            "I'm going to argue that all possible answers to question 6 (What does the 'yield' keyword do in Python?) are wrong.\n\nFrom [the docs](https://docs.python.org/3/reference/expressions.html#yield-expressions) (emphasis added)\n> Using a yield expression in a function\u2019s body causes that function **to be a generator** function[...]When a generator function is called, it returns an iterator known as a generator. That generator then controls the execution of the generator function. The execution starts when one of the generator\u2019s methods is called. At that time, the execution proceeds to the first yield expression, where it is suspended again, returning the value of expression_list to the generator\u2019s caller[...]\n\nSo IMO the correct answer would be something like \"it causes the function to become a generator, which in turn will run until the first yield statement before being suspended, returning the yielded argument\", which is quite long.\n\nThe supposedly correct answer \"Causes the function to return a generator\" is just plain wrong. The following function `foo` returns a generator:\n\n    def foo():\n        def bar():\n            yield 42\n        return bar()\n\nEdit: thinking more about it, \"causes the function to return a generator object\" would still not be ideal, but technically correct. Because in the example above, calling bar() will return a generator object, because bar is a generator.",
            "Some of the questions I found to be quite ambiguous. For example, #12 is asking about `self` in a class method. Is \"class method\" referring to a method of a class annotated with @classmethod decorator or a member function?\nAlso, the first parameter of a member function doesn't have to be called \"self.\" Self is just a convention.\n\nHighly recommended for beginners, but it can be confusing for someone with more experience.",
            "> 11 What is the primary function of the `__init__` method in a class?\n\n`__init__` initializes the instance object, not the class object. If you wanted to custom-initialize the class object, you'd need a metaclass (or `__init_subclass__` if you're using a class hierarchy)",
            "If you're going to quiz interns and new hires, you better get the details right.\n\n* Q1: garbage collection is a feature of an [implementation](https://docs.python.org/3.12/reference/introduction.html#alternate-implementations), not a language. In the case of Python, the garbage collector differs between different versions and different interpreters, e.g.\n\n  - Python 1 had only reference counting;\n  - Python 2 and 3 has both reference counting and a cyclic garbage collector;\n  - PyPy can be configured for many different garbage collectors;\n  - Jython uses whatever the JVM uses (which is *not* reference counting); \n  - IronPython uses whatever the .Net CLR uses (again, not reference counting);\n  - I have no idea what RustPython and Nuitika use;\n  - and *in principle* somebody could make a Python interpreter with no garbage collection at all. (It would be a pretty awful Python implementation, but it would be a Python implementation).\n\n* Q2: While I personally am fascinated by the history of and evolution of programming languages, I think that expecting your Python devs to memorise which features came from ABC and which didn't is going a bit far.\n\n* Q4: `try...except` is *two* statements, not one. You can have a `try` without an `except`, e.g. `try...finally`.\n\n* Q6: technically all the answers are wrong. `yield` is an *expression* which at compile-time (yes, the Python interpreter has a compile-time -- what do you think the `compile` function does?) causes the function containing a `yield` to be treated as a generator function. At run-time, a `yield` does three thing: pauses execution of the generator, returns a value, and then when the generator resumes, [accepts a value to be passed back into the generator](http://www.dabeaz.com/coroutines/). Few people know about that last step, even though it has been in the language for at least 14 years.\n\n* Q7: The answer depends on where in the function definition the `*` is. But given that you specify it as an operator, the only correct answer is *multiplication*.\n\n  - In the *body* of a function, `*` is an operator that can be used for multiplication, or sequence unpacking: `spam, eggs, aardvark, *the_rest = mysequence*4`\n  - in the *header* of the function, `*` in the default value of a parameter is multiplication, just like in the body: `def spam(arg=42*'eggs'): ...`\n  - still in the header, a leading `*` before a parameter name is **not an operator** it is a syntactic form for a special identifier which collects any extra positional arguments: `def spam(arg, *extras): ...`\n  - still in the header, a `*` *without a parameter name* acts to separate positional-or-keyword parameters from keyword-only parameters; \n  - this is not a complete list! The star symbol `*` is one of the most heavily overloaded symbols in Python.\n\n* Q11: the `__init__` method does not initialise the class object. The class object is initialised when the `class` statement runs. (Classes are objects too.) The `__init__` method is called, not when the class object is created, but when an instance of that the class is created.\n\n* Q12: `self` is a convention, so it doesn't actually have any special meaning at all. And by convention, it doesn't get used in class- and static-methods.\n\n* Q20: the *primary* purpose of the `with` statement, in the sense of the most common and most useful, is to handle files. I've probably written a hundred `with fp in open(...)` statements for every other context manager. Compared to dealing with files, all other context managers are *secondary*. (YMMV.)\n\nEdit: `with open(...) as fp` of course. Why am I still up at 4am?",
            "Re: 2. Which feature is NOT inherited by Python from the ABC language?\n\nBut Python is very OOP, everything in Python is an object, even functions. Is it even possible to tell why Python is OOP and where it got it from?",
            "16/20 there were some things I honestly saw for the first time.",
            "17/20, I don't really see the point of this and would laugh if someone legit thought they could use it to evaluate an intern/jr.\n\n\\#2 -- absolutely no idea what ABC is or it's relationship to Python. Why would anyone know this? \n\n\\#6 -- I don't think the functions `returns` a generator, I think it becomes a generator?\n\n\\#7 -- * doesn't unpack. It collects listed args into a var.\n\n\\#13 -- might be fair. Idk tbh. I don't remember all those things off the top of my head. My answer would've been \"My IDE tells me\" lol\n\nThe rest are whatever, but I don't think it's a good way to evaluate devs on their Python abilities. Some of these questions are just kinda obscure.\n\nWould much rather ask them to build a Flask backend or a simple script or something to evaluate their skills.",
            "You don't actually screen people for employment with these obscure questions do you?",
            "Oops, got one wrong. This is for beginners (like me). \n\nI started reading that book. It starts fast, maybe a little too fast for the current version of me. Hopefully a future version will do better with it.\n\nP.S. Nice work on the quiz!",
            "Man I got the what is self in a class method cause I thought you are talking about a class method. Maybe that can be called a \u201cmethod inside a class\u201d",
            "Awful. \n\nIt's become a cliche at this point that to get jobs with a language, you just learn \"about the language\". \n\nThis is like hiring as athlete based their knowledge of Olympic trivia.",
            "Nice quiz",
            "Question 13 is wrong\n\n13. Which Python feature allows a quick check if an object supports a protocol via try/except without using `isinstance` or `hasattr`?\n\nIf anything this is dynamic typing but it's a very weird question overall. Duck typing requires that an object meets ALL of the criteria of the protocol to be considered a duck",
            "Got a solid \"Good\", nice",
            "Oof, only 15 - but I know why I got some wrong. \n\nThe ones about with and * seemed like there were two correct answers",
            "19/20. Gonna go over the book though. Looks like it could have some gems",
            "I\u2019m sorry dog but this quiz stinks.",
            "For me the advantage of a deque over list is it\u2019s thread safe.",
            "I'll say the same as some people here about \\#7, the usage of `*` in a function definition. I'd assume what you meant was actually \"pack\" (or collect) instead of \"unpack\", non strictly speaking. It would be unpack if you used it when calling the function.",
            "16/20 and I haven\u2019t touched Python in nearly 3 years so I\u2019m alright with that.",
            "I got 17/20",
            "20/20, can somebody hire me please",
            "Wow, I just program from time to time for simple scripts but still got 19/20.",
            "Wow, Idyllic really has branched out from their original purpose\n\n> Everything You Need for Effortless Image Creation and Design",
            "16... Not bad",
            "Neat, 100%! I'm finally getting the basics after 14 years!",
            "12/20. Eep",
            "11/20 feels pretty good for a beginner with no idea what they are doing. I will try and read a little more \ud83d\ude02",
            "19 out of 20. Fucking ABC programming... I don't know it.",
            "17/20. Knew I should have taken DSA seriously.",
            "Question 4's answer is in Question 4. I didn't check if I could edit Q4 retrospectively.",
            "15/20 I'm washed",
            "Q7 is inaccurate. \n\nThe \\* operator unpacks values **outside** a function definition, whereas **inside** a function definition, it does the opposite by packing multiple arguments into a single parameter.",
            "I thought Q19 was a trick question, since the string class is str :/",
            "I mean i just got 10/20 can u guys suggest me any resources like some youtube videos to watch and learn more about python cause i really want to become a python developer",
            "Fluent python is a nice book and the random trivia might be somewhat interesting for some mid level devs. However, if you evaluate (or let them self evaluate) beginners based on a factually incorrect and slightly unpragmatic quiz, you're doing everyone involved a disfavour imo. While it might teach someone a fun fact or two, it will definitely also confuse or discourage others specially since there's a few mistakes and other trivia that doesn't help in being a better programmer. So not necessarily a good quiz to evaluate whether someone is a good python dev, if that's what you'll use it for. Cheers for sharing though, keep iterating :)",
            "Note: class method and class object are quite different from an instance method and instance itself:\n```\nclass C:\n  @classmethod\n  def this_is_class_method(cls):\n         \"cls is a class object\"\n  def instance_method(self):\n      \"self is the instance\"\n```\n\nC is a class object, C() is an instance.\n`C().__class__ is C`.\n\nAlso `*` (star/asterisk) on a function *definition* does the opposite of unpack: it accepts/combines multiple (arbitrary number of) positional arguments into a single tuple, and forces further  args to be accepted by name only (as keyword args):\n\n```\n>>> def f(*args, byname):\n...     print(f\"{args=}, {byname=}\")\n...     \n>>> f(1,2,3, byname=True)\nargs=(1, 2, 3), byname=True\n\n>>> def g(*, byname): pass\n```\n\n`*` star does unpack during a function *call*:\n\n```\n>>> r = range(2) \n>>> print(*r, 2, *r)\n0 1 2 0 1\n>>> *range(2),\n(0, 1)\n```\n\nhttps://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters\n\nThere is a similar behavior for assignments (extended iterable unpacking): `first, *middle, last = range(4)`  Here, the word unpacking makes sense: whatever is on the right is unpacked (parts of the object are bound to corresponding names).",
            "8. What does the `enumerate()` function do when applied to a list?\n\n\nThis is pretty wrong also. Enumerate takes an iterable creates an enumerator object, and returns a tuple of index and value when __next__ is called. It doesn\u2019t yield anything and it doesn\u2019t return an iterator.",
            "Good quiz, I got 16/20, I was expecting a lot less as I'm only a hobbyist.\n\n> What is 'Timsort' in Python?\n\nThis seems way too obvious considering it has \"sort\" in the name.",
            "I think you have some wrong, `__init__` does not instantiate the object, `__new__` is responsible for that. `__init__` is actually just for defining attributes, which is run after class instantiation.\n\nAlso on number 7, you have as the correct answer that the * operator unpacks the values when used in a function definition, but it kind of does the opposite, where it packs multiple arguments into a single one, conventionally named as `args`. If you pass multiple arguments and then inside your `def func(*args)` you print args, then you will see that it's just a tuple of the multiple arguments you passed when calling it.\n\nCool idea though, looks like a fun thing to make and use.",
            "19/20. Question 2 was quite bizarre, but maybe I\u2019m just salty over not getting a perfect score. Nice quiz.",
            "11/12. I will head back to r/learnpython where I normally hang out.",
            "Could you explain question 13 please:\n\n\n13.\u00a0Which Python feature allows a quick check if an object supports a protocol via try/except without using `isinstance` or `hasattr`?\n\n\nHow does duck typing help you here?",
            "7. \"in a function definition\" it's packing, not unpacking. In a function call, it's unpacking. But another collector pointed out that by using the word 'operator' you're invalidating so options other than multiplication\n\n18. Shouldn't the first option be `str`, not `string`?",
            "I got 70%, is it enough for a JR position?",
            "12/20, 60%... \ud83d\ude14",
            "Quizzes are pointless. They serve no purpose, especially the foo bar crap. If you want to help interns, give them a challenge directly related to the work they will be doing. Perhaps a task that you found challenging during your time working for the company.",
            "`__shameless_plug__`\n\nI released [a similar app](https://play.google.com/store/apps/details?id=io.github.prahladyeri.pythonmcq) on the Android play store earlier this week.",
            "This one returned an error when I tried it with a past script I have from Python version 2, it says \"the value is getting too old for this_shit\"",
            "Also, a \"class method\" usually means a method that can be called either on an instance of a class or the class itself, so that first argument might actually be a type object.",
            "So there are still some older packages that use \n\n    def __init__(cls, value)\n       cls.value = value\n\nWhen I was starting out more than a decade ago this would really throw me.",
            "Yeah that's not a question about python, it's a question about ABC which is not a commonly used language. On top of that it is worded poorly.",
            "I've been programming in python for 10+ years and have never heard of the ABC language. Got that one wrong too.",
            "19/20 \ud83d\ude11 I would remove that one",
            "Yeah, that one was the only one I got wrong. Kind of out of place compared to the other questions IMO.",
            "Same results. I started studying python two months ago.",
            "> Is duck typing a language feature?\n\nIt was one of the main features touted when Python was young. 1.x days.\n\ncite: I was there.",
            "The [wiki page](https://en.m.wikipedia.org/wiki/Duck_typing) mentions a couple but mostly because you can tell it to do type checking at runtime rather than compile time\n\nAdditionally, while TypeScript can be fairly flexible in its statically-typed-ness (you could just say every variable is `any` type if you really wanted to I guess), when done rigourously, it is a statically (and strongly) typed language that allows duck typing technically speaking.",
            "Same result here.",
            "You could have a statically typed language with duck typing.\n\nInterfaces (or traits) are 99% of the way to duck typing, they allow you to work with type based on what functions it implements, not what it actually is.   \n\nThe one restriction is that you must explicitly annotate classes as implementing an interface. If someone was to make a static language which allowed you to use interfaces without explicit annotations (which could be done at compile time) then it would be duck typed. \n\n\nActually, now that I think about it: C++ templates are duck typed.",
            "I mean, there's no difference between generators and generator objects just like there isn't any between strings and string objects or ints and int objects. Using yield anywhere makes a function stay a function, but one that returns a generator (object), exactly what the correct answer offers.",
            "The quiz isn't exactly *wrong* here per se. The problem is that the term \"generator\" is ambiguous - it's used to refer to both a *generator function* and a *generator iterator* in different contexts. In some sense, it's correct to say that using \"yield\" makes the function a generate *and* causes it to a return a generator.\n\nThe glossary recommends specifying whether you're referring to a generator function or a generator iterator whenever it's ambiguous.",
            "There can be multiple correct answers to the question What does foo do?\n\nA correct answer != the most complete and correct answer.",
            "That one tripped me up too. Apart from the fact that `self` is just convention, a class method (as opposed to an instance method) in my definition gets called *without* an instance (but the type of the class), i.e. the equivalent of `static` methods in C++.",
            "It\u2019s not even needed to initialize an instance of a class. This works and prints out the statement:\n\nclass test_class:\n\n    def example(self):\n\n        print(\"no init needed\")\n        \nobj = test_class()\n\nobj.example()",
            "This.",
            "Found this question annoying - why bother about ABC lang at all?",
            "Python is very object oriented, but the ABC programming language doesn't seem to be. At least to me, it does seem unlikely that Python would get its object orientation inspiration from a language that only has 5 data types (numbers, strings, compounds (unnamed product types), lists, and tables (dictionaries)) and no other object oriented facilities.\n\nIt seems to be inspired somewhat [by Modula-3 and C++](https://docs.python.org/3/tutorial/classes.html#classes), as the docs mention.\n\nHowever, this is admittedly a bit esoteric knowledge.",
            "I wouldn't say *everything* in Python is an object.  In Ruby you can extend the Integer class so that it's possible to write something like `5.days.ago which returns the date from 5 days in the past.`",
            "You should check out the book too! Really helps mature your understanding of Python!",
            "I got the same score!\u00a0",
            "Its certainly a book for those who've been using Python for a while and grocked the basics. I view the book as more of a \"programming languages\" type book with examples of what makes Python so special. Keep up the good work! The language is well worth knowing well!",
            "> Duck typing requires that an object meets ALL of the criteria of the protocol to be considered a duck\n\nNah. If all you need is something that swims like a duck, a goose or a swan  is fine too even though they don't quack like a duck.\n\nI thought that question was awful.",
            "I was just going to comment on the '*' question, is there any right answer?\n\n> In Python, what does the '*' operator do when used in a function definition?  \n> * Unpacks a list or tuple  \n> * Creates a pointer  \n> * Raises an error  \n> * Multiplies values  \n\nThen look at this function definition:\n\n    def foo(a, b, *, c=1, d=2):\n        return a + b + c + d\n\nI know (I think?) the question is about `*args` (or `**kwargs`), but '*' by itself is valid to force anything after it to be provided only as keyword arguments\n\nAnd for anyone else interested, there's also '/' by itself to force arguments as positional only:\n\n    def foo(a, /, b, *, c=1):\n        return a + b + c\n\nthis requires `a` to be only positional:\n\n    ----> 1 foo(a=1, b=2, c=3)\n    TypeError: foo() got some positional-only arguments passed as keyword arguments: 'a'\n\nand forces c to be only a keyword argument:\n\n    ----> 1 foo(1, 2, 3)\n    TypeError: foo() takes 2 positional arguments but 3 were given\n\nmaking only `foo(1, 2, c=3)` or `foo(1, b=2, c=3)` as valid in this case\n\n---\n\nalso on that note.. the question feels a bit confusing, that it  'unpacks a list or tuple' isn't really correct, because, if you create a function like this:\n\n    def foo(*inp):\n        print(inp)\n\nthen call it with `foo([1, 2 ,3])`, it's not going to unpack the list I provided, `inp` will be a single item tuple with the list as the only element (`([1, 2, 3], )`).. This syntax is to dynamically capture the positional arguments not defined, but which answer captures that? \n\nIs this question referring to something else?",
            "The purpose was to help create conversation with interns and new developers in my company! Do you know why its called Timsort and the history of it?",
            "Actually, even if a class method is called on an instance, it still receives the class as its first argument. \n\n| A class method receives the class as an implicit first argument,\n\n[https://docs.python.org/3/library/functions.html#classmethod](https://docs.python.org/3/library/functions.html#classmethod)",
            "What is ABC language and why anyone should care about it? :D \n\n\nye there are few strange questions there.",
            "I began wondering if it was talking about Abstract Base Classes.",
            "same. 19/20, ABC is the only one I got wrong, and the \"correct\" answer seems to suggest that python is not an OOP language, which is ludicrous.",
            "\"generator object\" is unclear because both the function and the iterator it creates can be called generators, and they're also both objects. \"Generator iterator\" and \"generator function\" are the unambiguous terms.",
            "Ahh, that way around!\n\n>However, this is admittedly a bit esoteric knowledge.\n\nYes. And then the question is phrased very counterintuitively.",
            "The `int` type is immutable, but you can inherit from it. (This isn't a good idea, but it is possible.)\n\n    >>> class MyInt(int):\n    ...     def foo(self, a):\n    ...         return self+a\n    ... \n    >>> x = MyInt(45)\n    >>> x.foo(34)\n    79\n    \nIt also has some methods, though the syntax doesn't seem to support directly calling methods on literals, so you have to surround them with parentheses:\n    \n    >>> (4553).bit_count()\n    6\n\nAdditionally, the CPython implementation has interned integer objects from -5 to 256 for performance. (Don't rely on this for any sort of behaviour in your code though!)\n\n    >>> a = 2\n    >>> a is 2\n    True\n    >>> b = 123456\n    >>> b is 123456\n    False",
            "just because python isn't ruby doesn't mean the statement \"everything in python is an object\" is wrong.",
            "> I wouldn't say everything in Python is an object\n\nIn Python, every thing, every value, is an object. There are no values which are not objects, like in C or Java. If you've used Java, there is a distinction between boxed and unboxed values. Python does not have this distinction -- everything is boxed.\n\nThere are meta-things which are part of the language itself but exist only in the code itself, like \"for loops\", and these are not values and aren't objects.",
            "In Python you can create a subclass of the integer class, which has a .days.ago property and does exactly what you mention. You just can't change the existing integer class itself.",
            "Admittedly, I said that a bit carelessly, but the general point still stands :)",
            "Will do!",
            "I agree it is such a wonderful language. I will still work my way through the book. It's certainly not the first book above my head. I'll learn what I can from it and then come back to it at a later date.",
            "If all the protocol says is \"can swim and has feathers\" then correct a duck a goose and a swan match. but if the protocol says \"can swim and has fins\" then a duck is no longer \"duck typed\" to that protocol",
            "My guess is that OP meant for the question to say \"in a function call\"? The correct answer makes more sense then, as a * in a function call unpacks the list/tuple to use as arguments.",
            "I honestly don\u2019t know. I also thought \u201cdefinition\u201d of a function was ambiguous, if it had said the argument and something about keyword args it might\u2019ve been clearer.  Like is\n\ndef f(a,b):\n\n    return a*b\n\nNot a function definition?",
            "I'd never heard of it, but I knew that it must be a sorting algorithm because it had sort in its name and followed the \\[X\\]sort naming convention of sorting algorithms.",
            "oh shit I thought it was talking about \"Abstract Base Classes\" and was worded really poorly. Had no idea \"ABC\" is an actual language.",
            "> What is ABC language and why anyone should care about it? :D\n\nIt was the primary inspiration for Python. Not the only one: Guido was inspired by features and syntax from a bunch of languages, but mostly ABC. If you google for his blog(s) he discusses it a bit.",
            "> why anyone should care about it?\n\nhistorical curiosity? Topic to bring up at really nerdy parties?",
            "I inferred OOP because it\u2019s the one feature of the four that was so huge, it couldn\u2019t have come from a language as obscure as ABC.\u00a0\n\nWeird phrasing on the part of the question; I believe it intends to mean that although python supports OOP, it didn\u2019t get OOP from ABC.\u00a0",
            "Same, 19/20, who cares about some abc",
            "> the syntax doesn't seem to support directly calling methods on literals\n\nOf course it does: `\"Hello world\".upper() works fine.\n\nInt literals are a bit trickier because the dot causes the parser to interpret it as a float: `123.bit_count()` is a syntax error, but this works: `123 .bit_count()` (note the sneaky little space).",
            "Oh yeah, that would make sense!",
            "Yeah that's true as well, the question is too vague",
            "Yeah, it's one of Python's main inspirations (at least a bunch of the features). \n\nIt isn't really where the \"object oriented\"ness comes from though. The docs point to [Modula-3 and C++](https://docs.python.org/3/tutorial/classes.html#classes) as being the primary inspirations for the OOP features",
            "ye but who cares :D",
            "ye I am not such a perv ;)",
            "Not to complain as I thought it was good - but the with keyword is used to manage context, yes, but the overwhelming majority of cases I see it used for is in opening files / managing exceptions which is why I answered that.",
            "The question says features NOT inherited from ABC. I expect the author was actually thinking of Smalltalk for that feature.",
            "Yeah, I see where you're coming from, but \"to open files and handle exceptions\" is just examples of context managers being used. It might still be the most common cases for most people as you mention, but the primary purpose of `with` is to handle context management in general.\n\nWith that in mind, I would probably not have that as an answer option to the question, because of this exact reason, it can be confusing.",
            "Agree with both"
        ]
    },
    "Running Python in Web Browsers": {
        "title": "Running Python in Web Browsers",
        "score": 41,
        "url": "https://www.reddit.com/r/Python/comments/1dl8stp/running_python_in_web_browsers/",
        "content": "Python is one of the world's most popular programming languages and the web is the most ubiquitous application platform. There are several projects which aim to enable Python to run in web browsers.\n\n* [Brython](https://www.brython.info/) is an implementation of Python 3 written in JavaScript.\n* [Skulpt](https://skulpt.org/) is an implementation of Python 2/3 written in JavaScript.\n* [PyScript](https://pyscript.net/) is an implementation of Python 3 written in WebAssembly.\n* [Transcrypt](https://www.reddit.com/r/VistaPython/) is a Python to JavaScript compiler - unfortunately, the project seems to have been abandoned.\n* [Batavia](https://github.com/beeware/batavia) is a Python virtual machine written in JavaScript - unfortunately, the project seems to have been abandoned.\n\nFinally, I have created [VistaPython](https://www.reddit.com/r/VistaPython/) which is also intended to run Python 3 in web browsers but by using a bytecode interpreter written in JavaScript.\n\nEach design has strengths and weaknesses:\n\nBoth Brython and Skulpt use hand-written Python parsers which are difficult to maintain. VistaPython uses a parser generator, [Antlr](https://www.antlr.org/), to automatically generate the JavaScript code for the parser. The parser can be updated to match the latest Python version by simply running a script.\n\nAlso, both Brython and Skulpt generate JavaScript code which is then evaluated. In VistaPython, the compiler produces a \"code object\" which is then executed using the bytecode interpreter. The first approach will result in faster code whereas the second approach can be more flexible for code stepping, etc.\n\nPyScript is based on [Pyodide](https://pyodide.org/en/stable/) which is a port of CPython to WebAssembly.\n\nPyScript can be upgraded the latest Python release by recompiling the latest CPython sources. Its main disadvantage is that it is very heavy to load and seems to run poorly on mobile devices.\n\nIn VistaPython, the load profiles are:\n\n* vm.js (Python virtual machine) 761kb\n* Python parser 368 kb\n* Mobile client GUI 2.4 Mb\n* Desktop client GUI 2.9 Mb\n\nCompiled applications can be run using only the Python virtual machine (761kb).\n\nThe design goal of VistaPython is to be able to load compiled applications from a database and run them quickly on any web device.\n\n",
        "num_comments": 9,
        "comments": [
            "How is pyscript these days? Seemed promising when I first heard about it but was pretty slow.\n\n Always like the idea of eliminating barriers to run python applications, thanks for this rundown",
            "Are you sure you\u2019re obeying the Python license?  And trademark rules?",
            "Just wanted to point out your name is verrrry similar to [PyVista](https://pyvista.org/), a well known 3D visualisation project.",
            "Will you be releasing the source code?",
            "Check out anvil.",
            "The thing is for frontend you also need frameworks/libraries. JavaScript has a lot of tools, SPA frameworks and more. Python browsers variants still are \"experimental\" on their own and don't have good ecosystem around them. And then a frontend/fullstack developer would have to use it. Backend dev without getting to know frontend won't be able to use it efficiently or at all.",
            "There is also [pygbag](https://pygame-web.github.io/wiki/pygbag/) that supports running pygame in the browser. I have been using it for my recreation of the [board game Santorini](https://github.com/KennethJAllen/santorini).",
            "They move to MicroPython as the default backend, that rather helped with issues.",
            "+1 for anvil, the team manages skulpt heavily as they rely on it for the python-to-JS"
        ]
    },
    "SSL Error while running Python Script on Network": {
        "title": "SSL Error while running Python Script on Network",
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/1dltwvf/ssl_error_while_running_python_script_on_network/",
        "content": "I created a script to download some user data from Azure, it works fine on my home system, but anytime that I run it on a different network, I get SSL errors. I tried to ignore the errors, but the script stops functioning. Has anyone seen this before? And it's not just on one network, because I've tried it at several locations, from different networks.\n\nError: Certificate verify failed: unable to get local issuer certificate (ssl.C:1000)",
        "num_comments": 2,
        "comments": [
            "r/learnpython",
            "Check if the SSL certificates are installed/updated on the other networks."
        ]
    }
}
{
    "New at Go? Start Here.": {
        "title": "New at Go? Start Here.",
        "score": 371,
        "url": "https://www.reddit.com/r/golang/comments/18ujt6g/new_at_go_start_here/",
        "content": "If you're new at Go and looking for projects, looking at how to learn, looking to start getting into web development, or looking for advice on switching when you're starting from a specific language, start with the replies in this thread.\n\nBe sure to use Reddit's ability to collapse questions and scan over the top-level questions before posting a new one.",
        "num_comments": 165,
        "comments": [
            "I made this list over a few years.\n\nhttps://docs.google.com/document/d/1Zb9GCWPKeEJ4Dyn2TkT-O3wJ8AFc-IMxZzTugNCjr-8/edit?usp=drivesdk\n\n\nLet me know if you need anything.\n\nAlso, I don't use r/golang any longer because they keep blocking me and now you have to post a link and not just text. Pretty toxic stuff but I'm happy to help you, just not on this platform. It's been taken over I guess.",
            "I really enjoyed using https://gobyexample.com when I was starting out. Found all of the topics to be easy to follow, and I find myself referring back to it every now and again when I need a quick refresher. \n\nAs others have mentioned,  go.dev docs are also very good. Effective Go is a really well written document, in my opinion, for new starters.",
            "Start here https://go.dev/doc/",
            "I have been writing Go tutorials at [https://golangbot.com/learn-golang-series/](https://golangbot.com/learn-golang-series/) for quite sometime. Hope it helps.",
            "I'm just starting Go, what are good books or websites to learn about Go?",
            "I have templated my answer to this question..\n\n> Just going to point at a previous answer to pretty much the same question, seems to come up about every fortnight.\n>\n> https://www.reddit.com/r/golang/s/odBvaXUMcZ\n>\n> Good luck.",
            "The Go Programming Language is slightly outdated (no generics or modules) but it is one of the best books I've read on any programming language:\n\nhttps://www.gopl.io/\n\nAlan Donovan is [pretty active in the community](https://github.com/adonovan/spaghetti) and Brian Kerrigan has been co-authoring books with Rob Pike since the 80s. It's a really good book.",
            "I'm looking to get into web development, what frameworks should I use/are best/are most common?",
            "I may not say I am new to golang , I know the basics and i know here and there about go. The problem lies in that I don't know what to do after the basics. I haven't done any projects I don't do frontend.\n\nI am super confused about what to do next\n\nCan someone help me ?",
            "https://gophercises.com/",
            "I wanted to contribute this link as well, and found it very helpful while learning: https://go.dev/doc/effective_go",
            "I'm looking for good projects to learn Go with, demonstrate in an interview that I know Go with, or generally use to convince people in an interview that they should hire me with?",
            "I am from C#. How would you kickstart a new project? I have a basic understanding of packages I would like to use (viper, gorm, templ, htmx, gin, grpc) but I am not sure about the project layout and structure yet. I found this one: https://github.com/golang-standards/project-layout. Would you start by yourself or is there a standard project template that you can recommend?",
            "Coming from javascript, is there any open source project which i could contribute to learn?",
            "Maybe my notes can help a bit https://github.com/vbd/Fieldnotes/blob/main/golang.md",
            "[https://www.calhoun.io/guide-to-go](https://www.calhoun.io/guide-to-go) \\- from the author of Gophercises.com",
            "If you like learning from books, I would definitely suggest those couple of books.\n\n* Learning Go: An Idiomatic Approach to Real-World Go Programming, Jon Bodner.\n* The Go Programming Language, Alan A.A. Donovan.",
            "What do you think about these courses?\n \n Building Modern Web Applications with Go\u2b07\ufe0f\n https://www.udemy.com/share/103XPA3@t-f-YA0kiNqVBjid4ztIs_NUsM1sVz8VX8PlP2vXZqtuwKM_y6XRdd5ElOVs_x-y/\n\nWorking with Microservices in G\u043e\u2b07\ufe0f\n\nhttps://www.udemy.com/share/106lo03@J5C9FnkiyHTM6yNYvALXHORP2ulsrijwRRUBkdd6_XxC_PDzd3R-Gm8PuWzvAZvc/\n\nWorking with React and Go\u2b07\ufe0f\n\nhttps://www.udemy.com/share/104HTy3@2gvQM9H8pt2-5WuVVKvIZ1AXhBfaR-izrAnEqKYDjG3TDjKSxnx8s7xNfqqFXxYV/\n\n Backend Master Class [Golang + Postgres + Kubernetes + gRPC]\u2935\ufe0f\n\nhttps://www.udemy.com/share/105PNI3@KYEn-eZBBYkX9af-9SPTrQjoaon0DaSnEt9Tg-tcX6xcalwMDekZAjowTZww-7pV/",
            "I'm coming from PHP, anything specific I should know about Go?",
            "I'm a beginner and looking for Go lang friends for work together and learn from each other.",
            "Just found a cool new youtube channel   \n[https://www.youtube.com/@codeheim/featured](https://www.youtube.com/@codeheim/featured)   \nIt is not mine and I am not affiliated with it in any means",
            "I have an opportunity at a new company that uses Go, and they don't require prior knowledge of the language. I'm an experienced backend software engineer. What resources would you recommend for learning your tech stack guys?",
            "After writing the blog series [Learning Go by examples](https://dev.to/aurelievache/series/13751), I start a series of sketchnotes about Go in order to try to make accessible the Go/Golang programming language.\n\nFor the moment, I explained visually Variables and Constants concepts:   \n[https://dev.to/aurelievache/series/26234](https://dev.to/aurelievache/series/26234)  \n  \nIf it interest, I will create other sketchnotes :-)",
            "Hello guys , I am starting to learn GO today. I went through all the comments on this post and i just wanted to know I am starting to learn it from the freecodecamp's youtube video for the same. Is it fine? I'll be going through the docs and understand much better once I am done with the vid. The vid is 10 hours long.  \nIs it the right path?\n\nPS: I need to learn it ASAP!",
            "I'm coming from Java, anything I should know about?",
            "I'm currently using the course at: https://boot.dev",
            "What are some good codebases I can read to learn more about Go?",
            "I'm coming from Javascript, either on the server or on the frontend, anything I should know about Go?",
            "Try using Builder to build Go projects. Tutorial link: [https://youtu.be/FsF0C8Bi2ig](https://youtu.be/FsF0C8Bi2ig)",
            "You can check my repository: [https://github.com/5ilent5pring/go-noob](https://github.com/5ilent5pring/go-noob)",
            "For those in the US, getting a local library card is free and can get you access to free udemy courses via [gale](https://link.gale.com/apps/UDEMY). Hope this helps!",
            "I want to know where I can find advanced Golang content such as architectural applications and others for studies and advances in the language?",
            "For webrtc, what would be the best approach in go?",
            "How do I compile Golang programs in RPI5? Keeping getting this issue\n\n    # runtime/cgo\n    gcc: error: unrecognized command-line option '-marm'\n\nOr it just refuses to run because incompatible OS",
            "Matt Holiday's youtube playlist on Golang is one of the finest that I have come across. [https://www.youtube.com/watch?v=iDQAZEJK8lI&list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6](https://www.youtube.com/watch?v=iDQAZEJK8lI&list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6)",
            "Yes. I'm new in Go and  I'm terrified. with go mod and imports...where is adequate documentation?\n\n    $ go run main.go\n    package command-line-arguments\n    imports github.com/go-sql-driver/mysql\n    imports github.com/go-sql-driver/mysql: import cycle not allowed\n    $ go mod init\n    go: /data/golang-with-mysql/go.mod already exists\n    $ go run main.go\n    User: user, Database:db\n    user db2024/04/24 17:28:45 sql: unknown driver \"mysql\" (forgotten import?)\n    exit status 1\n\nWTF",
            "Can someone tell me why listener.Accept (tcp4) takes \\~4 seconds to accept new connection? In other languages this is instant.",
            "**Hi Everyone, I'm looking to contribute to some open source project in go lang can you please give me few suggestions**",
            "If you prefer learning hands-on rather than watching videos, you may like https://threedots.tech/go-in-one-evening/",
            "Some people mentioned this tutorial to be very good - [https://www.youtube.com/watch?v=NNLpEPb2ddE&list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6&index=4](https://www.youtube.com/watch?v=NNLpEPb2ddE&list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6&index=4). Currently going through it",
            "https://blog.jetbrains.com/education/2023/12/18/learn-go-community-course/\nThe JetBrains Academy Blog",
            "so I am a data scintist and I was thinking of learning go as a quick and dirty data processing libarary when I want to work with a bigger scale then python lets me. \n\nmy c skills are okay tho I cant really get anything done with c because while its super fast It dosent really have stuff like an easy json parser.  \n\n\n  \nany idea for where to start?",
            "I have more than 7 years of experience in PHP and recently been learning Go, what\u2019s the best approach to work at as a Go developer that pays well and take into consideration my years of experience in web development, even if I don\u2019t have professional experience in Go",
            "for Brazilians, see this channel: [https://www.youtube.com/@AprendaGo](https://www.youtube.com/@aprendago)",
            "[removed]",
            "Perfect, tysm!",
            "great resource, thank you",
            "Just decided to learn Go for building backend of a personal project, thanks a lot!",
            "thanks",
            "Hey ! I'm fairly a newbie to go and I wanted to learn how to build backend applications with htmx and templ. Do you think you'd have any resources for where I can learn those from?",
            "thk",
            "Please remove [https://github.com/golang-standards/project-layout](https://github.com/golang-standards/project-layout) from this list.",
            "It seems good. Have you ever thought about creating some sort of website for this. You know, something like the go proverbs, idiomatic go or the cheatsheet pages.",
            "It's look great.",
            "I\u2019ve really liked Learn Go with Tests:  https://quii.gitbook.io/learn-go-with-tests/\n\nYou learn go concepts along with writing and running tests and benchmarks.",
            "https://quii.gitbook.io/learn-go-with-tests/",
            "https://roadmap.sh/golang\n\nA pretty good resource for all things development related - lots of useful materials for building up your knowledge as a developer as well",
            "https://go.dev/doc/effective\\_go",
            "You should start a project. I doesn't have to be a big one. But it's a good heuristic approach to learn a new language. You'll suddenly find yourself stuck on something, and that'll make you start some research on that, and so you'll be accumulating experience and confidence in the language. Even if you know nothing, with just knowing  how to install it and run it, you're good to gol.",
            "Really looking forward to an answer to this one. Specifically for people who have very little coding background at all. A lot of books etc for Go seem to focus on people learning Go as a second language rather than complete beginner if anyone has anything to recommend for that?",
            "The most common answer is to use net/http directly and that frameworks are not necessary.\n\nI have a bit of a spin on that. `net/http` is what a lot of other languages would call a \"minimal framework\". It defines how a web request comes in and how it is handled, but does not on its own do much more than that. But it does it in a fairly standard way across the Go ecosystem. As a result, the things we typically call \"frameworks\" in the Go ecosystem like [gin](https://gin-gonic.com/) or [echo](https://echo.labstack.com/) aren't really themselves free-standing frameworks. They plug in to `net/http` themselves and extend and augment it, rather than replace it. The community commonly says that the best framework is \"no framework\", but I would say `net/http` already is one. It's just \"minimal\" rather than fully featured, which in the web framework world is a category of framework. (For instance, [web.py](https://webpy.org/) is a Python example.)\n\nAs a result, they can be mixed and matched, and it is possible to create [middleware](https://www.alexedwards.net/blog/making-and-using-middleware) that works with almost all the Go web frameworks by writing to the `net/http.Handler` interface.\n\nMy advice is, budget a week to spend on `net/http` directly. It is a good idea to get a feel for what it does itself and how to utilitize it to write some simple stuff. You may find it is all you need; in the case of an API-driven website without strong pre-existing URL structure requirements this is actually reasonably likely. In those cases you may just mix in a couple of individual components (a popular source for high-quality implementations of these is the [gorilla](https://gorilla.github.io/) project) and call it a day.\n\nBut if it is not enough, at this point you will have enough information to evaluate the Go framework landscape and come to your own conclusions.\n\nOne word of warning. There is a somewhat popular framework called [fasthttp](https://github.com/valyala/fasthttp). There is nothing wrong with this project, but it is kind enough to have [a note at the very top of its README](https://github.com/valyala/fasthttp?tab=readme-ov-file#fasthttp-might-not-be-for-you) about how this framework may not be for you. I advise you to read it and take it to heart. fasthttp does what it does by completely reimplementing a web server unconnected to `net/http`, which means you will be locked into its smaller ecosystem rather than the greater `net/http`-compatible ecosystem. Many programmers make the mistake of looking out across their options and evaluating their choices on one singular metric: performance. They just blindly choose the fastest. Go web frameworks are not a good place to do this. You may have been bitten in the past by slow frameworks in dynamically-typed scripting languages, or you may just not be thinking about your real requirements, so this may appeal. But Go is fairly fast and `net/http` is fairly high-performance; used like a static file server `net/http` can reach about half the speed of nginx on its own. That's actually really, really fast already. Or to put it another way, `net/http` can crunch through many, many thousands of requests per second on the very smallest VMs you can get and still have time for you to do useful work. Be sure you have a task where that is going to be your bottleneck. In many cases it literally _can't_ be your bottleneck because the work your web pages are going to do is already the bottleneck. You should only take fasthttp if you are looking at something that will be serving literally hundreds of thousands of very small requests per second, and even then I'd benchmark my options. But if you do have that need, fasthttp can be a lifesaver.",
            "I'd suggest doing [adventofcode.com](https://adventofcode.com) in Go. They are great coding challenges for just about any skill level and will push your learning.\n\nI also learned quite a bit by doing a few of the projects on [codecrafters.io](https://codecrafters.io), where you build a rudimentary BitTorrent client, DNS server, SQL server, etc.  These were interesting because they not only help you practice and improve your coding skills, but they teach you about real-world technologies in the process.\n\nFinally, I'd recommend [https://quii.gitbook.io/learn-go-with-tests](https://quii.gitbook.io/learn-go-with-tests). It may go over some material you already know, but using a test-driven development (TDD) process. If you haven't tried building projects with TDD, you may be in for a pleasant surprise. It's changed the way I work on my projects.",
            "Start by making simple projects like terminal calculator, then learn how to make a rest api and so on...",
            "My suggestion for this is a networked chat server.\n\nStart with a server that opens a local listening port that two clients can connect to, and then those clients can send network messages to each other and display them on the other side.\n\nThe reasons I like this idea is that A: you immediately play into Go's networking strengths and B: from here you have an almost bewildering array of directions to go to continue to elaborate on your chat app, including but not limited to:\n\n1. A concept of users so you can have people chatting directly with each other by name. Or channels where people can chat with nicknames like IRC.\n2. Use a TUI or a GUI library to display the chat rather than dumping to screen.\n3. Get on to the web; you can do anything from a Web 1.0 \"refresh every five seconds\" to server-sent events to a full websocket. Get into authentication and authorization on the web. Split things into distinct API versus web interface. Handle inlining images like Slack does.\n4. Integrate with a database; log messages, store user information for login, store permissions, store history for channels, all sorts of things. Use GORM, use SQL, use Bolt, use anything you like.\n5. Learn about TLS encryption and use TLS for either your web interface or your line protocol.\n6. You'll pretty much _have_ to learn about goroutines to work on this properly, but there's a lot of opportunity to use them beyond the bare bones. For example, you can write some sort of \"bot\" that sits in a (chat) channel and responds to inputs as its own entity.\n7. Learn about strong testing practices by testing this stuff out. See if you can apply fuzz testing to your protocol.\n8. Learn to break your code into a set of independent packages and develop a non-trivial layout.\n9. Several cloud technologies could be used here, just for the sake of using them:\n  * Hosted DBs\n  * S3 or equivalent for file sharing\n  * Any of the various event busses for communication with the client/server\n  * Serverless/EC2/containers/all sorts of things for the deployment of servers or clients\n  * Almost anything can be used if it strikes your fancy through some sort of bot\n\nAnd that's not even a complete list. What I like about this idea is that it starts out at just a couple page's worth of code, but then it expands out into almost arbitrary directions, and at the same time with only a bit of discipline, it is something you can show off at almost any point, starting from those very first two pages of code all the way to your home-made Slack clone. Just tag your functioning code as you go and you'll always have working code to show.\n\n(Just about the only thing I would not recommend is, don't try to write this to be multi-server unless you already know what you're doing with that. You're going to have a very difficult time extending the load to the point that you would actually test that with this project.)",
            "I typically learn a new programming language by building real-world projects too.\n\nI've been publishing them here: [https://codingchallenges.fyi/challenges/intro/](https://codingchallenges.fyi/challenges/intro/) hopefully one or two are of interest/useful.",
            "What kind of project will you be working on? I guess it's some kind of Web API (?)\n\nIn my case, I start by myself. But when I got started, I made a good research on project structures. So far, I've got a predefine project layout, which goes like this:\n\n    /components  \n        /ui  \n        /layout  \n        /pages  \n    /database // (x) Unnecessary package since only main.go depends on it  \n    /docs  \n    /failure  \n    /handlers  \n    /mock  \n    /model  \n    /repositories  \n    /services  \n    /transfer  \n    /types  \n    README.md  \n    main.go  \n    middleware.go  \n    db.go  \n    pool.go // (x) These instantiations will go in main.go  \n    routes.go // (x) Routes will go in main.go\n\nThis is from a project that I'm just planning. It's a fullstack website that'll use an API and templ for rendering views.\n\nThe handlers package is like the controllers, from C#. The failure package is just for application errors. The transfer package is for my Data Transfer Objects (DTOs).\n\nHere's another example: https://github.com/fontseca/noda",
            "you kinda freestyle it, the project layout will take it shape the more you work at it, atleast thats the way i do it",
            "Though it's good (depends on your taste), a core dev of the golang team posted an [issue](https://github.com/golang-standards/project-layout/issues/117) regarding how its inaccuracy.\n\nBut don't worry, Melkey created a cli tool for this exact problem for golang beginners (like me).\n\n[https://github.com/Melkeydev/go-blueprint](https://github.com/Melkeydev/go-blueprint)\n\nThink of it like the `create-react-app` or `create t3-app` but for golanng.\n\nHere's a run through of the cli [https://www.youtube.com/watch?v=1ZbQS6pOlSQ](https://www.youtube.com/watch?v=1ZbQS6pOlSQ)\n\nIn my experience as well, the `golang-standards/project-layout` stumped my progress more than it helped me because there were lots of patterns that I felt was conflicting with most big project examples that I tried to study and applying DDD, hexagonal architecture, and other architectural patterns felt confusing.\n\nHope this helps <3",
            "I've seen this question asked a lot of times on this reddit (and I'm going to begin taking a stronger stance on directing those questions to this thread), but my generic answer, based on the conversations both here and in other language communities is, we can't really tell you. There are so many things that go into deciding to contribute to a particular project that there's just no reasonable condensation of that decision procedure.\n\nI also am not convinced that trying to contribute to open source projects is a great way to learn (generally contributing involves you somehow using some knowledge or skill you have, it's not really an acquisition event on its own), nor do I feel like very many of the people who ask this question follow through anyhow.",
            "What are you interested in?",
            "I bought the first one you mentioned. I did about 1/3 of it, and I personally felt like I needed a more intro level course. He does a great job of explaining, and if you have questions he seems to reply rather quickly.",
            "[https://www.udemy.com/course/go-golang-develop-modern-fast-secure-web-applications/](https://www.udemy.com/course/go-golang-develop-modern-fast-secure-web-applications/)\n\nWhat about this one?\n\n[last one is available for free on YouTube as well](https://youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE)",
            "The advice to use stdlib as much as possible and avoid frameworks isn't just dogma.  IMO it's more about where the advantages and unique aspects of the language align. PHP has amazing frameworks for building full web apps. If you need that, and thus a framework becomes massively helpful, then the app might just be more appropriately built in PHP.\n\nThe advice to only use stdlib is also sometimes a bit of dogma. Specific routing requirements require using libraries at least and once you're doing that some features of some of the frameworks become sensible. Just do your homework on the actual tradeoffs.",
            "[removed]",
            "I'm curious, what resources did you pick?",
            "You might as well just try it out. You can come to your own opinion faster than you can get opinions online. I mean, I understand asking about for-pay courses in advance, but if it's just YouTube videos, go for it. It's not like you get a failing grade if you stop after an hour.",
            "For Java developer, you should aware, this languages isn't 100% OOP you shouldn't create code as like in Java e.g. struct isn't equivalent of classes. You shouldn't create AbstractFactoryOfSomething.java or another builder, try to build as simple as possible architecture for you app without heavy architecture patterns. I don't mean Factory pattern or Singleton or Stragery are bad. Definitely NO. It's perfectly ok, but you create only when you need.\n\nCode style(in standard library and third-part libraries) isn't the same as like Java e.g. in Go code isn't prefer using descriptive variables e.g. in java you can name some context: \"networkingContext\" but we Go we prefer using shorten names or single word variable e.g. context or ctx(shortcuts or single char variables is ok too). Read more about naming variables, package, or functions you can read this: [https://go.dev/doc/effective\\_go#names](https://go.dev/doc/effective_go#names)\n\nStructure in project is different between Java and Go. You haven't to create src/com/your.name/program/mongodb....., but in Go we prefer a simple structure e.g. db or mongodb. You can read more about project structure in Go here:\n\n\\- [https://go.dev/doc/modules/layout](https://go.dev/doc/modules/layout)\n\n\\- or you can use domain names for packages as like AnothoyGG [https://www.youtube.com/watch?v=dJIUxvfSg6A](https://www.youtube.com/watch?v=dJIUxvfSg6A) (for me, it was very helpful to understand how can I think about project structure in Go)\n\nAnd the last words from me about differences between Java and Go. Trust this language. Don't try using some patterns or structures from Java in Go. You can build some simple and beautiful function without Stream<T>, mapper or building apps with magical annotation. You don't need try...catch statement to handle errors, you have simple *error* interface. The true power in Go is the simplicity.",
            "I did this ,it's great",
            "The standard library.",
            "Medium sized projects:\n\n* https://github.com/perkeep/perkeep\n* https://github.com/tailscale/tailscale\n* https://github.com/upspin/upspin\n* https://github.com/golang/website\n* https://github.com/golang/pkgsite\n* https://github.com/mjl-/mox\n* https://github.com/robpike/ivy",
            "An educational project https://github.com/benbjohnson/wtf\n\nThere are interesting discussions in https://github.com/benbjohnson/wtf/discussions and",
            "No async/await. Look into Goroutines and Channels.\n\n* https://gobyexample.com/goroutines\n* https://gobyexample.com/channels\n\nBut not before doing the [Tour of Go](https://go.dev/tour), it also covers it in the [concurrency chapter](https://go.dev/tour/concurrency/1).",
            "That's pretty neat",
            "It doesn't, something is wrong. Please make a new top -level post to the group, but read the \"How to Ask Good Technical Questions\" linked in the New page first, because you don't have anywhere near enough to help you.",
            "The standard library has what you'd need for that.\n\nFor multiprocessing, when I was doing this, I generally had a setup like this for cases where I was processing row-by-row:\n\n1. One goroutine wraps a [bufio.Scanner](https://pkg.go.dev/bufio#Scanner) around the io.Reader input, and gathers up a chunk of lines, maybe about a thousand.\n2. Those lines are sent over a channel to a worker. Several workers are spawned to read on that channel. They each JSON parse the line and do... whatever it is they're going to do. Then they JSON marshal the new line into a new []byte and store them all up, to send them down to...\n3. A goroutine responsible for writing incoming lines to the new file or target location.\n\nVariations on that theme can take summary statistics from a lot of lines and then combine them in the final goroutine, etc.\n\nIt's a good exercise to set that up, and then once you do the skeleton is useful for a lot of things where you can stream vast quantities of JSON through a single OS process that Python would not be able to handle.\n\n`encoding/json` in the standard library is also not the fastest parser and you can get some further speed gains by using some of the faster libraries, but those come with tradeoffs of their own. Not terrible ones, but the really fast ones do require a bit more work. Start with `encoding/json` and if it's already fast enough there's no reason not to stick with it.",
            "Separation of Concerns. If smth is wrong, you should check on your log for \"ERROR:\"-s.\n\nConsistency.\n\nReusability of the code. The classic of programming.\n\nFlexibility. DIY etc. You can flex your logger for your needs.\n\nEfficiency. [log.New](https://log.New) is optimized.\n\n&#x200B;\n\nEDT\n\nIf you use a third-party logger, there is a high chance that it has a lot of stuff that you don't need.",
            "why are you copying me LOL SAME thing, same reason same everything! Lets \"GO\"!!!",
            "+1.",
            "[deleted]",
            "Yeah if you need anything let me know",
            "Well the historical idea of the sub folders is important to keep. They are in the standard library and understanding their history is important. Like /pkg",
            "Ummm people have asked that and at the end of the day 99% isn't mine.  Others have suggested a repo.  The only thing is it relies on other sites not changing urls and there actually is more than a few dead links now.  To be honest though each time I iterate for rebuilding a site I add some of these and then I go back to a better way to generate scaffolding a site and it never gets launched lol. So I guess the real answer is I gotta learn to be satisfied but that hasn't happened in years lol.  \n\nNow I'm working on a command line that I hope to use to build more scaffolding generating.  \nhttps://github.com/golangast/switchterm\n\nBut of course I can't be satisfied so now I'm working on adding data into the generated commands that will generate code lol\n\nI might have a problem....",
            "Thank you",
            "Vouch! This is also involves learning best practices, mainly test driven development.",
            "For sure my fav resource",
            "Agreed!  I've been professionally developing with Go for about a year now, and I learned a lot from that course.",
            "Hey, thanks that for that. I have taken a look at the intro. Looks interesting. I will take a bit of a further look. I had previously skipped over it, thinking learning with tests almost felt like learning it backwards, and might not cover the real fundamentals of the language I was looking for - but if you recommend it I will take another look!",
            "I like this : )",
            "Thanks for that. I looked at that previously but was a bit put off by the note saying it was written for the 2009 release. Is it still relevant? I guess as a beginner the changes might not matter as much as getting the syntax down?",
            "Learn C first and transition. I honestly believe that to be the best path for success. Do Harvard\u2019s CS50 (on YouTube)",
            "Great response.",
            "This is how I learned Go! Advent of code is a great way to learn basics of a programming language",
            "Oh, hey, I saw this on LinkedIn. This is a very, very nice list of challenges!",
            "Similar then yours. API + htmx + templ. Also somekind of thin ORM and perhaps DI, not sure about that.",
            "thanks for your feedback \ud83d\ude09",
            "its members only",
            "Downvoted for the link to the g...-s.../p...-l... repo.",
            "Wow, you dont really like Java do you \ud83d\ude00",
            "[deleted]",
            "for text processing what do I use? in python I would use regx and bs4 and those would be nice especially for the exploratory phase.  \n\n\nalso any easy ways to run a bpe tokenizer or even an ml model? I was thinking I could probably do that with a python server like thing but that adds a lot of moving text around and defeats the purpose",
            ">Lets \"GO\"!!!\n\nBoooooooooooooooooooo :)",
            "why are you copying me too",
            "xhtml isn't the same thing as htmx. There are lots of resources for go and htmx. I have only used htmx with Go's html/templates, no templ.",
            "Hi, new person to go here, how do I structure my project then? \ud83d\ude05\ud83d\ude05\ud83d\ude05",
            "This would be awesome as a repo/site and I'm sure the community would help you maintain it! (i.e. me)",
            "Idea of this article is still up-to-date. Author left the note on the beginning of article: \n\n*Note added January, 2022: This document was written for Go's release in 2009, and has not been updated significantly since. Although it is a good guide to understand how to use the language itself, thanks to the stability of the language, it says little about the libraries and nothing about significant changes to the Go ecosystem since it was written, such as the build system, testing, modules, and polymorphism. There are no plans to update it, as so much has happened and a large and growing set of documents, blogs, and books do a fine job of describing modern Go usage. Effective Go continues to be useful, but the reader should understand it is far from a complete guide.*",
            "Really? Do you reckon?\nGoing C always feels like such a hardcore route I never even thought about it for a first language. I will take a look at that YouTube course.",
            "My pleasure.",
            "It was free up until recently",
            "Why? Is it bad source about project structure?",
            ":D I tried to hide my \"feelings\" about Java. I came from him and I had to fight with habbits and good practices, that are good in Java, but aren't in Go. For me, it wasn't easy and I had to discovery how to write code in other language than JVM languages e.g. Java, Kotlin",
            "Regex is available both [in the standard library](https://pkg.go.dev/regexp), albeit in a form you may not be used to, and [as a library module](https://pkg.go.dev/github.com/dlclark/regexp2), with more of the features you may be used to. (Despite the name I wouldn't consider regexp2 to be \"better\" or \"the sequel\"... it's just a different model of regexp. Usually it won't matter which you use but if you need the differences you've got both to choose from.)\n\nI don't know about running models. My guess is generally no. Sadly Python just has the best support for that sort of thing.",
            "pensive emoji",
            "You are right sorry. I don't use either",
            "It depends a lot on what you are doing and how big the project is. \n\nThis is good advice.\nhttps://dave.cheney.net/practical-go/presentations/qcon-china.html#_project_structure\n\nBasically, I would ask Google bard or chatgpt because just because \"you think\" it's a good naming or good structure doesn't mean others will. I went a few years thinking I'm making things simple by calling folders a short name when in reality I was making it harder for others.  Sometimes longer names help a lot for beginners. People rarely keep them in mind and it's because they think they are doing simplicity...\n\nThe rule of thumb is basically make sure you are doing things with great purpose. Meaning don't just do things because a simple idea pops in your head. Think about that folder and code. What does it actually look like to a beginner? Are you making things harder because you think it will be tied somewhere else? \n\nAlso, internal has an actual use case. It prevents importing.\n\nThere is the Google style guide. \nhttps://google.github.io/styleguide/go/\n\nThere is also the Uber style guide\nhttps://github.com/uber-go/guide/blob/master/style.md",
            "Yeah, that's what worried me a bit.\nFeels like a lot of stuff not in it. But sounds like it might be a good starting point at least. As has the nice advantage of being free. I will definitely take a read through I think.\nUltimately it is going to be a case of reading a few things and then googling around from there I think.",
            "No, it's bad advice. If you want to learn Go you should learn Go, not a different language.",
            "Going C first flatten the terrain a lot as you're tackling the giant first, C gives you the knowledge of how your program works underlying better thanhigh-level langauges do, thus you can learn every other language easily.   \nI'm currently learning Go, coming from a C++ background I feel very comfortable and proficient tbh",
            "sad",
            "Yes.\n\nhttps://github.com/golang-standards/project-layout/issues/117",
            "I am in the same boat,i learnt C in school then C++ in college and Java at my workplace,i am rewiring my brain to learn Go, its hard to be honest, but hopefully it will be worth it :)",
            "I feel like u should be able to write a wrapper around torchlib so I may do that if no one did",
            "Ok, thanks, I'll check thos links out \ud83d\ude0a\ud83d\ude0a",
            "It's accurate, high quality, but not complete. It just doesn't cover some topics. It's a great place to start though.",
            "Oh, I didn't know about this. Thanks mate, I'll edit my post",
            "Wow, soulmate \\^\\^\n\nI never forget, when I want to write some CLI app in Go and I spent hours to searching how to inject dependency as like Spring Boot",
            "I'd argue that because the novice is unable to differentiate between what's dated and what's not they should start with something explicitly up to date and read Effective Go to get a deeper understanding later, treating it more like \"C# in Depth\" is for C# developers.\n\nSource: Am C# developer picking up Go.",
            "There isn't anything so out of date it's not relevant. Sounds like someone needs to write a blog post called \"readme after effective go\" ;)",
            "Get to it!"
        ]
    },
    "Who's Hiring? - June 2024": {
        "title": "Who's Hiring? - June 2024",
        "score": 36,
        "url": "https://www.reddit.com/r/golang/comments/1d75kti/whos_hiring_june_2024/",
        "content": "This post will be stickied at the top of  until the last week of June (more or less).\n\nPlease adhere to the following rules when posting:\n\n**Rules for individuals:**\n\n* Don't create top-level comments; those are for employers.\n* Feel free to reply to top-level comments with on-topic questions.\n* Meta-discussion should be reserved for the distinguished mod comment.\n\n**Rules for employers:**\n\n* To make a top-level comment you must be hiring directly, or a focused third party recruiter with **specific jobs with named companies** in hand. No recruiter fishing for contacts please.\n* The job must involve working with Go on a regular basis, even if not 100% of the time.\n* One top-level comment per employer. If you have multiple job openings, please consolidate their descriptions or mention them in replies to your own top-level comment.\n* Please base your comment on the following template:\n\n**COMPANY:** *\\[Company name; ideally link to your company's website or careers page.\\]*\n\n**TYPE:** *\\[Full time, part time, internship, contract, etc.\\]*\n\n**DESCRIPTION:** *\\[What does your team/company do, and what are you using Go for? How much experience are you seeking and what seniority levels are you hiring for? The more details the better.\\]*\n\n**LOCATION:** *\\[Where are your office or offices located? If your workplace language isn't English-speaking, please specify it.\\]*\n\n**ESTIMATED COMPENSATION:** *\\[Please attempt to provide at least a rough expectation of wages/salary.If you can't state a number for compensation, omit this field. Do not just say \"competitive\". Everyone says their compensation is \"competitive\".If you are listing several positions in the \"Description\" field above, then feel free to include this information inline above, and put \"See above\" in this field.If compensation is expected to be offset by other benefits, then please include that information here as well.\\]*\n\n**REMOTE:** *\\[Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?\\]*\n\n**VISA:** *\\[Does your company sponsor visas?\\]*\n\n**CONTACT:** *\\[How can someone get in touch with you?\\]*",
        "num_comments": 5,
        "comments": [
            "**COMPANY:**\u00a0WunderGraph | Senior Golang Engineer EMEA | REMOTE | Full-Time\n\n**TYPE:**\u00a0*Full Time*\n\n**DESCRIPTION:**\u00a0\n\nWunderGraph (growing global customer base, 10K weekly downloads and growing)\n\nAPIs are the backbone of every modern organization. But building and maintaining APIs is hard, especially when you'd like to scale API development across multiple teams. The key to success is collaboration.\n\nOur mission is to take API collaboration to the next level. With Cosmo, we're give platform teams a solution to provide a self-service API Developer Platform to their teams. We believe that Open Source is the key ingredient to become the number one solution for API Development and Collaboration.\n\nThe project is completely open-source.\n\nYou will be an integral member of an expanding team at a VC-funded startup with a dynamic mission to innovate and transform the field of GraphQL Federation.\n\n# What you bring to the table\n\n* **At least 5 year**\u00a0of proven Golang development experience in a leading / ownership role (must have)\n* Self-starter with a clear sense of priorities - no hand-holding needed\n* You must be willing and able to work out solutions on your own. This requires you to dig into hard problems and stay on target until you have solved an issue in a robust way.\n* Experience in working with ASTs, AST transformations etc.\n* Experience in writing performant and low GC code in Golang, and knowledge of how to benchmark Go code\n* Experience with GraphQL, API Gateways, Proxies, and Networking in general is a plus\n* Experience with OpenAPI, SOAP, gRPC, GraphQL, Apollo Federation is a plus\n* Open-source contributions are a benefit, too\n* You are able to work and thrive in a fully remote environment\n* Excellent communicator (important for a remote team) in English \n\n**LOCATION:**\u00a0*Fully remote. Proficient in english communication* \n\n**ESTIMATED COMPENSATION:**\u00a0*$80,000 - $150,000*\n\n**REMOTE:**\u00a0*Fully Remote with home office budget provided by WunderGraph*\n\n**VISA:**\u00a0*No Visa Sponsorship* \n\n**CONTACT:**\u00a0Apply here:\u00a0[https://wundergraph.com/jobs#open-positions](https://wundergraph.com/jobs#open-positions)\n\nor email me directly at stefan \\[@\\] [wundergraph.com](http://wundergraph.com)",
            "Please post all comments that are not positions under this post.\n\n[Previous postings](https://www.reddit.com/r/golang/comments/1cgxxqt/whos_hiring/).",
            "**COMPANY:**\u00a0*STERADIAN m\u00e9rn\u00f6kiroda (Native hungarian)*\n\n**TYPE:**\u00a0*Full time*\n\n**DESCRIPTION:**\u00a0*Medior/Senior for cloud and VPS backend development. For the team dynamics, Hungarian language is a MUST HAVE.*\n\n**LOCATION:**\u00a0*Budapest District 13.*\n\n**ESTIMATED COMPENSATION:**\u00a0*You can ask the top amount from the Hungarian salary guides.*\n\n**REMOTE:**\u00a0*It's hybrid, really flexible, but you need to come to Budapest in every week.*\n\n**VISA:**\u00a0*MasterCard, Maestro... IDK how it is related here...*\n\n**CONTACT:**\u00a0*Send me your CV and your desired salary in e-mail:* [*allas@steradian.hu*](mailto:allas@steradian.hu)",
            "Dropped you an email with my resume.  \nu/Savram8"
        ]
    },
    "Donkey (d-anki). Anki-like study app in your terminal.": {
        "title": "Donkey (d-anki). Anki-like study app in your terminal.",
        "score": 19,
        "url": "https://github.com/takacs/donkey/",
        "content": "",
        "num_comments": 4,
        "comments": [
            "Super cool man, so impressive aswell",
            "cool and clean! Also I'm playing around with bubbletea and this will be a good reference",
            "Impressive buddy!!",
            "As well*"
        ]
    },
    "Logging at Top Level and Contextual information": {
        "title": "Logging at Top Level and Contextual information",
        "score": 6,
        "url": "https://www.reddit.com/r/golang/comments/1dlqrtj/logging_at_top_level_and_contextual_information/",
        "content": "Hey gophers!   \n  \nI'm researching what people in the Go Community thinks about Logging and their approach to it. I know many people recommend \"Logging at top level\" so propagate the error up and then log. All this to avoid redundant and duplicate logs.  \n  \nWhile I agree with the sentiment and reasoning for the most part, I'm struggling with finding a good approach for adding Contextual information to my logs if they are returned too far in the application.\n\nI'd love to hear you're recommended approaches and useful tips n tricks that has worked out well for you!\n\nHow do you usually solve bringing useful context to logs, Wrap the error message with it and bubble it up, Log inside the functions containing the info etc.   \n  \nA small example of what I'm trying to find a good solution for is this\n\n    func main(){\n       if err := doSomething(context.Background()); err != nil {\n           // No Contextual Information regarding what went wrong\n           slog.Error(err)\n       }\n    }\n    \n    func doSomething(ctx context.Context) error {\n        // Business logic here\n        err := performTask(ctx)\n        if err != nil {\n            // Propagate the error up the stack\n            return err\n        }\n        return nil\n    }\n    \n    func performTask(ctx context.Context) error {\n        // Task-specific logic here\n        // Simulate an error\n        err := errors.New(\"something went wrong during the task\")\n        if err != nil {\n            // Option 1: Log additional context if necessary (e.g., task-specific details)\n            slog.WarnContext(ctx, \"Task encountered an issue\", slog.String(\"task_id\", \"task-123\"))\n            return err\n            // Option 2: Wrap the error with the task information\n            return fmt.Errorf(\"task_id: %s %w\", \"task-123\", err)\n            // Option 3: ?? \n        }\n        return nil\n    }",
        "num_comments": 7,
        "comments": [
            "I would go with option 2. It provides all required information about the error and if required I can log it later on higher level. Usually you don\u2019t want to log error and then return it (option 1)",
            "I am not religious about this and handle it pragmatically. I log as far to the top as feasible. However I also wrote a wrapper around `ZapCore` that allows me to mutate it and attach it to a `Context`. Whenever I need to log something or if I have new information to be enriched (`requestId`, `filename`, `userId`, etc.) I can pull the logger from the `Context` and do that right away.\n\nThe further down I am in the call stack, the more technical and fine granular the implementations (should) become, so it usually doesn't even make sense to log anything on this level.",
            "Check out www.github.com/lobocv/simplerr.\nIt is a package for neatly attaching info to your errors. I've used it to attach the context info or a scoped logger. Then you just need to write a single error handler that would extract the info from the error and log it.\nIt can do much much more than just this though. I would suggest reading the docs and trying it out.",
            "I see, and how do you handle the log in a log tool then, like Loki etc, if the actual information is stored in the error msg instead of its own Labels and Tags?",
            "Thanks for the suggestion ill have a look",
            "You can have a custom error implementation \n\n```\n// Labels capture contextual information at a moment of creating the error \ntype Labels map[string]any\n\n// implements error and unwrap\ntype LabeledError struct {\n  // do not store context.Context here \n  Labels Labels\n  Err error\n}\n\nfunc CtxErr(ctx context.Context, fmt string, args ...any){\n  // Extract context stuff from context (user, correlation id, event id, whatever)\n  \n}\n\nfunc CtxLabeledErr(ctx context.Context, Labels labels, fmt string, args ...any){\n  // Extract context stuff from context (user, correlation id, event id, whatever)\n // Merge it with Labels \n}\n```\n\nOf course it does not make sense for Info, Debug, Warn logs :D Those must be created as you go. And it would be good to enrich them with context-carried attributes too.",
            "A customerror seems to be the easiest and most straight forward solution according to me"
        ]
    },
    "I made a fun little GUI program for generating colour gradients": {
        "title": "I made a fun little GUI program for generating colour gradients",
        "score": 2,
        "url": "https://github.com/odddollar/Bilinear-gradient-generator-GUI",
        "content": "",
        "num_comments": 0,
        "comments": []
    }
}
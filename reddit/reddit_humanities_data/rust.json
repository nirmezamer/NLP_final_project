{
    "Hey Rustaceans! Got a question? Ask here (26/2024)!": {
        "title": "Hey Rustaceans! Got a question? Ask here (26/2024)!",
        "score": 6,
        "url": "https://www.reddit.com/r/rust/comments/1dn74q1/hey_rustaceans_got_a_question_ask_here_262024/",
        "content": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet. Please note that if you include code examples to e.g. show a compiler error or surprising result, linking a [playground](https://play.rust-lang.org/) with the code will improve your chances of getting help quickly.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/1dhu8le/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek. Finally, if you are looking for Rust jobs, the most recent thread is [here](https://www.reddit.com/r/rust/comments/1cixuzr/official_rrust_whos_hiring_thread_for_jobseekers/).",
        "num_comments": 80,
        "comments": [
            "I can't get the Rust  analyzer to work in VSCode on my iMac. I have the extension installed. There is no intellisense or formatting working for Rust. Any suggestions?  Thanks.",
            "Is it possible for the code that creates a future to pre-ready it if the conditions are already met? I know there's a future::ready() but that returns a specific type, it doesn't generically make a future ready. That would require returning a box dyn future, which is doable but not as clean, because now there are lifetimes involved in the future and more allocations and all that.\n\nIt would be enormously beneficial and performance enhancing to be able to do that, so I'm assuming it must be doable and I'm just not looking in the right dark corners.",
            "Can I make all my functions unsafe and use Rust as a better C (with destructors, sum types, operator overloading, generics, etc.)? And it'll generate more-or-less the same machine code as if I had used C, right?\n\nIn other words, is the LLIR that Rust generates much worse than the LLIR that Clang generates for similar code?",
            "You can `impl Write for &dyn Thing` (not `dyn Thing`), then `write!(ref_to_thing, ...)`.",
            "You'd have to wrap your object with Mutex or RwLock or an equivalent structure.",
            "Yes, that is on purpose. It's a consequence of Rust being a functional language. When you declare a type, what you are actually declaring is all the possible constructors for that type. Constructor is a function that yields the instance of the type. In case of `struct` there is exactly one such constructor. In case of `enum` there's one constructor per variant.\n\nIf you think about it, what is an instance of that type? It is a call to the constructor with appropriate arguments! You can even \"undo\" this \"call of the constructor\" by destructuring in `let` expressions and `match` expressions. In functional languages, it's functions all the way down.",
            "It's just a constructor for a 0 element tuple variation, not necessarily useful but is a result of enums being able to represent what they can",
            "Could you copy all the imports and then remove the ones that you don't need? I think the LSP action should do them all in one, otherwise I'm pretty sure there is some flag you can pass to `cargo check` to auto apply the stuff that it can",
            "You can have two functions, one for mutable and one for immutable, or you can make your function return an index.",
            "Have you created a project with cargo new and then opened the project in vscode? Just a single rust file will not be picked up."
        ]
    },
    "This Week in Rust 553 \u00b7 This Week in Rust": {
        "title": "This Week in Rust 553 \u00b7 This Week in Rust",
        "score": 37,
        "url": "https://this-week-in-rust.org/blog/2024/06/26/this-week-in-rust-553/",
        "content": "",
        "num_comments": 1,
        "comments": [
            " TWIR @ Reddit\n\nHey everyone, here you can follow the r/rust comment threads of articles featured in TWIR (This Week in Rust).\nI've always found it helpful to search for additional insights in the comment section here\nand I hope you can find it helpful too.\nEnjoy !\n\n\n##Project/Tooling Updates\n- [New version of Ratatui is released! (Rust library for cooking up terminal user interfaces) ](http://www.reddit.com/r/rust/comments/1dnb5no/new_version_of_ratatui_is_released_rust_library/) `94 | 4 comments`\n- [uuid now properly sorts v7 ids](http://www.reddit.com/r/rust/comments/1dn5ge4/uuid_now_properly_sorts_v7_ids/) `48 | 18 comments`\n- [godot-rust now on crates.io, with the godot crate!](http://www.reddit.com/r/rust/comments/1dnmjtl/godotrust_now_on_cratesio_with_the_godot_crate/) `360 | 18 comments`\n- [Release 0.2.0 of rust GUI for Raspberry Pi GPIO control/viewing](http://www.reddit.com/r/rust/comments/1do1q3z/release_020_of_rust_gui_for_raspberry_pi_gpio/) `27 | 1 comment`\n- [What's new in git-cliff 2.4.0? | Changelog Generator written in Rust](http://www.reddit.com/r/rust/comments/1dovj35/whats_new_in_gitcliff_240_changelog_generator/) `23 | 1 comment`\n\n##Observations/Thoughts\n- [Claiming, auto and otherwise [Niko]](http://www.reddit.com/r/rust/comments/1dl4bou/claiming_auto_and_otherwise_niko/) `109 | 83 comments`\n- [Notes on ownership and substructural types](http://www.reddit.com/r/rust/comments/1dlxmm6/notes_on_ownership_and_substructural_types/) `161 | 32 comments`\n- [Puzzle: Sharing declarative args between top level xor subcommand using Clap](http://www.reddit.com/r/rust/comments/1do2nec/puzzle_sharing_declarative_args_between_top_level/) `2 | 0 comment`\n- [Running Rust in a Wasm Sandbox, the How and the Why](http://www.reddit.com/r/rust/comments/1dlaxai/running_rust_in_a_wasm_sandbox_the_how_and_the_why/) `5 | 4 comments`\n- [[post] in-place construction seems surprisingly simple?](http://www.reddit.com/r/rust/comments/1dn9jw3/post_inplace_construction_seems_surprisingly/) `48 | 29 comments`\n- [(First Rust project): Hypertext > plaintext for source code?](http://www.reddit.com/r/rust/comments/1dob6bj/first_rust_project_hypertext_plaintext_for_source/) `0 | 4 comments`\n\n##Rust Walkthroughs\n- [Master Rust by Playing Video Games](http://www.reddit.com/r/rust/comments/1dogh06/master_rust_by_playing_video_games/) `53 | 8 comments`\n- [Tutorial - Comprehensive guide to nom parsing](http://www.reddit.com/r/rust/comments/1dkm2dr/tutorial_comprehensive_guide_to_nom_parsing/) `7 | 5 comments`\n- [What is a CIDR trie and how can it help you?](http://www.reddit.com/r/rust/comments/1dncdip/what_is_a_cidr_trie_and_how_can_it_help_you/) `3 | 2 comments`\n\n##Miscellaneous\n- [An Interview with Luca Palmieri of Mainmatter](http://www.reddit.com/r/rust/comments/1dklvke/an_interview_with_luca_palmieri_of_mainmatter/) `24 | 1 comment`"
        ]
    },
    "Struggling to learn Rust": {
        "title": "Struggling to learn Rust",
        "score": 11,
        "url": "https://www.reddit.com/r/rust/comments/1dr743k/struggling_to_learn_rust/",
        "content": "The truth is that my experience learning rust is being a bit bad, I don't like to advance in a programming language without understanding exactly what each thing does, where it comes from, why it is done this way. I think it's the best way to learn slowly and cleaning all the corners. But I'm certainly struggling to do that with rust, I had to quickly \"choose\" a rust framework to make a web microservice and I certainly don't know where to start from. I was looking at different frameworks like axum, actix, warp but they are very similar to each other as far as I could see they are just implementations of doing different things but very small but they all use dependencies like tokyo, hyper etc. I would like to get some advice. ",
        "num_comments": 19,
        "comments": [
            "I'm not sure a web service is a good place to start learning rust as they typically do some tricks to improve ergonomics of writing the service, but can seem like magic without understanding the intervals which are very advanced rust. \n\nA CLI might be a better starting point: Rust is particularly suited for them, and you could them be introduced to some of the magic crates like serde at a level where you are more likely able to grok what is being done.",
            "I tried to start programming with Rust. It was too much. I started using C then C++ and I am now back at learning Rust and now that I understand the problem space and what problems Rust is trying to solve it clicks way quicker. \nRust is not a good first language imho.",
            "Trying to learn rust using a high level web framework is like trying to learn ruby by learning rails it doesnt work because there is far too much hand wavy magic thatll confuse you.",
            "Rust is not JS. Learn the language first.",
            "In JS you learn the framework first and the language will bend to your silly spaghetti code and work some of the time.\n\nIn Rust, you must learn the language before learning a framework. Rust is not lenient enough to overlook your lack of understanding like JavaScript does.",
            "Dude this is a good answer. Thanks.",
            "To really master the craft, you need to understand all levels of the hierarchy ",
            "Probably you made a mistake. In my opinion Rust is a good first language.",
            "I always say: Rust is not difficult, Rust is just different. It takes time to understand (and accept) the differences. \n\nIf you don't accept the new concepts in Rust and want to stick to the old ones, the learning curve is steep. But if you are willing to give up old concepts and are open to new ones, the curve becomes flatter.",
            "Great it worked for you but I suspect you are the exception. Maybe you would like to give arguments as to why you think rust is a good first language ?"
        ]
    },
    "I made a Vector Calculus crate!": {
        "title": "I made a Vector Calculus crate!",
        "score": 14,
        "url": "https://www.reddit.com/r/rust/comments/1dr3ge0/i_made_a_vector_calculus_crate/",
        "content": "So after reading the post of the guy who made the multicalc crate, I found it intriguing and tried to use it, but I founded a bit too hard to use, and it lacked some features that I, haven just taken my vector calculus class at uni (I'm a physics student) really wanted.\n\nSo, as I'm on summer I took the week to write a library for Rust that is really easy to use, mimicking something more high-level, yet still written in Rust so that it's relatively fast and adding to the \"Rust ecosystem\" myself.\n\nYou can find the crate as [vector\\_calculus](https://crates.io/crates/vector_calculus) on [crates.io](http://crates.io), and the documentation on [docs.rs](https://docs.rs/vector_calculus/0.1.0/vector_calculus/), I tried to make it as detailed as possible, so please give it a try and let me know if there are any improvements that you would like to see, or if there are other algorithms that provide more accurate numerical results.\n\nThe crate is meant to be able to evaluate double integrals, contour integrals, apply the fundamental theorem of line integrals, surface integrals, and other stuff that I will be using to check numerically my answers in the future.\n\nAs a side note, you do have to be using the nightly toolchain for this crate, because Fn implementations are still experimental and I just found it nicer to have the ability to evaluate vector functions, for example, which are enums, as `vf(1., 2.)` instead of having to use a method like `vf.call(1., 2.)`",
        "num_comments": 3,
        "comments": [
            "Thankyou! I'm glad you liked it :)  \nAs of the integration, I saw the Gauss-Legendre quadrature on my numerical methods class and figured it worked better than Riemann for small intervals, like \\[0, 2pi\\] or so, and it is really really fast since it's not iterative, so I made it the default. However, you're right I didn't really try it with integrals that can go from 0 to infinity, or more complex functions. Do you have an algorithm in mind that could work better as the default? I also added other, more accurate methods as options but you're right, the default should work well most of the time lmao",
            "Very impressive project! You are certainly not the typical 4th semester physics student :D\n\n\nI really like how much effort you have put into the docs\n\n\n\nOne thing I wondered when I read some of your code: Why is GaussLegendre the standard integration technique? It only evaluates the function on 5 points on the interval. This can certainly not work for arbitrary functions... Or am I missing something here?",
            "I'm gonna plug [gauss-quad](https://crates.io/crates/gauss-quad) then, a Gaussian quadrature crate I am one of the maintainers of! We've implemented a non-iterative Gauss-Legendre algorithm that is O(n) :D"
        ]
    },
    "Truck: a shape processing/CAD kernel in Rust": {
        "title": "Truck: a shape processing/CAD kernel in Rust",
        "score": 24,
        "url": "https://github.com/ricosjp/truck",
        "content": "",
        "num_comments": 0,
        "comments": []
    }
}
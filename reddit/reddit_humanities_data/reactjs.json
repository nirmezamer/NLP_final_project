{
    "Introducing React Compiler \u2013 React": {
        "title": "Introducing React Compiler \u2013 React",
        "score": 264,
        "url": "https://react.dev/learn/react-compiler",
        "content": "",
        "num_comments": 48,
        "comments": [
            "One ever present debate in the React community had been whether you should \\`useMemo\\`/\\`useCallback\\` all non-primitive props or not. I've often taken [the position that you should in real world teams because it's too much work to determine exactly when to otherwise](https://attardi.org/why-we-memo-all-the-things/), whereas others argue that it's too much runtime overhead (and noise) and not worth it. u/acemarke has [a good summary of the arguments](https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#memoize-everything).\n\nAll that to say, I was curious if this compiler is essentially the React team conceding that you \\_should\\_ memoize everything. The answer is pretty interesting - [the compiler actually memoizes things in a more efficient way than \\`useMemo\\` can](https://github.com/reactwg/react-compiler/discussions/6). So it's almost the best of all worlds: improved rendering performance from memoization, cheaper memoization cost, and none of the noise of \\`useMemo\\`s sprinkled everywhere.\n\nI think we'll have to wait a bit longer to see if this works out in practice, and I'm not crazy about having to add another layer of transpilation, but if it works well this will be a pretty big win for React projects in general I think.",
            "Conference-driven development is for real :-)",
            "Praying for everyone who\u2019s dependent on esbuild/swc and now needs to add babel back into their build pipeline.",
            "This is awesome!",
            "It\u2019s funny, posts in r/sveltejs of them becoming more like React. And now React becoming more like Svelte. I wonder if they\u2019ve ever thought of actually working together? It\u2019s not like they\u2019re making any money off this stuff right?",
            "It\u2019s happening.gif",
            "!remindme 6h",
            "429/472 components compiled. Interesting and strange.",
            "Would this make Preact obsolete?",
            "I am working on my first react project, I am building a signup form that performs a CRUD operation on MySQL database, (https://github.com/nyendwa/React-Signup). However, though everything looks okay, I am not sure why I am unable to populate my database, I am asking experienced developers to look at my work and point out any missing pieces from my project. Your reviews will greatly put me on a path of great success as a self-taught developer."
        ]
    },
    "Beginner's Thread / Easy Questions (June 2024)": {
        "title": "Beginner's Thread / Easy Questions (June 2024)",
        "score": 3,
        "url": "https://www.reddit.com/r/reactjs/comments/1d6glld/beginners_thread_easy_questions_june_2024/",
        "content": "Ask about React or anything else in its ecosystem here.    (See [the previous \"Beginner's Thread\" for earlier discussion](https://www.reddit.com/r/reactjs/comments/1cio3gs/beginners_thread_easy_questions_may_2024/).)\n\nStuck making progress on your app, need a feedback?\nThere are no dumb questions. We are all beginner at something \ud83d\ude42\n\n---\n\n## Help us to help you better\n\n1. Improve your chances of reply\n   1. Add a minimal example with [JSFiddle](https://jsfiddle.net/Luktwrdm/), [CodeSandbox](https://codesandbox.io/s/new), or [Stackblitz](https://stackblitz.com/) links\n   2. Describe what you want it to do (is it an [XY problem](https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem)?)\n   3. and things you've tried. (Don't just post big blocks of code!)\n2. **[Format code](https://www.reddit.com/r/reactjs/wiki/index#wiki_formatting_code)** for legibility.\n3. **Pay it forward** by answering questions even if there is already an answer. Other perspectives can be helpful to beginners.\n   Also, there's no quicker way to learn than [being wrong on the Internet](https://xkcd.com/386/).\n\n---\n\n## New to React?\n\nCheck out the sub's **sidebar!** \ud83d\udc49 For rules and free resources~\n\nBe sure to check out the React docs: https://react.dev\n\nJoin the Reactiflux Discord to ask more questions and chat about React: https://www.reactiflux.com\n\n**Comment here for any ideas/suggestions to improve this thread**\n\n_Thank you to all who post questions and those who answer them._\n_We're still a growing community and [helping each other](https://en.wikipedia.org/wiki/Learning_by_teaching) only [strengthens it](https://www.swyx.io/writing/learn-in-public/)!_",
        "num_comments": 60,
        "comments": [
            "I'm building out a bunch of small atom components (eg text inputs, buttons, etc).\n\nI want to be able to pass an unlimited amount of attributes (eg data attributes) to each component. I just don't know how to go about this if I don't know the attribute's names before hand.\n\nEg if I have a `<Button>` component I want to set a bunch of data attributes as such:\n\n    <Button \n        label=\"Read more\"\n        link=\"/somepage\"\n        attrs=\"data-tracker-id='abc123' data-js-trigger='js-click' id='button4567'\"\n    />\n\nBut I'm unsure how to add these props in my actual component, without also having to provide a key.\n\n      <a className=\"btn\" {attrs} href={link}>\n          {label}\n      </a>\n\nI've tried many variations of the above and failed.\n\nMy end goal would be to have something compile like this:\n\n     <a class=\"btn\" data-tracker-id='abc123' data-js-trigger='js-click' id='button4567' href=\"/somepage\">Read more</a>\n\nI suppose I could send the attributes as an object, but that seems like a bit of overhead. I'm sure React has a way to do this out-of-the-box that I just haven't found yet.\n\nWould anyone know if this is achievable?\n\nMany thanks!",
            "I have existing knowledge of html, css, and js. I know a significant portion of the basics of react as well (I know about components, props, useState, useEffect, event handlers and im in the process of learning prop drilling and class components.) \n\nHow far do you guys think I am from being able to put together a hireable portfolio? I'm really trying to get hired this summer and i plan on working on this for 95% of the days in the next two months. I also need to learn git/version control and I need better knowledge of routing and testing as well.\n\nI basically plan on finishing up learning react from Brad traversy's 2022 udemy course, then studying git and version control for a few days, then some more learning about the terminal, then cooking up a portfolio, and finally applying to jobs while networking at any irl events in my city (Chicago, IL) trying to create some contributions to some open source projects to add to my resume in hopes that it can convince someone to hire me even though I don't have professional experience or a degree. I'd really appreciate any answers to my main question above or advice/redirection on this plan if anyone thinks I'm missing something.",
            "When JSX recompiles is this done by sub/pub or a event from useState()?",
            "is there a web that cover all reactjs topics (from simple to complex) in like a blogging manner? (not documentation)",
            "what is a good portfolio website like for reactjs or frontend developer, I saw many flex their beautiful looking web, but I feel inferior because I dont know how to design at all.",
            "I am trying to fetch 2 GET requests from my back-end express.js server and display them on my front-end react.js. However,  I can fetch the first request but not the second, although I cannot see anything wrong or missing from the code I have already written.\n\nback-end server.js -\n\n    const express = require(`express`);\n    const cors = require(`cors`);\n    const app = express();\n    \n    // Define the port number for the server //\n    const PORT = process.env.PORT || 5000;\n    \n    // Enable Cross-Origin Resource Sharing //\n    app.use(cors());\n    \n    // Define the route to retrieve the message //\n    app.get(`/api/data`, (req, res) => {\n    \u00a0 const data = { message: `hello from the back end` };\n    \u00a0 res.json(data);\n    });\n    \n    // Define a 2nd route to retrieve the message //\n    app.get(`/api/message`, (req, res) => {\n    \u00a0 const message = `I am the back-end server, nice to meet you!! ;)`;\n    \u00a0 res.send(message);\n    });\n    \n    // Start the server //\n    app.listen(PORT, () => {\n    \u00a0 console.log(`server is running on port ${PORT}`);\n    });\n    \n\n    // front-end - react.js\n    // import useState, useEffect and axios //\n    import React, { useState, useEffect } from \"react\";\n    import axios from \"axios\";\n    import \"./App.css\";\n    \n    // create App component //\n    function App() {\n    \u00a0 // create data and customMessage state variables //\n    \u00a0 const [data, setData] = useState({});\n    \u00a0 const [customMessage, setCustomMessage] = useState();\n    \n    \u00a0 // fetch data every time the component loads //\n    \u00a0 useEffect(() => {\n    \u00a0 \u00a0 fetchData();\n    \u00a0 }, []);\n    \n    \u00a0 // Function to fetch data from the server //\n    \u00a0 const fetchData = async () => {\n    \u00a0 \u00a0 try {\n    \u00a0 \u00a0 \u00a0 const response = await axios.get(`/api/data`);\n    \u00a0 \u00a0 \u00a0 setData(response.data);\n    \u00a0 \u00a0 \u00a0 console.log(data);\n    \u00a0 \u00a0 } catch (error) {\n    \u00a0 \u00a0 \u00a0 console.error(`Error fetching data:`, error);\n    \u00a0 \u00a0 }\n    \u00a0 };\n    \n    \u00a0 // fetch data every time the component loads //\n    \u00a0 useEffect(() => {\n    \u00a0 \u00a0 // Function to fetch data from the server //\n    \u00a0 \u00a0 async function fetchMess() {\n    \u00a0 \u00a0 \u00a0 const response = await axios.get(`api/message`);\n    \u00a0 \u00a0 \u00a0 setCustomMessage(response.customMessage);\n    \u00a0 \u00a0 \u00a0 console.log(customMessage);\n    \u00a0 \u00a0 }\n    \u00a0 \u00a0 fetchMess();\n    \u00a0 }, []);\n    \n    \u00a0 return (\n    \u00a0 \u00a0 <div className=\"App\">\n    \u00a0 \u00a0 \u00a0 <header className=\"App-header\">\n    \u00a0 \u00a0 \u00a0 \u00a0 {/* Display the message, or 'Loading...' if data is not yet fetched*/}\n    \u00a0 \u00a0 \u00a0 \u00a0 <h1>{data.message || `loading...`}</h1>\n    \u00a0 \u00a0 \u00a0 \u00a0 <h1>{customMessage || `loading...`}</h1>\n    \u00a0 \u00a0 \u00a0 </header>\n    \u00a0 \u00a0 </div>\n    \u00a0 );\n    }\n    \n    export default App;",
            "I'm looking for a walkthrough project that has you build a React web app from start to finish.\n\nI'm currently going through Codecademy's React section, and I'm finding that there isn't anywhere near enough hands on with it. all of my coding has been in the Codecademy editor, and I want an off-platform project to see how react works from the ground up instead of always starting with half complete projects that I'm basically just debugging.\n\n  \nThanks in advance.",
            "Hey guys. I understand that setting the `value` prop of an input alone makes it uneditable, but I don't quite get the reason behind it.\n\n    <input value=\"hey\" />\n\nThe value prop is set to a primitive here, and when we, as the user, edit the text, the code does not set any state variables, so there is no reason for React to perform a re-render and cause the input element to be rendered again with \"hey\" as its value, and thus make it practically \"uneditable\". And even when the value prop is a state variable, if we don't set that state in an onChange event handler, that shouldn't trigger a re-render.\n\nSo why exactly does React re-render the input element here? What mechanism keeps the value fixed?",
            "Hey  \nWorking on this Pomodoro Chrome Extension for a while now.The functionality is all fine but when I upload as an extension on chrome,the timer works initially but when I click away , the React states all reset  \nI want the timer to keep on working and when it ends , Ive set up a notification to alert the user.\n\nI want chrome to store the state of my countdown and not set it to default when i click away from the extension.I guess chrome storage has to be used but I have no idea how to\n\nlink:\u00a0[https://github.com/SerDunk/Pomodoro-chrome-ext](https://github.com/SerDunk/Pomodoro-chrome-ext)\n\nAny help would be appreciated!",
            "Props are really hurting my brain.\n\nFor an example, let's say I want to make a component that renders someone's name.\n\nIn \"Greeting.js\":\n\n    function Greeting(props) {\n      return <h1>{props.name}</h1>\n    };\n    \n    export default Greeting;\n\nIn App:\n\n    import Greeting from './Greeting';\n    \n    function App() {\n      return (\n    <Greeting name=\"Tom\" />\n    )};\n\nIs this how that would be done? Adding the information to the component in the top-level file, and then  giving the component props and having it render that way?\n\nWhat would this look like if I wanted to work with JSON from an API?"
        ]
    },
    "I made an app to calculate EVERYTHING you need to make sourdough Bread\n": {
        "title": "I made an app to calculate EVERYTHING you need to make sourdough Bread\n",
        "score": 11,
        "url": "https://www.reddit.com/r/reactjs/comments/1dlptl5/i_made_an_app_to_calculate_everything_you_need_to/",
        "content": "Since I am both a chef, a bread enthusiast and a software developer, I decided to combine these things and I made [this](https://bread-dough-calculator.vercel.app/).\n\nTo make it I used vite, React 18.2 and Ant Design.  \nI did not use Typescript because I was lazy and I regret it lol  \nWould love to know what you think.",
        "num_comments": 8,
        "comments": [
            "Cool stuff! Any plans to introduce recipe suggestions or something like that?",
            "Nice. Some suggestions: think about international settings for flour, because as a German your english centric flour names don't make really much sense to me.\n\nAlso, all the fields which only accept numbers should be defined as type=\"number\" do that when my mobile keyboard pops up I only get numbers",
            "This is great, I\u2019ve recently moved to central Europe and it\u2019s impossible to buy the strong white flour I\u2019m used to using for making starter and sourdough in the uk. Do you have any advice on what type of flour to buy here to make nice sourdough?",
            "thanks! Adding recipes suggestions seems like a lot of work ahah but that's a good idea! Like a button that says \"show me an example\" and automatically fills the flour mix. Or you could just select a recipe from a list.",
            "My advice is to absolutely buy pure wheat gluten from the web and add it to your dough! Usually 5-10% pure gluten does the trick. With my app, you can still put it like it's a normal flour. Just add a protein content around 70%.",
            "Yes, exactly that! Not as in full-blown recipes but a baseline that you can tweak afterwards. Asking as a non-chef \ud83d\ude05",
            "Ok! I\u2019ll try this thanks!",
            "that's actually a great idea! I will work on that :)"
        ]
    },
    "What's your preferred method to transform ISO timestamps from backend into local user date?": {
        "title": "What's your preferred method to transform ISO timestamps from backend into local user date?",
        "score": 24,
        "url": "https://www.reddit.com/r/reactjs/comments/1dlhhnt/whats_your_preferred_method_to_transform_iso/",
        "content": "We receive dates from our backend in iso format, for example:\n\n    2024-06-20T22:51:20.801454-07:00\n\nThere are several packages that can help with this process like `date-fns` or `moment.js` or you can use some sort of function similar to pythons strftime().\n\nWhich is your preferred method to display time in user's local time?",
        "num_comments": 30,
        "comments": [
            "If you're just wanting the localised time, native formatters do a decent job without needing a library.\n\n\n```\nconst d = new Date('2024-06-20T22:51:20.801454-07:00');\nconsole.log(new Intl.DateTimeFormat(undefined, { timeStyle: 'long'}).format(d));\n\n\n```",
            "Date-fns gets used in every project I work on",
            "Date.parse(someISOString) \n\nmyDate.toLocaleString()",
            "If printing local time for the user, just new Date(yourApiString) is fine -- the default string representation of the Date object will display the date and time in user's locale anyway\n\ndatefns and dayjs are both good for formatting the Date obj for display",
            "I use dayjs and call it a day",
            "You are missing TimeZone. \n\nJust with the -07:00 is not enough to calculate properly the Hour in a country,\n\nWhy not? DST?\nDST? Daylight Saving Time.\n\nTwo countries can have same OFFSET (-07:00) but one decided to not move one hour forward/backward during summer/winter, while the other does. \nSo basically \u201cthe hour\u201d of a country is nowadays a Political thing. Tomorrow your country can decide to move 3 hours in Summer and 3 in winter (why not?), so Political. But the \u201c07:00\u201d is just a geographical thing. \n\nIE, in Arizona (same OFFSET) one part follows DST strategy, the other part does not. Hence several months at year their hours are not the same. This reveals the need of applying the \u201cpolitical\u201d bit which is the TZ (timezone) \n\nSo you need the Timezone (\u201cEurope/Madrid\u201d or \u201cAtlantic/Canary\u201d, etc\u2026) string to know the Politics strategy of the area and calculate the hour properly. \n\nJust a tip, because i didnt see it in your question. And it is the most important bit, otherwise it will just work in your area.",
            "date fns\u00a0",
            "Dayjs",
            "Just use dayjs, mate.",
            "Unix"
        ]
    },
    "Nested children needs to hear from same websocket": {
        "title": "Nested children needs to hear from same websocket",
        "score": 2,
        "url": "https://www.reddit.com/r/reactjs/comments/1dlsd9g/nested_children_needs_to_hear_from_same_websocket/",
        "content": "I have a parent component that opens the socket connection. Inside the parent component I have 4 children components that needs to update values based on message received from socket. When I tried to update state in the parent component and pass it to the childrens as prop, react bundles the state change and only few data gets updated.\n\nTo solve that I passed the socket ref to each children and defined the socket.onmessage function inside the children. The issue with this method is that socket ref can only exist with any one of the children and the onmessage function works only in the last children component. \n\nPlease suggest the best industry standard to use websocket and update value in all of the children component.",
        "num_comments": 5,
        "comments": [
            "Please share your code, I will try to solve it",
            "In context and pass the value to the parent and each child?",
            "1. Move the wss to a shared worker\n\n2. In the shared worker, update a kv store in indexeddb or just load it up in a key in local storage\n\n3. Let each of your children watch the local storage for changes (you can use signals or any messaging too)\n\n4. Update values accordingly\n\n  \nThis approach minimizes overhead in all aspects leveraging glorious web API's from Mozilla foundation. Keeping context isolation for network I/O and your browser implementation will go a long way.",
            "Use Redux or Context API to share socket state across all children components",
            "The smallest fix: replace onmessage with addEventListener('message', fn)"
        ]
    }
}
{
    "Introducing React Compiler \u2013 React": {
        "title": "Introducing React Compiler \u2013 React",
        "score": 268,
        "url": "https://react.dev/learn/react-compiler",
        "content": "",
        "num_comments": 48,
        "comments": [
            "Conference-driven development is for real :-)",
            "Praying for everyone whos dependent on esbuild/swc and now needs to add babel back into their build pipeline.",
            "Its funny, posts in r/sveltejs of them becoming more like React. And now React becoming more like Svelte. I wonder if theyve ever thought of actually working together? Its not like theyre making any money off this stuff right?",
            "429/472 components compiled. Interesting and strange.",
            "Would this make Preact obsolete?",
            "Id hardly call it a compiler, but I guess it is to some degree. Really reminds me of what Million.js did like 4 years ago.",
            "That polyfill code is really interesting. So theyre essentially using the state part of useState and mutating it? Now Im wondering if refs work similarly under the hood",
            "> and I'm not crazy about having to add another layer of transpilation, but if it works well this will be a pretty big win for React projects in general I think.\n\nId take a longer compile time over a longer runtime",
            "I refer to CDC all the time. But in my experience, it's usually introduced when the business side of your company has a looming industry conference coming up, so they decide (without consulting anyone) that the release dates for features is going to be shifted forward months to make the cut. Capacity be damned! Sometimes they even invent features to announce so they can get publicity! No specs necessary or time to prioritize and plan! Just push the code before our presentation you silly code monkeys!",
            "Heh, in this case I was told it was sort of the other way around :) They didn't start planning the conf until January, when they realized they had some features getting close to being ready."
        ]
    },
    "Beginner's Thread / Easy Questions (June 2024)": {
        "title": "Beginner's Thread / Easy Questions (June 2024)",
        "score": 4,
        "url": "https://www.reddit.com/r/reactjs/comments/1d6glld/beginners_thread_easy_questions_june_2024/",
        "content": "Ask about React or anything else in its ecosystem here.    (See [the previous \"Beginner's Thread\" for earlier discussion](https://www.reddit.com/r/reactjs/comments/1cio3gs/beginners_thread_easy_questions_may_2024/).)\n\nStuck making progress on your app, need a feedback?\nThere are no dumb questions. We are all beginner at something \ud83d\ude42\n\n---\n\n## Help us to help you better\n\n1. Improve your chances of reply\n   1. Add a minimal example with [JSFiddle](https://jsfiddle.net/Luktwrdm/), [CodeSandbox](https://codesandbox.io/s/new), or [Stackblitz](https://stackblitz.com/) links\n   2. Describe what you want it to do (is it an [XY problem](https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem)?)\n   3. and things you've tried. (Don't just post big blocks of code!)\n2. **[Format code](https://www.reddit.com/r/reactjs/wiki/index#wiki_formatting_code)** for legibility.\n3. **Pay it forward** by answering questions even if there is already an answer. Other perspectives can be helpful to beginners.\n   Also, there's no quicker way to learn than [being wrong on the Internet](https://xkcd.com/386/).\n\n---\n\n## New to React?\n\nCheck out the sub's **sidebar!** \ud83d\udc49 For rules and free resources~\n\nBe sure to check out the React docs: https://react.dev\n\nJoin the Reactiflux Discord to ask more questions and chat about React: https://www.reactiflux.com\n\n**Comment here for any ideas/suggestions to improve this thread**\n\n_Thank you to all who post questions and those who answer them._\n_We're still a growing community and [helping each other](https://en.wikipedia.org/wiki/Learning_by_teaching) only [strengthens it](https://www.swyx.io/writing/learn-in-public/)!_",
        "num_comments": 86,
        "comments": [
            "When JSX recompiles is this done by sub/pub or a event from useState()?",
            "is there a web that cover all reactjs topics (from simple to complex) in like a blogging manner? (not documentation)",
            "what is a good portfolio website like for reactjs or frontend developer, I saw many flex their beautiful looking web, but I feel inferior because I dont know how to design at all.",
            "Hi everyone, I got internship in mern stack 3 months ago. I was able to perform the tasks assigned during the internship but due to being a slow learner I wasn't selected for the job. Now I'm doubting myself if I'll be able to survive in this field because you have to continue to learn new things in this field but I'm slow at picking things up. I'm not able to grab concepts quickly. Others around me used to do things quickly by just reading documentation. I had to watch videos. Can you guys give me any advice/tips on improving my learning process. What is your approach of doing things at work? Does this improves with time or should I give up and choose some other field?",
            "Is it possible to modify a state array in realtime during a map iteration?\n\nWhat if you are mapping through a series of components, and each component is writing a value to a particular index of a state array (passed down from a common parent). Will you see the changed state array only after the entire map is done, or is it possible for it to change in the middle of mapping?",
            "So I will soon be having an internship at a new software company. For their software they are using React for the Frontend and backend Graph QL, Typescript. I want to prepare myself for this internship but i am a bit lost what should I start learning? I asked chatgpt and it told me: HTML, CSS, Javascript >> JavaScript ES6+ >> TypeScript >> React >> GraphQL  \nDoes this sound right? I do have some basic knowledge about HTML, CSS but everything else is pretty new to me.",
            "Can anyone recommend a React textbook, at least somewhat recent, that they thought was a good one? I'm working through Codecademy React courses but I think I need a second introduction with more depth. I got a lot out of a JavaScript textbook recently that I read cover to cover, even after 10 years of experience in JavaScript, I think I learn better this way than from videos or reading from a screen.",
            "what is currently the most common way to organize CSS? I've been doing the web-development thing for a long time now and really love using CSS but i've never found a way to organize it in a way that really satisfied me.",
            "react dev tools has the option to forcibly error out components. why would someone use this?",
            "I'm using react and Typescript with a component library (shadcn) and I have a date picker on a form. I want the datepicker to start out empty so I pass a value of `undefined` as a default, but as soon as I choose a date on the form, I get a big console warning that I shouldn't be switching from `undefined` to a defined value. Any idea how I would go around this and still have the datepicker be empty as a default?"
        ]
    },
    "Your own Component Sandbox vs. Storybook, Ladle, etc.": {
        "title": "Your own Component Sandbox vs. Storybook, Ladle, etc.",
        "score": 5,
        "url": "https://www.reddit.com/r/reactjs/comments/1dr9oib/your_own_component_sandbox_vs_storybook_ladle_etc/",
        "content": "I guess I have somewhat PTSD from Storybook, so many compatibility issues, bloat, etc with Storybook. I lost my marbles. I didn't try any of the newer Component Sandboxes by the way.\n\nBut I am having a nice easy time build my own Component Sandbox (vanilla app), dev on my UI library in Turborepo monorepo). But recently just thought about these sandboxes again when I had to implement something like Mobile Screen Width (which is an out of the box feature with most of these).\n\n",
        "num_comments": 0,
        "comments": []
    },
    "Sill pure if a context consuming is changing context state?": {
        "title": "Sill pure if a context consuming is changing context state?",
        "score": 1,
        "url": "https://www.reddit.com/r/reactjs/comments/1drapz5/sill_pure_if_a_context_consuming_is_changing/",
        "content": "If a component can consume context and mutate the context, is it still considered pure?\n\nI know the mutation is not happening during rendering and when it happens later react re-renders the context consuming components, but apart from that the function itself if it does not have any props/agrs then it may give different results for same call, as context has been updated between the renders.\n\nFor example consider the below example:\n\nvar globalState = 1;\n\nfunction impureHandler(){\n    globalState +=1;\n}\n\nfunction computeAddition(n){\n    return n + globalState\n}\n\n const res1 = computeAddition(2);\nimpureHandler();\n\nconst res2 = computeAddition(2);\n\nHere if the function computeAddition is impure then I am not abuse to understand how similarly structured react context consuming component which can mutate the context sate\nIs pure.\n\nWhat makes react component pure and computeAddition with similar pattern impure?\n\nPlease help me understand this, thanks",
        "num_comments": 2,
        "comments": [
            "So far what I am thinking is:\nIf we look it from the perspective of programming in general then Such React functional component is impure.\n\nBut as far as React is concerned, it only needs the component to be pure in terms of when it is being rendered and the functional component related to the question will always give the same result even if it is called multiple times during that specific render phase which is what strict mode checks for.\n\n\nBut still I feel this is so frustrating like you are now setting up your own rules to say it is pure??? Then I can also say that the function computeAddition is also pure given if you call it any number of times at that specific call for example lets consider 1st call of function computeAddition now at the specific line if you call any number of times it will be same result so now can I call computeAddition also pure????",
            "rendering must be pure, but event handlers (like click) or useEffect can perform side effects\n\nhttps://react.dev/learn/keeping-components-pure"
        ]
    },
    "TanStack Query": {
        "title": "TanStack Query",
        "score": 0,
        "url": "https://www.reddit.com/r/reactjs/comments/1dra9ci/tanstack_query/",
        "content": "Hi,\n\nSo i found out about this library which can help me in my project. \n\nBasically i found it useful to reduce contacting my server with its cashing mechanism.\n\nSo long story short in my parent component first i did implementation like this and it worked on every render\n\n    const {\n    \u00a0 \u00a0 data: name,\n    \u00a0 \u00a0 isLoading,\n    \u00a0 \u00a0 error,\n    \u00a0 } = useQuery({\n    \u00a0 \u00a0 queryKey: [\"models\", brandName],\n    \u00a0 \u00a0 queryFn: () => fetchModels(brandName),\n    \n    \u00a0 \u00a0 staleTime: 5 * 60 * 1000, // 5 minutes\n    \u00a0 \u00a0 cacheTime: 60 * 60 * 1000, // 1 hour\n    \u00a0 });\n    \n    \u00a0 const fetchModels = useCallback(async () => {\n    \u00a0 \u00a0 try {\n    \u00a0 \u00a0 \u00a0 const response = await fetch(\"http://localhost:3001/api/getModels\", {\n    \u00a0 \u00a0 \u00a0 \u00a0 method: \"POST\",\n    \u00a0 \u00a0 \u00a0 \u00a0 headers: {\n    \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Content-Type\": \"application/json\",\n    \u00a0 \u00a0 \u00a0 \u00a0 },\n    \u00a0 \u00a0 \u00a0 \u00a0 body: JSON.stringify({ brand: brandName}),\n    \u00a0 \u00a0 \u00a0 });\n    \u00a0 \u00a0 \u00a0 if (!response.ok) {\n    \u00a0 \u00a0 \u00a0 \u00a0 throw new Error(\"Error fetching models\");\n    \u00a0 \u00a0 \u00a0 }\n    \u00a0 \u00a0 \u00a0 return response.json();\n    \u00a0 \u00a0 } catch (error) {\n    \u00a0 \u00a0 \u00a0 throw new Error(\"Error fetching models: \" + error.message);\n    \u00a0 \u00a0 }\n    \u00a0 }, [brandName]);\n\n\n\nNow if i go to one page, it gets data, i go to another page new data comes in, but if i return to that first page it doesnt contact server, which is what i want. (this \"brandName\" is just a string that this parent component receives on start).\n\nOk but here's where problem start with 2nd function.\n\nThat 2nd function which is in parent, i pass it as prop to child component where it will take id, based on that id it will get info from the server, and then store that data in context, since other component needs that data to display it.\n\nOriginal without react query it looked like these:\n\n    // const handleData = useCallback(\n    \u00a0 // \u00a0 async (id) => {\n    \u00a0 // \u00a0 \u00a0 setLoading(true);\n    \u00a0 // \u00a0 \u00a0 try {\n    \u00a0 // \u00a0 \u00a0 \u00a0 const response = await axios.post(\n    \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 \"http://localhost:3001/api/getData\",\n    \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 {\n    \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelId: id,\n    \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 }\n    \u00a0 // \u00a0 \u00a0 \u00a0 );\n    \n    \u00a0 // \u00a0 \u00a0 \u00a0 setData(response.data);\n    \u00a0 // \u00a0 \u00a0 \u00a0 setLogo(logo[0].logo);\n    \u00a0 // \u00a0 \u00a0 } catch (error) {\n    \u00a0 // \u00a0 \u00a0 \u00a0 console.error(\"Error fetching motorcycle data:\", error);\n    \u00a0 // \u00a0 \u00a0 } finally {\n    \u00a0 // \u00a0 \u00a0 \u00a0 setLoading(false);\n    \u00a0 // \u00a0 \u00a0 }\n    \u00a0 // \u00a0 },\n    \u00a0 // \u00a0 [logo, setLogo, setData]\n    \u00a0 // );\n\nBut i cant make it work like i did in first example , it will work with useMutation:\n\n    const dataMutation = useMutation({\n    \u00a0 \u00a0 mutationFn: (id) =>\n    \u00a0 \u00a0 \u00a0 axios.post(\"http://localhost:3001/api/getData\", {\n    \u00a0 \u00a0 \u00a0 \u00a0 modelId: id,\n    \u00a0 \u00a0 \u00a0 }),\n    \u00a0 \u00a0 onSuccess: (response) => {\n    \u00a0 \u00a0 \u00a0 setData(response.data);\n    \u00a0 \u00a0 \u00a0 setLogo(logo[0].logo);\n    \u00a0 \u00a0 },\n    \u00a0 });\n    \n    \u00a0 const handleData = useCallback(\n    \u00a0 \u00a0 (id) => {\n    \u00a0 \u00a0 \u00a0 dataMutation.mutate(id);\n    \u00a0 \u00a0 },\n    \u00a0 \u00a0 [dataMutation]\n    \u00a0 );\n\n\n\nBut i cant get the behaviour that i want, and that is to keep data for some time, so if the user go to specific model, comes back, goes to another model, and then goes back to first model, not to send req to server.\n\nAny suggestion and is these even possible?\n\nTnx everyone.",
        "num_comments": 3,
        "comments": [
            "You dont need to useCallback with react query, also you dont need to try catch, all react query wants from the queryFn is a Promise that is resolved or rejected, react query will handle the rest",
            "This is the v4 docs, here is v5: https://tanstack.com/query/latest/docs/framework/react/guides/query-invalidation",
            "https://tanstack.com/query/v4/docs/framework/react/guides/query-invalidation"
        ]
    }
}
{
    "What's the drawback to using Npgsql with Entity Framework?": {
        "title": "What's the drawback to using Npgsql with Entity Framework?",
        "score": 28,
        "url": "https://www.reddit.com/r/dotnet/comments/1dr5hk4/whats_the_drawback_to_using_npgsql_with_entity/",
        "content": "I feel like with the Microsoft stack there is a common favoring of MSSQL. Though all things being equal, I prefer Postgres as my database of choice. Before I start building a bigger project, ARE all things equal? Am I going to encounter any weird roadblocks as a consequence of picking Postgres?",
        "num_comments": 24,
        "comments": [
            "Its probably the most common non-Microsoft database used with EF Core. Never had any issues with it!",
            "The big difference is out of the box MSSQL is case insensitive and PG is case sensitive, all other things are very similar. If you want PG to behave like MS in terms of case insensitive look at collations. EF works fine with PG.",
            "Used it for years at my previous job. Works great, sometimes better than MSSQL because it takes advantage of Postgres strengths e.g. array types.",
            "One issue I faced is using tolower more often while creating queries. Thought I suppose there are maybe some configuration that solves that.",
            "EFCore + Npgsql + NodaTime = ",
            "Nothing, efcore can use fine with postgre, mysql/mariaDB, mysql/mariaDB, cockroachDB. Oracle is 90% fine but 10% quirk case is cause by DB itself not the fault of efcore. Mssql is favor is the fact you have a localDB that often come buit-in with VS so easier for setup. But in term of query generate, DB transaction most should work fine",
            "Assuming it's the right technical choice I don't think you'll encounter any roadblocks. Npgsql has been around for a while and is very much battle tested.",
            "Postgres might work in some scenarios, while EF Core is designed to work with MS SQL. But if you need special operations  or use Stored Procedures making changes to the db  you'll still need to use old skool SQL-queries anyway. Depending on the project EF Core might not be the right solution at all.",
            "They are not equal but most likely you won't notice any differences.\nEspecially with ORM",
            "Been using it for years, very few issues."
        ]
    },
    "AMA: I created my own time series database in pure dotnet": {
        "title": "AMA: I created my own time series database in pure dotnet",
        "score": 4,
        "url": "https://www.reddit.com/r/dotnet/comments/1dravau/ama_i_created_my_own_time_series_database_in_pure/",
        "content": "I created my own (experimental) time series database in pure .Net. for fun, because it doesn't exist either.\n\n[https://github.com/harrison314/YATsDb/](https://github.com/harrison314/YATsDb/)\n\n  \nI had created a prototype in 12 hours of work.\n\n  \nWhy is there actually so little implementation of NoSQL databases in dotnet, when GO has dozens of them?",
        "num_comments": 0,
        "comments": []
    },
    "Microsoft Making Big .NET Aspire Push, So What Is It? -- Visual Studio Magazine": {
        "title": "Microsoft Making Big .NET Aspire Push, So What Is It? -- Visual Studio Magazine",
        "score": 3,
        "url": "https://visualstudiomagazine.com/Articles/2024/06/28/net-aspire.aspx",
        "content": "",
        "num_comments": 0,
        "comments": []
    },
    "What is your favorite way of returning errors from handlers/services in ASP.NET Core?": {
        "title": "What is your favorite way of returning errors from handlers/services in ASP.NET Core?",
        "score": 4,
        "url": "https://www.reddit.com/r/dotnet/comments/1dr866c/what_is_your_favorite_way_of_returning_errors/",
        "content": "Hi everyone! Recently, I started thinking about how to handle errors from services or handlers in a proper way, so that later on, at the API level, we could wrap these errors into ProblemDetails in the controller or middleware.\n\n\n\nI came up with two solutions:\n\n1. Creating domain exceptions and their child exceptions, such as NotFoundException and BadRequestException, and throwing them out of handlers or services. They can later be caught in middleware and wrapped into ProblemDetails.\n2. Create an Error class with subclasses such as NotFoundError and place it as a property with the \\[JsonIgnore\\] attribute in the BaseResult class, which will be the parent for all HandlerResult classes. We can also use this class in Microsoft-style \"Error TryDoSomething(args, out returnResult)\" methods or as an error returned as Result<> (if you use Result pattern), and later in the controller we can check if there is an error and wrap it into ProblemDetails.\n\nThe first solution seems good, but it is an anti-patern due to goto-style flow. The second solution seems better, but it's requires a bit more code for passing error back to the place where it should be processed.\n\nSo the question is: how do you handle errors from handlers or services? I've heard of Result pattern, but I'd like to know more about the error wrapper itself and its mapping to ProblemDetails.",
        "num_comments": 17,
        "comments": [
            "I like FluentResults library. Combine with TypedResults minimal API route handlers.",
            "I use global exception handler.",
            "I just return regular http results from the handlers. Why make a whole another bunch of results that will be translated into http results, if I cna just return `OkObjectResult` or `NotFoundResult` from the handler itself?",
            " Custom error objects a do messageType as a enum to say exception info warning aleart then conver the json into an object based on requirements",
            "The most expensive thing an application can directly do is throw an exception. I only throw an exception when I cross a boundary that I have no control over (i.e. a library that is consumed outside of my control).\n\nI highly suggest a Result<T> class. What you supply in the result is up to you. I tend to keep it simple with a result and an array of errors (could be messages or actual objects with more details).",
            "Second one but without subclasses. Simply object that returns result (if there is), status code and if any errors. Then creating new base controller that will handle Result object.",
            "I generally write some Result class if I know the caller can handle it. Otherwise I tend to throw exceptions if data is in an invalid expected state and the request cant continue from this.",
            "Never saw that one before... Now I'm going to have to try it out.",
            "But why? Exceptions should indicate that something is wrong with code and not the logic itself (in most cases)",
            "The question was about passing domain errors from handlers/services to api layer, not the unhandled exceptions. They, of course, must be caught globally and sent back as a 500 problem details with or without stack trace (depends on environment)"
        ]
    },
    "Jwt Bearer token stuff driving me crazy": {
        "title": "Jwt Bearer token stuff driving me crazy",
        "score": 16,
        "url": "https://www.reddit.com/r/dotnet/comments/1dqxjzq/jwt_bearer_token_stuff_driving_me_crazy/",
        "content": "I previously setup JwtBearer tokens in my version 6 of asp dot net. I recently moved to version 8 and everything is broken now. I tried the update to Microsoft.Identity.JsonWebTokens. When I try to login through the api, I see the following error message.\n\n    No sign-in authentication handlers are registered. Did you forget to call AddAuthentication().AddCookie(\"Identity.Bearer\",...)?\n\nI have the following code in my program.cs:\n\n    var jwtIssuer = builder.Configuration.GetSection(\"Jwt:Issuer\").Get<string>();\n    var jwtKey = builder.Configuration.GetSection(\"Jwt:Key\").Get<string>();\n    builder.Services.AddAuthorization();\n    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>\n    {\n        options.UseSecurityTokenValidators = true;\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ValidIssuer = jwtIssuer,\n            ValidAudience = jwtIssuer,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey))\n        };\n    });\n\nI can also confirm that I have calls further on to use authentication/authorization.\n\nWhat's the deal here? I clearly do have an auth handler registered? Or at least I did previously.",
        "num_comments": 16,
        "comments": [
            "looks similar to what I am using.  did you also include:\n\n`app.UseAuthentication();`",
            "Please show more of your Program.cs",
            "Dont remember exactly but In netcore8, there is new deserializer or some internal parts of the mechanism that also does the translation for your various claims for example from user to some standard name that user uses, you have to turn that remapping off (there is an option for that). To detect that, look at the handler and whether your claims matches those that in your token",
            "Are you calling \"SignInAsync\" anywhere in your code?",
            "Have you tried moving builder.services.AddAuthorization below builder.services.AddAuthentication?  Pretty sure you have it backwards.",
            "You just need to call the .AddCookie(...) before .AddJwtBearer(...) just like what the error said, I think...",
            "Did it work. Else dm I will send my solution",
            "Does that matter or is it just the app.Use order that matters?",
            "The order services are added to the DI container only matter if one needs to overwrite another, which is not the case with these. Unless you mean the middleware order, where order does matter, but those are added to the host.",
            "The two I mentioned are middleware.\n\nEdit: The see other users comment that replied to me. They provided a link to the ms documentation on middleware order."
        ]
    }
}
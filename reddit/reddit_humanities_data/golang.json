{
    "New at Go? Start Here.": {
        "title": "New at Go? Start Here.",
        "score": 371,
        "url": "https://www.reddit.com/r/golang/comments/18ujt6g/new_at_go_start_here/",
        "content": "If you're new at Go and looking for projects, looking at how to learn, looking to start getting into web development, or looking for advice on switching when you're starting from a specific language, start with the replies in this thread.\n\nBe sure to use Reddit's ability to collapse questions and scan over the top-level questions before posting a new one.",
        "num_comments": 165,
        "comments": [
            "I made this list over a few years.\n\nhttps://docs.google.com/document/d/1Zb9GCWPKeEJ4Dyn2TkT-O3wJ8AFc-IMxZzTugNCjr-8/edit?usp=drivesdk\n\n\nLet me know if you need anything.\n\nAlso, I don't use r/golang any longer because they keep blocking me and now you have to post a link and not just text. Pretty toxic stuff but I'm happy to help you, just not on this platform. It's been taken over I guess.",
            "I really enjoyed using https://gobyexample.com when I was starting out. Found all of the topics to be easy to follow, and I find myself referring back to it every now and again when I need a quick refresher. \n\nAs others have mentioned,  go.dev docs are also very good. Effective Go is a really well written document, in my opinion, for new starters.",
            "Start here https://go.dev/doc/",
            "I have been writing Go tutorials at [https://golangbot.com/learn-golang-series/](https://golangbot.com/learn-golang-series/) for quite sometime. Hope it helps.",
            "I'm just starting Go, what are good books or websites to learn about Go?",
            "I have templated my answer to this question..\n\n> Just going to point at a previous answer to pretty much the same question, seems to come up about every fortnight.\n>\n> https://www.reddit.com/r/golang/s/odBvaXUMcZ\n>\n> Good luck.",
            "The Go Programming Language is slightly outdated (no generics or modules) but it is one of the best books I've read on any programming language:\n\nhttps://www.gopl.io/\n\nAlan Donovan is [pretty active in the community](https://github.com/adonovan/spaghetti) and Brian Kerrigan has been co-authoring books with Rob Pike since the 80s. It's a really good book.",
            "I'm looking to get into web development, what frameworks should I use/are best/are most common?",
            "I may not say I am new to golang , I know the basics and i know here and there about go. The problem lies in that I don't know what to do after the basics. I haven't done any projects I don't do frontend.\n\nI am super confused about what to do next\n\nCan someone help me ?",
            "https://gophercises.com/"
        ]
    },
    "Who's Hiring? - June 2024": {
        "title": "Who's Hiring? - June 2024",
        "score": 36,
        "url": "https://www.reddit.com/r/golang/comments/1d75kti/whos_hiring_june_2024/",
        "content": "This post will be stickied at the top of  until the last week of June (more or less).\n\nPlease adhere to the following rules when posting:\n\n**Rules for individuals:**\n\n* Don't create top-level comments; those are for employers.\n* Feel free to reply to top-level comments with on-topic questions.\n* Meta-discussion should be reserved for the distinguished mod comment.\n\n**Rules for employers:**\n\n* To make a top-level comment you must be hiring directly, or a focused third party recruiter with **specific jobs with named companies** in hand. No recruiter fishing for contacts please.\n* The job must involve working with Go on a regular basis, even if not 100% of the time.\n* One top-level comment per employer. If you have multiple job openings, please consolidate their descriptions or mention them in replies to your own top-level comment.\n* Please base your comment on the following template:\n\n**COMPANY:** *\\[Company name; ideally link to your company's website or careers page.\\]*\n\n**TYPE:** *\\[Full time, part time, internship, contract, etc.\\]*\n\n**DESCRIPTION:** *\\[What does your team/company do, and what are you using Go for? How much experience are you seeking and what seniority levels are you hiring for? The more details the better.\\]*\n\n**LOCATION:** *\\[Where are your office or offices located? If your workplace language isn't English-speaking, please specify it.\\]*\n\n**ESTIMATED COMPENSATION:** *\\[Please attempt to provide at least a rough expectation of wages/salary.If you can't state a number for compensation, omit this field. Do not just say \"competitive\". Everyone says their compensation is \"competitive\".If you are listing several positions in the \"Description\" field above, then feel free to include this information inline above, and put \"See above\" in this field.If compensation is expected to be offset by other benefits, then please include that information here as well.\\]*\n\n**REMOTE:** *\\[Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?\\]*\n\n**VISA:** *\\[Does your company sponsor visas?\\]*\n\n**CONTACT:** *\\[How can someone get in touch with you?\\]*",
        "num_comments": 5,
        "comments": [
            "**COMPANY:**\u00a0WunderGraph | Senior Golang Engineer EMEA | REMOTE | Full-Time\n\n**TYPE:**\u00a0*Full Time*\n\n**DESCRIPTION:**\u00a0\n\nWunderGraph (growing global customer base, 10K weekly downloads and growing)\n\nAPIs are the backbone of every modern organization. But building and maintaining APIs is hard, especially when you'd like to scale API development across multiple teams. The key to success is collaboration.\n\nOur mission is to take API collaboration to the next level. With Cosmo, we're give platform teams a solution to provide a self-service API Developer Platform to their teams. We believe that Open Source is the key ingredient to become the number one solution for API Development and Collaboration.\n\nThe project is completely open-source.\n\nYou will be an integral member of an expanding team at a VC-funded startup with a dynamic mission to innovate and transform the field of GraphQL Federation.\n\n# What you bring to the table\n\n* **At least 5 year**\u00a0of proven Golang development experience in a leading / ownership role (must have)\n* Self-starter with a clear sense of priorities - no hand-holding needed\n* You must be willing and able to work out solutions on your own. This requires you to dig into hard problems and stay on target until you have solved an issue in a robust way.\n* Experience in working with ASTs, AST transformations etc.\n* Experience in writing performant and low GC code in Golang, and knowledge of how to benchmark Go code\n* Experience with GraphQL, API Gateways, Proxies, and Networking in general is a plus\n* Experience with OpenAPI, SOAP, gRPC, GraphQL, Apollo Federation is a plus\n* Open-source contributions are a benefit, too\n* You are able to work and thrive in a fully remote environment\n* Excellent communicator (important for a remote team) in English \n\n**LOCATION:**\u00a0*Fully remote. Proficient in english communication* \n\n**ESTIMATED COMPENSATION:**\u00a0*$80,000 - $150,000*\n\n**REMOTE:**\u00a0*Fully Remote with home office budget provided by WunderGraph*\n\n**VISA:**\u00a0*No Visa Sponsorship* \n\n**CONTACT:**\u00a0Apply here:\u00a0[https://wundergraph.com/jobs#open-positions](https://wundergraph.com/jobs#open-positions)\n\nor email me directly at stefan \\[@\\] [wundergraph.com](http://wundergraph.com)",
            "Please post all comments that are not positions under this post.\n\n[Previous postings](https://www.reddit.com/r/golang/comments/1cgxxqt/whos_hiring/).",
            "**COMPANY:**\u00a0*STERADIAN m\u00e9rn\u00f6kiroda (Native hungarian)*\n\n**TYPE:**\u00a0*Full time*\n\n**DESCRIPTION:**\u00a0*Medior/Senior for cloud and VPS backend development. For the team dynamics, Hungarian language is a MUST HAVE.*\n\n**LOCATION:**\u00a0*Budapest District 13.*\n\n**ESTIMATED COMPENSATION:**\u00a0*You can ask the top amount from the Hungarian salary guides.*\n\n**REMOTE:**\u00a0*It's hybrid, really flexible, but you need to come to Budapest in every week.*\n\n**VISA:**\u00a0*MasterCard, Maestro... IDK how it is related here...*\n\n**CONTACT:**\u00a0*Send me your CV and your desired salary in e-mail:* [*allas@steradian.hu*](mailto:allas@steradian.hu)",
            "Dropped you an email with my resume.  \nu/Savram8"
        ]
    },
    "Donkey (d-anki). Anki-like study app in your terminal.": {
        "title": "Donkey (d-anki). Anki-like study app in your terminal.",
        "score": 19,
        "url": "https://github.com/takacs/donkey/",
        "content": "",
        "num_comments": 4,
        "comments": [
            "Super cool man, so impressive aswell",
            "cool and clean! Also I'm playing around with bubbletea and this will be a good reference",
            "Impressive buddy!!",
            "As well*"
        ]
    },
    "Logging at Top Level and Contextual information": {
        "title": "Logging at Top Level and Contextual information",
        "score": 6,
        "url": "https://www.reddit.com/r/golang/comments/1dlqrtj/logging_at_top_level_and_contextual_information/",
        "content": "Hey gophers!   \n  \nI'm researching what people in the Go Community thinks about Logging and their approach to it. I know many people recommend \"Logging at top level\" so propagate the error up and then log. All this to avoid redundant and duplicate logs.  \n  \nWhile I agree with the sentiment and reasoning for the most part, I'm struggling with finding a good approach for adding Contextual information to my logs if they are returned too far in the application.\n\nI'd love to hear you're recommended approaches and useful tips n tricks that has worked out well for you!\n\nHow do you usually solve bringing useful context to logs, Wrap the error message with it and bubble it up, Log inside the functions containing the info etc.   \n  \nA small example of what I'm trying to find a good solution for is this\n\n    func main(){\n       if err := doSomething(context.Background()); err != nil {\n           // No Contextual Information regarding what went wrong\n           slog.Error(err)\n       }\n    }\n    \n    func doSomething(ctx context.Context) error {\n        // Business logic here\n        err := performTask(ctx)\n        if err != nil {\n            // Propagate the error up the stack\n            return err\n        }\n        return nil\n    }\n    \n    func performTask(ctx context.Context) error {\n        // Task-specific logic here\n        // Simulate an error\n        err := errors.New(\"something went wrong during the task\")\n        if err != nil {\n            // Option 1: Log additional context if necessary (e.g., task-specific details)\n            slog.WarnContext(ctx, \"Task encountered an issue\", slog.String(\"task_id\", \"task-123\"))\n            return err\n            // Option 2: Wrap the error with the task information\n            return fmt.Errorf(\"task_id: %s %w\", \"task-123\", err)\n            // Option 3: ?? \n        }\n        return nil\n    }",
        "num_comments": 7,
        "comments": [
            "I would go with option 2. It provides all required information about the error and if required I can log it later on higher level. Usually you don\u2019t want to log error and then return it (option 1)",
            "I am not religious about this and handle it pragmatically. I log as far to the top as feasible. However I also wrote a wrapper around `ZapCore` that allows me to mutate it and attach it to a `Context`. Whenever I need to log something or if I have new information to be enriched (`requestId`, `filename`, `userId`, etc.) I can pull the logger from the `Context` and do that right away.\n\nThe further down I am in the call stack, the more technical and fine granular the implementations (should) become, so it usually doesn't even make sense to log anything on this level.",
            "Check out www.github.com/lobocv/simplerr.\nIt is a package for neatly attaching info to your errors. I've used it to attach the context info or a scoped logger. Then you just need to write a single error handler that would extract the info from the error and log it.\nIt can do much much more than just this though. I would suggest reading the docs and trying it out.",
            "I see, and how do you handle the log in a log tool then, like Loki etc, if the actual information is stored in the error msg instead of its own Labels and Tags?",
            "Thanks for the suggestion ill have a look",
            "You can have a custom error implementation \n\n```\n// Labels capture contextual information at a moment of creating the error \ntype Labels map[string]any\n\n// implements error and unwrap\ntype LabeledError struct {\n  // do not store context.Context here \n  Labels Labels\n  Err error\n}\n\nfunc CtxErr(ctx context.Context, fmt string, args ...any){\n  // Extract context stuff from context (user, correlation id, event id, whatever)\n  \n}\n\nfunc CtxLabeledErr(ctx context.Context, Labels labels, fmt string, args ...any){\n  // Extract context stuff from context (user, correlation id, event id, whatever)\n // Merge it with Labels \n}\n```\n\nOf course it does not make sense for Info, Debug, Warn logs :D Those must be created as you go. And it would be good to enrich them with context-carried attributes too.",
            "A customerror seems to be the easiest and most straight forward solution according to me"
        ]
    },
    "I made a fun little GUI program for generating colour gradients": {
        "title": "I made a fun little GUI program for generating colour gradients",
        "score": 2,
        "url": "https://github.com/odddollar/Bilinear-gradient-generator-GUI",
        "content": "",
        "num_comments": 0,
        "comments": []
    }
}
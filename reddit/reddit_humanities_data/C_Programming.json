{
    "Latest working draft N3220": {
        "title": "Latest working draft N3220",
        "score": 80,
        "url": "https://www.reddit.com/r/C_Programming/comments/1ay92d4/latest_working_draft_n3220/",
        "content": "https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3220.pdf\n\nUpdate y'all's bookmarks if you're still referring to N3096!\n\nC23 is done, and there are no more public drafts: it will only be available for purchase. **However**, although this is _teeeeechnically_ therefore a draft of whatever the next Standard C2Y ends up being, this \"draft\" contains no changes from C23 except to remove the 2023 branding and add a bullet at the beginning about all the C2Y content that ... doesn't exist yet.\n\nSince over 500 edits (some small, many large, some quite sweeping) were applied to C23 after the final draft N3096 was released, this is in practice as close as you will get to a free edition of C23.\n\nSo this one is the number for the community to remember, and the de-facto successor to old beloved N1570.\n\nHappy coding! \ud83d\udc9c",
        "num_comments": 50,
        "comments": [
            "> C23 is done, and there are no more public drafts: it will only be available for purchase.\n\nWhy is that still a thing in 2024? Do other languages make their specifications only available for purchase? Anyway, just curious.",
            "So guy, what do we get in C26? /j",
            "Great news!  \nI'm just curious: Why do you call it the de-factor successor of N1570 (C99) and not N2176 (C17)?",
            "ISO being the authority here is the problem... they're so greedy! And no, you won't find \"free released standards\", since literally every single cyber crime force would shred anybody who dared publish such a thing to pieces... and yes, ***they know***, think of how gangs and cartels operate, they never stop searching for their enemy until they have his head...",
            "Identifiable identifiers for one (Unicode identifier security)",
            "N1570 was C11, C99 was N1256. Presumably they didn't say N2176 because C17 is kind of glossed over since it was a minor \"bug fix\" revision rather than a substantial update.",
            "> afaik the committees are usually unpaid volunteers\u00a0\n\nThe ones I know in person, are highly paid and highly skilled developers working in large corporations.",
            "Most committee members are working for large corporations. There are also academics and researchers and a few indy consultants. You can't just volunteer - you need to be part of a national body, which can be difficult.\n\nThe IEEE is similar (most standards are not free and participation in standardization requires membership and I think only corporate representatives can vote).",
            "The final Ada standard is always free of charge I believe.",
            "Holy shit octal has been proposed to become deprecated? I can understand the logic for K&R functions being deprecated, but what is the reason for deprecating octal? It's not really used, but it seems so minor to break backwards compatibility with.\n\n(Also, is there a place I can read proposals? I am very interested to see the other ones, thanks!)"
        ]
    },
    "\"Impressive\" projects in C?": {
        "title": "\"Impressive\" projects in C?",
        "score": 21,
        "url": "https://www.reddit.com/r/C_Programming/comments/1dra8m0/impressive_projects_in_c/",
        "content": "I've been programming in C for a while, but I realized that I haven't really made any particularly \"impressive\" projects. Sure, the code might have taken a long time to write, or utilize some really complicated algorithm, but to any non-programmer, the program itself may just be a line of nonesense printed out in a console app which they don't even use. Based on what I have seen, pretty UIs made in frameworks like React tend to get a lot more appreciation in comparison to something like a custom memory allocator or OS kernel made in C.\n\nAre there any projects that I can make in C that could be worth showing to a person with little to no computer science knowledge (family members, friends, etc)? ",
        "num_comments": 11,
        "comments": [
            "Get yourself a microcontroller (like pi pico) and write C code for it. It's a nice way to make programming have effects in real life!",
            "How about a ray tracer/path tracer? It doesn\u2019t have to be anything fancy, could output to a ppm file if you please. I made one like that a bit ago, it\u2019s great fun if you enjoy figuring out the maths behind it. You can get some really cool images out of it, which sounds ideal for you since you want to be able to show it to someone without any computer knowledge.",
            "A real-time action game. Use appropriate library, for example SDL2. Use Box2D 3.0 with what ever you choose.",
            "Any simple embedded stuff is great for showcasing for non tech people. This things are real so people can understand the value. I usually suggest arduino but sadly its not exactly C99 - you can look for substitutes",
            "You can make a Mandelbrot set visualization using the ppm file format and try to do some GPU programming",
            "Make small software renderer and render something in it. It is not that difficult and you can create a lot of fun stuff with just squares circles and basic images.",
            "I like the idea of a game. Something that does something you can watch or even better, interact with.\n\nI've used Conway's Game of Life as a programming exercise. It can be done using text or GUI and you can make it interactive.\n\nAnother option would be some kind of fractal display that develops while you watch.",
            "This, check out [Raytracing in a weekend](https://raytracing.github.io/books/RayTracingInOneWeekend.html).\n\nOr a synthesizer.",
            ">pretty UIs made in frameworks like React tend to get a lot more appreciation in comparison to something like a custom memory allocator or OS kernel made in C\n\nThat's the norm since time immemorial - people know that Michelangelo painted the Sistine Chapel ceiling, but nobody cares who built the ceiling itself!\n\n>Are there any projects that I can make in C that could be worth showing to a person with little to no computer science knowledge (family members, friends, etc)?\n\nYou can make a snake game or some cute text-based animation with little effort:\n\n[https://www.reddit.com/r/C\\_Programming/comments/1dfd1de/bear\\_ascii\\_art\\_in\\_c/](https://www.reddit.com/r/C_Programming/comments/1dfd1de/bear_ascii_art_in_c/)",
            "> but to any non-programmer, the program itself may just be a line of nonesense\n> \n> Based on what I have seen, pretty UIs made in frameworks like React tend to get a lot more appreciation\n\nSo, let me get this straight: you want to impress a person who knows nothing about programming, with a program written in C. And you believe that these people only get impressed with fancy multi-colored UIs. Right?\n\nWell, you can write a shader program with [OpenGL](https://en.wikipedia.org/wiki/OpenGL) in pure C:\n\n* https://youtu.be/f4s1h2YETNY\n\nWhich of course, can become a full-featured game engine, like [raylib](https://en.wikipedia.org/wiki/Raylib).\n\n> Are there any projects that I can make in C\n\nWell, there it is. Good luck."
        ]
    },
    "High School Student: Where to Start with Kernels, OS, and Computer Architecture?": {
        "title": "High School Student: Where to Start with Kernels, OS, and Computer Architecture?",
        "score": 4,
        "url": "https://www.reddit.com/r/C_Programming/comments/1drcarn/high_school_student_where_to_start_with_kernels/",
        "content": "Hey everyone,\n\nI'm a high school student with basic knowledge of C. I'm interested in learning about kernels, operating systems, and computer architecture, and maybe even building an OS someday.\n\nIs this a realistic goal, or should I focus on something like web development instead? Any advice on where to start would be great!\n\nThanks!",
        "num_comments": 2,
        "comments": [
            "Of course. \n\nNo, you dont need to start with web development at all. They are not related at all, if it does not interest you, it will be a waste of time. \n\nI actually don\u2019t see any reason why a high school student could not understand most of the stuff on Digital Design and Computer Architecture by Harris tbh. You don\u2019t even need to understand everything. It is used in 1st year of university, so why not give it a shot in high school? Idk maybe it\u2019s a stupid advice lol, but I\u2019d like to see what others would say on this.\n\nAlso, I would say maybe OS will be hard to understand without any real experience on programming languages. But you can easily start learning and a have understanding of how a simple microprocessor works, and build up on your knowledge from there.",
            "Sure it's realistic, it is just very hard. Don't give up and have a look at https://wiki.osdev.org/Expanded_Main_Page :)"
        ]
    },
    "2 Months of Game Dev in C": {
        "title": "2 Months of Game Dev in C",
        "score": 27,
        "url": "https://youtu.be/4mGYihePrD0",
        "content": "",
        "num_comments": 5,
        "comments": [
            "Oh, and another little trick when it comes to handling array sizes:\n\nAlthough it seems, conceptually, that the thing whose size you are interested in specifiying is the type, like so:\n\n    attk_gun = calloc(10, sizeof(gfx_particle_t));\n\n... what you really want in this case is actually *whatever the type of `attk_gun` is*, or rather, the type pointed to by `attk_gun`:\n\n    attk_gun = calloc(10, sizeof *attk_gun);\n\nYou can also write this (with subtly different semantics, I believe):\n\n    attk_gun = calloc(10, sizeof attk_gun[0]);\n\nThis is safer and will automatically suit any changes you make to the (dereferenced) type of `attk_gun`.\n\nNote: `sizeof` requires the use of parenthesis when directly specifying a type name, but not when specifying an expression. I prefer to not use the parenthesis (just like I don't use parenthesis for `return(0)`).",
            "Thank you!",
            "Nice! Good to see more people trying game dev in C :)\n\nPeople knock it for being \"too hard\", but tbh starting a game project in C  also for a game jam made me enjoy programming again after years of burnout.\n\nYou've got a great start, and the game looks fun. Keep it up!",
            "* Yeah, I stuck to one device for recording this time so the audio was a lot more stable but next time I'll try to record in a completely silent room because the noise reduction in DaVinci really had an impact on the quality. \n* Right, the \\`i32\\` main thing, how big of a difference would it really make? In my mind, the only thing that pops up is how on a 64-bit system, the default integer wouldn't be i32, it'd be i64 (correct me if I'm wrong) but even then the value I'm going to be returning isn't going to be close to the limits of any of these types. Plus, the only reason I have the argv and argc is because of how SDL\\_main defines the main function to have these parameters (though I just tried compiling by redefining main in the SDL file and it works fine, not sure if it'll work on other platforms though)\n* \ud83d\ude2d i like ptr\\_t \\* p;\n* What do you mean particle effects are overlapped by the level geometry? The geometry is drawn before the particles so the level geometry is supposed to be overlapped by the particles.\n* Hm, I don't get what you mean. Are you talking about the camera shifting and then the sparks flying out once the bullet hits something or what?\n* I tried to do something new with the video-editing this time but I tried my best to make sure that whatever was on the screen was relevant to what I was talking about like the player falling through the tiles or just showing the relevant code on screen. \n* The camera panning issue was related to me only getting tiles on the screen because when the bullet would move too far, the player would not remain on screen and the tiles the player was standing on would also not be on the screen, and so the player would just fall through. \n* Nope, thanks for telling me this as I copy-paste the makefiles I use in my other projects and I forgot to remove the opengl32 this time. \n* No Enemies in the enemies section, my bad.\n* Basically, the strncat and strlen is meant to be used for doing a look-up in the spatial hashmap. I've realized that this is really not ideal and has caused quite a bit of performance issues on an older machine I have so I will be rewriting my hash table API and most likely the cutils library that I am using. The strncat and stuff are used because the hash table only supports (string, data\\_type) key-value pairs rather than any type of key. I just wanted to get this devlog out so that I can work on this major change.\n* \ud83d\ude2d\ud83d\ude2d\n* I'll be revisiting the animation system again to just make sure that I haven't screwed up anything. \n* Outro Comments: Fair\n* Yeah, I should definitely use some defined constant (or the calloc thing you've mentioned in your second comment)\n\n  \nThank you very much for taking the time last time as well as this time to watch my video and give me meaningful feedback. I appreciate it. I have one last question, which video was better in your opinion? The first one or the second one?",
            "You're back! I'm back!\n\n- More stable audio! (But very bitrate-y, harsh compression.)\n- huh.exe!\n- Nice to see you focus on giving credit to your inspiration\n- Still `i32`'ing your `main`, I see. Although it practically doesn't matter, technically I believe your `main` function should explicitly return \"`int`\", and not a fixed sized integer, and the same regarding the `argc` parameter. Everything else in your own code is fair game. Pedantic, but I get the feeling that you don't know why, and I think you should know (and THEN you can say fuck it and use your *mostly* compatible typedefs).\n- Man, just give those `*stars` to the identifier already xD (If it's still unclear what I mean here, although controversial the consensus is to put the pointer indicator (`*`) immediately preceeding the identifier. There are reasons for this, but if you strongly prefer to infix the `*` in your own projects, then I think it's fine.)\n- Is it intended that the particle effects are overlapped by the level geometry?\n- Something about the particles that annoyed me is that the initial ramp-up follows the character sprite, and then sticks to the position it explodes from. Several ways to fix this, but as it is, I personally feel it lacks pop.\n- The video editing is a little confusing. Lots of OBS and irrelevant stuff shown on screen... I liked the transitions, tho! (but the title cards were a little fast for me to read)\n- Was the camera panning issues caused by the spatial hashmap you mentioned in the previous video?\n- Do you need to link `opengl32` when you link `SDL2`?\n- Didn't get to actually *see* any enemies in the section about enemies :(\n- I see some `strncat`'s... for example in `gfx_draw_lvl`. Suspicious. What are these for? Also `strlen`. Code smell.\n- Wait, what? What in God's name are you doing with the arrow operator xD \"`lvl -> x_pos_str`\"? :O I mean, I never even thought of that, and it looks cool and clean, but man is it unconventional. When you do, for example \"`&lvl -> tilemap`\" this code style is very misleading.\n- [@7:31](https://youtu.be/4mGYihePrD0?si=c0LH0seLqmsvCJXU&t=451) u/stianhoiland mentioned! Yep, that seems to be what I had in mind. Very lightweight as compared to a hashmap. (You don't have to explicitly set the first enum member to 0, btw.)\n- \"Tiles Around\" - I love the way you showed this in the video. Very cool. Good solution and very effective illustration of the solution.\n- Outro: Reflecting on how much longer things take to complete. My guess is that it would have taken you quite a bit longer than initially assumed, no matter what.\n- I found your code on https://github.com/1devm0/aer0blaster.1-public (which I looked for a link to but didn't find in the video description). I noticed that you're doing some sketchy stuff with the sizes of your arrays, like `particles` and `attk_gun`. Ex. you `malloc` `attk_gun` at [line 85](https://github.com/1devm0/aer0blaster.1-public/blob/c44ded6452b21de8a44b7569fb6c54133c57997f/src/main.c#L85) with a hardcoded size of `10`, and then you `memset` it at [line 266](https://github.com/1devm0/aer0blaster.1-public/blob/c44ded6452b21de8a44b7569fb6c54133c57997f/src/main.c#L266) & 277 with a hardcoded size of `10`. There are probably other places in your code where you handle these arrays like that, and if a single usage falls out of sync with the rest of your size-handling code, you've got some nasty bugs. The solution is to use either a constant (often `#define PARTICLES_MAX 120`), or a variable (often `i32 particles_count`, maybe in a struct together with `gfx_particle_t *particles`).\n- Still doing `u08` I see! My point here earlier is that I've never seen \"`u08`\", but have often seen \"`u8`\"\n\nAll in all, thanks for sharing your progress and good luck with the project! :)"
        ]
    },
    "First C \"project\" | String reversal": {
        "title": "First C \"project\" | String reversal",
        "score": 9,
        "url": "https://www.reddit.com/r/C_Programming/comments/1dr5jid/first_c_project_string_reversal/",
        "content": "As a somewhat beginner (I started C a week ago), I am proud of this and wanted to share it. This code takes a word then prints it out... but reversed. Any tips for more efficient ways I could've done this are welcome\n\n    #include <stdio.h>\n    int main() {\n    \u00a0 \u00a0int num;\n    \u00a0 \u00a0printf(\"enter amount of letters for reversal!!!!: \");\n    \u00a0 \u00a0scanf(\"%d\", &num);\n    \u00a0 \u00a0int num2 = num;\n    \u00a0 \u00a0printf(\"enter string(must have amount of letters entered): \");\n    \u00a0 \u00a0char inp[num+1];\n    \u00a0 \u00a0scanf(\"%s\", &inp); \n    \u00a0 \u00a0char* inp_p = &inp;\n    \u00a0 \u00a0\n    \u00a0 \u00a0for (int i = 0; i<=num; i++) {\n    \u00a0 \u00a0 \u00a0 printf(\"%c\", *(inp_p+num2));\n    \u00a0 \u00a0 \u00a0 num2 = num2-1;\n    \u00a0 \u00a0}\n    \u00a0 \u00a0\n    \u00a0\n    \u00a0 \u00a0\n    return 0;\n    }",
        "num_comments": 23,
        "comments": [
            "1. Write a function to do the string reversal \n2. Don't you have an off by one error in the loop?\n3. Why not just loop from the end to the front?",
            "Yeah but your iterator is incrementing. You wouldn't have to juggle the numbers so much if you just started at the end and decremented to 0. I'm on phone, but something like\n\nfor (i=string_length; i >= 0; --i)...",
            "Not gonna lie im tired right now so some things you said aren\u2019t clicking for me, but still thanks for introducing me to some things I didn\u2019t know like scanf having the potential to mess up memory, not having to use printf, etc.",
            "Ah okay I see what you\u2019re saying. Btw \u2014i decrements just like i\u2014 would right? I\u2019ve never seen the \u201c- -\u201c come before",
            "Idk about fgets so I looked it up and now from my understanding that code would get user input to place in myString right? \n\nBy the way someone said gets is bad in another comment, is there a reason for that? (if they were actually talking about fgets)",
            "That would still need a `strlen()` for search for the terminator.",
            "Yea my thought process during this was purely on making it work, I didn\u2019t think about splitting the parts into functions and commenting for a easier time, thanks",
            "\"gets\" is similar but it doesn't have a \"maximum size of string\" parameter. So if I allocate 256 characters for string storage, and the user types in a 257 character string then it will overwrite memory and mess up other variables. There is basically no way to write safe code if you're using that.",
            ">So if I allocate 256 characters for string storage, and the user types in a 257 character string then it will overwrite memory and mess up other variables.\n\nEven if user types *exactly* 256 characters, the terminating null byte would still be written outside.",
            "It's a style thing of course, I don't agree that it's particularly tricky to iterate backwards but it's a valid style the other person proposes!"
        ]
    }
}
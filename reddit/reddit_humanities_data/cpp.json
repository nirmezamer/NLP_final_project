{
    "C++ Jobs - Q2 2024": {
        "title": "C++ Jobs - Q2 2024",
        "score": 92,
        "url": "https://www.reddit.com/r/cpp/comments/1btvc6m/c_jobs_q2_2024/",
        "content": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create top-level comments for **meta** discussion and **individuals looking for work**.\n\nRules For Employers\n-------------------\n\n* If you're hiring **directly**, you're fine, skip this bullet point. If you're a **third-party recruiter**, see the extra rules below.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette][] forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n* **Proofread** your comment after posting it, and edit any formatting mistakes.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one.]\n\n&nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&nbsp;\n\n\\*\\*Compensation:\\*\\* [This section is **optional**, and you can omit it without explaining why. However, including it will help your job posting stand out as there is [extreme demand][] from candidates looking for this info. If you choose to provide this section, it must contain (a range of) **actual numbers** - don't waste anyone's time by saying \"Compensation: Competitive.\"]\n\n&nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it.]\n\n&nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?]\n\n&nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]\n\n&nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: what version of the C++ Standard do you mainly use? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nExtra Rules For Third-Party Recruiters\n--------------------------------------\nSend modmail to request pre-approval on a case-by-case basis. We'll want to hear what info you can provide (in this case you can withhold client company names, and compensation info is still recommended but optional). We hope that you can connect candidates with jobs that would otherwise be unavailable, and we expect you to treat candidates well.\n\nPrevious Post\n-------------\n\n* [C++ Jobs - Q1 2024](https://www.reddit.com/r/cpp/comments/18w2e6a/c_jobs_q1_2024/)\n\n[reddiquette]: https://support.reddithelp.com/hc/en-us/articles/205926439\n[extreme demand]: https://www.reddit.com/r/cpp/comments/sz0cd5/c_jobs_threads_should_include_salarycompensation/",
        "num_comments": 63,
        "comments": [
            "This is the top-level comment for **individuals looking for work**. Reply here if you want employers to contact you. You don't need to follow a strict template, but I suggest inverting the relevant parts of the employer template. For example, mention whether you're looking for full-time or freelancing etc. work, briefly describe your experience (not a full resume; send that after you've been contacted), mention whether you care about location/remote/visa, and list the technologies you're skilled with.",
            "This is the top-level comment for **meta** discussion. Reply here if you have questions or concerns about this post.",
            "**Company:**\u00a0[Zivid](https://zivid.com/)\u00a0|\u00a0[Career at Zivid](https://www.zivid.com/career-join-zivid)\u202f\n\n**Type:**\u00a0Full time\u202f\n\n**Location:**\u00a0Oslo, Norway or Trondheim, Norway\n\n**Remote:**\u00a0No\u202f\n\n**Visa Sponsorship:**\u00a0Yes\n\n**Description:**\u00a0Zivid is one of Norway's most ambitious technology companies! We have developed the world's most accurate real-time 3D cameras for robotics and industrial applications. Our cameras provides robots and machines with 3D vision. Among many applications, Zivid cameras can be used to recognize randomly distributed parts for bin picking, or do in-line quality control of components on a production line.\u202f\n\n**Technologies:**\u00a0Cross-platform C++17, Python 3.11, OpenCL, SYCL, Halide, Qt/QML, git, clang-tools, Github Actions, CMake, Catch2, boost, Docker, Vagrant, KVM, C++/CLI, C#, Sphinx, Azure, Windows, Linux, ARM. \u202f\n\n**Contact:**\u00a0Contact information is in the job links\n\n[Software Engineer - SDK](https://zivid.bamboohr.com/careers/114?source=aWQ9OA%3D%3D)\n\n[Senior Software Engineer - SDK](https://zivid.bamboohr.com/careers/113?source=aWQ9OA%3D%3D)\n\nExtend our SDK for Zivid 3D cameras, on areas spanning C++ API design & library development, GPGPU programming, GUI, and API wrappers for other languages such as .NET and Python. Add new features to our SDK, fix issues, add automated tests, improve algorithms and performance, and improve our internal build scripts and tools.",
            "**V-Nova** \\[[Careers - V-Nova | V-Nova | Careers Center | Welcome (icims.com)](https://careers-v-nova.icims.com/jobs/intro)\\]\u00a0\n\n**Full Time**\n\n**\u00a375k-\u00a380k + Benefits**\n\n**London, Paddington**\n\n**Hybrid:** 3 days in the office 2 from home\n\n**Visa Sponsorship**: Yes Candidates must already be based in the UK\n\n**Description:** Joining us as a C++ Software Engineer you will have the opportunity to work across a range of operating systems (Windows/Linux/MacOS, iOS and Android)helping implement fundamental developments to our core encoder SDK. Working cross-functionally you will be exposed to all aspects of the business helping with customer integrations, new product development and software enhancements. This is perfect for someone who is curious, strives for more and wants to make an impact in the future of video encoding. \u00a0\n\nWe also have a GPU Software Engineer - Using C++/Python to utilise GPU processing power for our codecs\n\n**Technologies:** C++ 17, Python, Java, OpenCL, Vulkan, Conan, CMake\n\n**Contact:** reddit PM for questions apply via the link.\n\n\u00a0",
            "**Company:** [Tenzir GmbH](https://tenzir.com)\n\nAt Tenzir, we're pioneering the future of open-source security operations with a revolutionary concept: SecDataOps. Our mission? To transform the foundational framework of cybersecurity operations. Our blueprint for this transformation is driven by an elegant philosophy\u2014composable data flow pipelines. Anyone can easily create powerful pipelines by chaining together operators, similar to Unix pipes or Powershell commands, with the difference that our operators are specially designed for security data operations use cases. You can unify dataflows by combining pipelines and build intricate security stacks that connect to the whole universe of security and data tools.\n\n**Type:**\n\n* Full Time within Germany\n* Freelance Contract within EU outside of Germany\n\n**Location:** Hamburg, Germany\n\n**Remote:** We are 100% remote. Candidates must be located within the EU, and hold an EU passport. We optionally have an office in Hamburg.\n\n**Visa Sponsorship:** Only for exceptional candidates.\n\n**Description:**\n\nAs a key contributor to our technology, you will participate in the entire process from translating user needs into designs and then implement them as working code. In particular:\n\n* Design, prototype, develop, and evaluate abstractions in a cutting-edge open-core C++20 code base\n* Create scalable and composable interfaces in a high-performance message passing environment that implements the actor model\n* Contribute to an open and constructive review culture in an agile development setting\n* Tune and enhance data structures to accelerate our batched streaming execution engine\n\nOur ideal candidate\n\n* has experience working with performance-sensitive code\n* is keen to work on a modern C++20 code base\n* is interested in writing maintainable code and composable abstractions\n* fits into a fast-paced and asynchronous working environment\n* knows how to wrangle large amounts of data, fast\n\nWe offer a great environment for aspiring engineers:\n\n* *Remote-first culture,* but we also have a nice office in Hamburg\n* *Machine budget:* choose your own platform and tools\n* *Competitive salaries* and possibility to access stock options in a high-growth startup\n* *Company retreats* to get together for brainstorming and fun non-work activities\n\n**Technologies:**\n\n* C++20; but open to upgrading anytime\n* Linux, macOS\n* [CAF](https://github.com/actor-framework/actor-framework)\n* [Apache Arrow](https://arrow.apache.org)\n\n**Contact:** Use our application form at [tenzir.jobs.personio.de](https://tenzir.jobs.personio.de/job/1457521)",
            "**Hiring Computational Geometry Software Engineer**\n\n**Company:** Roblox\n\n**Type:** Full-time\n\n**Compensation:** $189,110\u2013$233,840 USD\n\n**Location:** San Mateo, CA\n\n**Remote:** You are required to work from the office Tuesday through Thursday, but you have the flexibility to work remotely for two months each year.\n\n**Visa Sponsorship:** H1B transfer and day 1 green card provided; however, we do not sponsor the H1B lottery.\n\n**Description:** As a Computational Geometry Software Engineer on the Geometry Kernel team, you will develop algorithms crucial for functionalities such as real-time geometry creation, editing, and mesh ingestion. You'll manage the entire software development lifecycle from planning to release. Working in a small, autonomous team, you will take ownership of new features from research through maintenance and enhance the robustness and performance of existing components. Additionally, you'll represent ROBLOX within the industry and the community, reporting directly to an Engineering Director on the Engine team.\n\n**Technologies:** C++17\n\n**Contact:** Here is the job [posting](https://careers.roblox.com/jobs/5666791)",
            "Full-Time | PDW | On-site\n\nCompany: [PDW](https://www.pdw.ai/)\n\nType: Full-Time\n\nLocation: Huntsville, AL (On-site) (USA)\n\nVisa Sponsorship: No\n\nDescription: PDW is a drone manufacturing company creating the world's leading man-portable drones. PDW software primarily focuses on creating flight software for the drones, along with ground control software that users interact with to control the drones. This position is primarily for the ground control software. However, PDW encourages cross-domain expertise and learning, and there would be opportunities to expand into many different areas if desired. Software developers are encouraged to take ownership of developed software and collaborate with other engineering teams within PDW.\n\nTechnologies: Core tech is C++17/20, Qt6/QML, Git, CMake, GitLab CI/CD, Docker. Some smaller projects also use Python, Rust, and Go. Most projects are in Linux, and some are in Windows.\n\nITAR Requirement\n\nIn compliance with International Traffic Arms Regulations (ITAR), candidates must be U.S. Citizens, U.S. Permanent Residents (Green Card holders), or individuals granted asylee/refugee status as defined by 8 U.S.C. 1324b(a)(3).\n\nContact: [Apply Online](https://www.linkedin.com/jobs/view/3855007330/?capColoOverride=true) or email me at [careers@pdw.ai](mailto:careers@pdw.ai)",
            "# Perception Engineer @ Anduril\n\nCompany name:\u00a0[Anduril](https://www.anduril.com/)\n\nType: Full time\n\nCompensation: $160k - $240k base salary + RSUs\n\nLocation: Costa Mesa, CA or Boston, MA\n\nRemote: Not remote. Expectation is 4 days per week in office.\n\nVisa Sponsorship: Sponsorship not available. Must be eligible to obtain a security clearance.\n\nDescription: Anduril was founded by Palmer Luckey (Oculus) in 2017. We build autonomous systems for the defense industry that operate across air, land, sea by leveraging a distributed mesh sensor network for situational awareness and command and control. We're looking for a senior-level software engineer with expert C++ programming skills and experience in areas such as computer vision and perception, image segmentation, sensor integration and characterization, motion planning, localization, mapping, and related system performance metrics\n\nTechnologies: C++17, Linux, Numpy, OpenCV, Pytorch,\n\nContact: PM me or just apply via\u00a0[Job Description Here](https://boards.greenhouse.io/andurilindustries/jobs/4159127007?gh_jid=4159127007).",
            "**Company:**   Anduril, [Open ATL Roles on Career Page](https://www.anduril.com/open-roles/?location=Atlanta%2C+Georgia%2C+United+States&department=Software)\n\n**Type:**   Full-time\n\n**Compensation:** $117,300 - $175,950 | $142,800 - $204,200 - *Base Comp + Robust RSU Equity Grants + 100% Employer Paid premium for health/dental/vision (90% for spouse/dependents)*\n\n**Location:**   Atlanta, GA\n\n**Remote: No,** On-site in Atlanta, GA (1 day/week remote)\n\n**Visa Sponsorship: No,** ITAR Requirement: In compliance with International Traffic Arms Regulations (ITAR), candidates must be U.S. Citizens, U.S. Permanent Residents (Green Card holders), or individuals granted asylee/refugee status as defined by 8 U.S.C. 1324b(a)(3).\n\n**Description:** Anduril Industries is a defense technology company with a mission to transform U.S. and allied military capabilities with advanced technology. By bringing the expertise, technology, and business model of the 21st century\u2019s most innovative companies to the defense industry, Anduril is changing how military systems are designed, built and sold. Anduril\u2019s family of systems is powered by Lattice OS, an AI-powered operating system that turns thousands of data streams into a realtime, 3D command and control center. As the world enters an era of strategic competition, Anduril is committed to bringing cutting-edge autonomy, AI, computer vision, sensor fusion, and networking technology to the military in months, not years. Anduril Atlanta is focused on the Altius business, a tube stored, tube launched Group 2 UAS classed as an air-launched effect, including loitering munitions.\n\n**Technologies:** While most of our devs are skilled with [C++ and Python](https://boards.greenhouse.io/andurilindustries/jobs/4160916007?gh_jid=4160916007) (Mission Software Engineers), the tech stack includes Golang, Rust, React.js ([C++ and React.js](https://boards.greenhouse.io/andurilindustries/jobs/4359503007?gh_jid=4359503007)), Java ([Android, native ATAK development](https://boards.greenhouse.io/andurilindustries/jobs/4364425007?gh_jid=4364425007)), NixOS, Protobuf, gRPC, etc. We are also hiring [DevOps](https://boards.greenhouse.io/andurilindustries/jobs/4362739007?gh_jid=4362739007) focused on deployment pipelines for robotics or embedded products.\u00a0\n\n**Contact:** Please apply directly on the Careers site, or email at [kgood@anduril.com](mailto:kgood@anduril.com)",
            "**Company**: [Stellar Science](https://www.stellarscience.com)\n\n**Type**: Full time, plus internships/co-ops.\n\n**Location**: Washington DC area (Tysons VA near metro), Albuquerque NM, Dayton OH.\n\n**Remote**: Some work can't be done remotely; we'll consider very highly qualified candidates for remote work from within the U.S.\n\n**Visa Sponsorship**: No (U.S. citizenship required)\n\n**Description**: We're a small scientific software development company that develops custom scientific and engineering analysis applications in domains including: computer vision and image processing, space situational awareness (monitoring the locations, health and status of on-orbit satellites), metamaterials design, image simulation, high power microwave systems, modeling and simulation, computational electromagnetics (CEM), human body thermoregulation, laser systems modeling, high performance computing (HPC), computer aided design (CAD), and more. All exciting applications and no CRUD. We emphasize high quality code and lightweight processes that free software engineers to be productive.\n\n**Experience**: We typically look for Bachelors degrees in computer science, physics, engineering, math, or a related field, and also hire Masters and PhDs (roughly 30% of our staff have PhDs.)\n\n**Technologies**: C++20/23 with coroutines and generators, Qt 6.5, CMake, Boost, Jenkins, git, CUDA, OpenGL. Some projects also use Python, Java, Javascript. Windows and Linux, msvc/gcc/clang/clangcl, Visual Studio 2022 on Windows, typically Visual Studio Code for Linux, but you're free to use any productive IDE.\n\n**Contact**: [Apply online](https://www.stellarscience.com/jobs-listing/). You can DM me with questions/inquiries but I don't check this account very often.\n\nThanks for doing this [u/STL](https://www.reddit.com/user/STL/)!"
        ]
    },
    "C++ Show and Tell - June 2024": {
        "title": "C++ Show and Tell - June 2024",
        "score": 29,
        "url": "https://www.reddit.com/r/cpp/comments/1d6zoku/c_show_and_tell_june_2024/",
        "content": "Use this thread to share anything you've written in C++. This includes:\n\n* a tool you've written\n* a game you've been working on\n* your first non-trivial C++ program\n\nThe rules of this thread are very straight forward:\n\n* The project must involve C++ in some way.\n* It must be something you (alone or with others) have done.\n* Please share a link, if applicable.\n* Please post images, if applicable.\n\nIf you're working on a C++ library, you can also share new releases or major updates in a dedicated post as before. The line we're drawing is between \"written in C++\" and \"useful for C++ programmers specifically\". If you're writing a C++ library or tool for C++ developers, that's something C++ programmers can use and is on-topic for a main submission. It's different if you're just using C++ to implement a generic program that isn't specifically about C++: you're free to share it here, but it wouldn't quite fit as a standalone post.\n\nLast month's thread: https://www.reddit.com/r/cpp/comments/1cilqq4/c_show_and_tell_may_2024/",
        "num_comments": 43,
        "comments": [
            "**Hexer**\u00a0- fast, fully-featured, multi-tab Hex Editor.\n\n[https://github.com/jovibor/Hexer](https://github.com/jovibor/Hexer)",
            "**cpp-dump** - A C++ library for debugging purposes that can print any variable, even user-defined types  \nReleased v0.6.0!\n\n[https://github.com/philip82148/cpp-dump](https://github.com/philip82148/cpp-dump)",
            "Simple calendar progress app that I made with C++ and QML. Not the most advanced thing ever but it's the biggest project I've made so far. \n\nhttps://github.com/SalThePotato/Progress-Calendar-",
            "Self taught c++ dev and still junior, I listened to the advice in this sub reddit \"its just a language pick a niche and practice to get better\". I picked game development and happy to show you what I am capable of so far. Any recommendations to get better or improve the game are welcome. \n\nhttps://github.com/johnspeny/hitbubble",
            "This is a personal project of mine, [chob](https://gitlab.com/chocapix/chob): the boilerplate-free build system for C++, written in C++.  \n\nSome time ago, I grew tired of having to explain to CMake where my sources were and what to link with what. After all, why would I put a .cpp file in src/ if I didn't want to compile it? Why would I write a main function if I didn't want to build an executable?\n\nMy first solution was a custom makefile which called a python script which used `nm` to figure out what to link with what. It quickly became unwieldy so I began working on a C++ implementation of the whole thing.   11'000 lines of C++ later, I have a tool that builds complete C++ projects all by itself in a single pass. All chob asks is for your project to follow the [pitchfork layout.](https://joholl.github.io/pitchfork-website/)\n\nQuestions, remarks and criticisms welcome.",
            "This isn\u2019t necessarily a new concept, but I made a DLL injector with ImGUI. I used it as a learning exercise to study the windows api. It was also my first attempt separating the gui into a different thread so it wasn\u2019t blocking. One unique feature is that there\u2019s an option to inject the DLL right away by starting the process as suspended, injecting, then resuming. It\u2019s helpful for when you need your code to start right away like when  hooking networking calls.\n\nhttps://github.com/vektorprime/VekProcessInjector\n\nShameless plug, I\u2019m looking to switch careers into software dev if anyone has anything :)",
            "Nothing special, just me showing off my hard work at a 2D Vector graphics engine, that can run on any computer.\n\nI Would love some support and exposure, so it can reach like minded developers, that may find it interesting\n\n[https://github.com/micro-gl/micro-gl](https://github.com/micro-gl/micro-gl)",
            "I've recently started modernizing and polishing my good old double_integer template, through which I implement 128-bit and even wider (by nesting) integers in my projects:  \nhttps://github.com/tringi/doubleinteger\n\nAnd I'm in the middle of making a proper video presentation, with slides and showcases, of my concept of better C++ search (Ctrl+F replacement), as nobody seems to grasp it (yeah the project's readme.md is bit of a mess):   \nhttps://github.com/tringi/code-style-agnostic-search",
            "Hey guys, I've been working in a project in the past months that I would love you to test and give me some feedback about compilation, performance and general stuff. Basically the project is a N-Body Simulator with custom start positions for the bodies. It uses C++ and Axolote Engine (A graphical engine that I made last year, it uses OpenGL), so if you had some problems with it please tell me. The link for the repo is here:\u00a0[https://github.com/JotaEspig/nbody-simulation](https://github.com/JotaEspig/nbody-simulation)",
            "It has been years since I've written any C++ but recently came back to it to write a library which allows me to control the LEDs on my mouse: [https://github.com/carlos-menezes/libg203lightsync](https://github.com/carlos-menezes/libg203lightsync)"
        ]
    },
    "What are the resources you used to keep updated with C++?": {
        "title": "What are the resources you used to keep updated with C++?",
        "score": 16,
        "url": "https://www.reddit.com/r/cpp/comments/1dqzs48/what_are_the_resources_you_used_to_keep_updated/",
        "content": "",
        "num_comments": 13,
        "comments": [
            "CppCon videos on YouTube",
            "Honestly? \n\nThis sub for news about ongoing standardization efforts/major releases of big projects, and [Cpp Reference](https://en.cppreference.com) for quick checks on details.",
            "[https://en.cppreference.com/](https://en.cppreference.com/)",
            "C++ Weekly (Jason Turner) is useful for being aware of new features and how they're actually meant to be used.",
            "Honestly, that's the beauty of c++ is I can just work and don't need to keep updating my language knowledge every few months. It's a tool for tasks and I prefer to keep it that way.\n\n\nMost of the day to day usage of how I use c++ hasn't changed from 10+ years ago, except for a few quality of life improvements. The build system changes per job, and most people have settled on cmake which is fine I guess.",
            "Committee mailing (it gets posted here) and conference videos.",
            "What?",
            "And the [Compiler Support](https://en.cppreference.com/w/cpp/compiler_support) page has a list of new features, the feature test macro, and a link to the accepted proposal, all of which I find very useful.",
            "Same here. I'm still using C++11 for my open source projects. :-) But to not to be too out of date, randomly visiting this subreddit may give me roughly feeling on new features in new standard, then whenever I'm able to use new standard, I may look at those features deeper for learning.",
            "what are the reaources"
        ]
    },
    "Latency-Sensitive Application and the Memory Subsystem Part 2: Memory Management Mechanisms - Johnny's Software Lab": {
        "title": "Latency-Sensitive Application and the Memory Subsystem Part 2: Memory Management Mechanisms - Johnny's Software Lab",
        "score": 12,
        "url": "https://johnnysswlab.com/latency-sensitive-application-and-the-memory-subsystem-part-2-memory-management-mechanisms",
        "content": "",
        "num_comments": 1,
        "comments": [
            "> we ran the tests on Intel TODO\n\nOP, you should finish your articles before publishing then. It would also be nice to actually post the code for your benchmark program."
        ]
    },
    "C++ modules discussion. Ask questions and share your best practices, things to avoid, workarounds etc.": {
        "title": "C++ modules discussion. Ask questions and share your best practices, things to avoid, workarounds etc.",
        "score": 53,
        "url": "https://www.reddit.com/r/cpp/comments/1dqhlh2/c_modules_discussion_ask_questions_and_share_your/",
        "content": "It's been month or two since last 'big' C++ module thread, so I thought I would make one. Post anything modules related really. I'll start with couple MSVC tricks that make working with modules more bearable. Followed by a minor complain about incoming CMake `import std` support.\n\n# Intellisense auto complete workaround:\n\nIntellisense really struggles to properly parse C++ modules, but recently I learned that it's because Intellisense doesn't properly understand module partitions. If your module is a single interface file that doesn't import module partitions then Intellisense is able to provide full auto complete support.\n\n# MSVC slow Go To Definition workaround:\n\nRelated to above workaround, if you Ctrl+Click imported typename or use `Go To Definition` feature (F12) it can take up to 10 seconds if it even works at all. However once again if your module is single interface file, then MSVC is able to navigate you to proper place in code instantly like it did before modules.\n\n# Workaround for generic std namespace related MSVC compile errors:\n\nA lot of the MSVC C++ module compile errors and even internal compiler errors can be avoided by manually including offending standard headers in files where compile errors occur. Sounds silly, but it works. For instance if MSVC is complaining about double definition of `std::array` or it's complaining about `std::array` not being defined, then you can most likely fix the error by manually including `<array>` header. If compiler is complaining about `sv` string literal, then include `<string_view>` etc.\n\n# About incoming CMake import std support:\n\nCMake 3.30 will bring support for `import std`. I have experimented on cmake 3.30.0-rc1 and `import std` is working fine on MSVC. However Intellisense auto complete breaks and you won't get auto complete for `std` namespace. MSVC is only able to provide auto complete for `std::align_val_t` and `std::nullptr_t`, which isn't helpful at all. Because of this I will just keep using standard includes until this problem is fixed.",
        "num_comments": 65,
        "comments": [
            "Is there any update on gcc support?",
            "> However Intellisense auto complete breaks\n\nI use ReSharper C++ instead of Visual Studio's built-in IntelliSense for my `vulkan_hpp` module. It is far more consistent (but slightly slower) than VS, and go-to-definition, refactors, auto-complete (and tab-autocomplete), and quick parameter info all work very well. Any bug reports that are easily reproducible with a minimum example are resolved extremely quickly by the ReSharper team, and I've made several of them in the past year or so.\n\n___\n\nFor me, the biggest, most glaring, but arguably a very straightforward problem is missing C++ module support in CMake with `clang-cl.exe`: [CMake repo issue](https://gitlab.kitware.com/cmake/cmake/-/issues/25731) and [LLVM Discourse thread](https://discourse.llvm.org/t/clang-cl-exe-support-for-c-modules/72257) (both started by me). There is no real reason why this shouldn't work transparently and straightforwardly, *right now*.`clang-cl.exe` is *literally, bit-for-bit, SHA-sum-tested* the same binary as `clang.exe`, just with a different file name.\n\nThe CMake devs (as far as I can see) are wont to pass in GNU-style module compilation options to `clang.exe` with `/clang:`, even though it is perfectly valid. The LLVM module team doesn't want to implement `cl.exe`'s module options (many of which reference 'IFC') without *really* producing IFC files compatible with MSVC. This is a total impasse.\n\nOn my part, I've been trying to figure out how to add `cl.exe`'s IFC options to `clang-cl.exe` with the [MSVC IFC SDK](https://github.com/microsoft/ifc) so that the latter produces module binary interfaces compatible with the former's output. But I am stupid and haven't gotten very far yet. I'm hoping this comment gives the issue some traction.",
            "My experience with [Flux](https://github.com/tcbrindle/flux):\n\n* CMake module scanning and building works well. It was reasonably easy to set up using the new `target_sources(FILE_SET)` command. I haven't tried the prerelease `import std` support yet.\n\n* Clang 18 modules support seems very solid, and I use it day to day when developing the library. Error messages often mention precompiled headers though which can be a bit confusing. You used to have to disable GNU extensions to use modules, but I don't know if this is still the case.\n\n* MSVC builds the Flux module, but any non-trivial use of the library via a module import runs into ICEs. I think perhaps the heavy use of templates/concepts/CRTP exercises the frontend in ways that other libraries don't? Hopefully it will get sorted in time.\n\n* GCC 14.1 is unable to compile the Flux module \ud83d\ude41\n\n* CLion's \"intellisense\" works fine for code completion/type inference/go to definition etc via modules",
            "I'm still looking for a straight answer beyond \"it reduces parallelism, but requires less compilation\" about modules improving build performance or not. I've seen discussions outright stating that build performance was never a priority (even though it absolutely was in the beginning), but the mere fact that this retconing is happening makes me less hopeful. Strong scoping etc. in modules is nice, but I'm not sure that alone is worth the trouble for any mid-large sized codebase to migrate to modules, let alone if it decreases build performance compared to plain old precompiled headers.",
            "I've used the following strategy for introducing modules: I'm not yet writing my own modules, but rather wrapping 3rd-part libraries with one module each. This makes it possible to e.g. import windows, import cairo, etc.\n\nSo far I'm quite happy with the result: it makes it possible to use windows.h data types (like HWND) in headers without leaking all of windows.h all over the place. Only the symbols I explicitly need are being exported, and that's quite a small set.\n\nSome libraries are extremely easy to wrap in a module. Others fight fiercely... Windows has this amazing idea of having FD\\_SET both as a type alias and as a function macro. I didn't even know that was possible, but it makes wrapping it cleanly in a module quite difficult. \n\nOnce I'm sure of compiler support across all platforms I can also start writing code as modules files instead of regular .cpp files. That's in the future though.",
            "To start with, my experience is entirely with MSVC and msbuild. \n\n* I can't get export import to work. Maybe I'm just doing it wrong, but any module that I export import still seems to require manually importing the imported/exported module in any client code. [bug](https://developercommunity.visualstudio.com/t/C-modules-export-import-does-not-work/10679143?refTime=1719583657435&refUserId=3962e757-502c-41c1-81ea-0c94f28eec9a)\n* I noticed that you cannot specialize a template from one module in another. This affects things like std::formatter, std::hash, etc. I'm not sure if this is a bug in the compiler or in the standard. [bug](https://developercommunity.visualstudio.com/t/C-modules-feature-inhibits-template-sp/10679138?refTime=1719583657434&refUserId=3962e757-502c-41c1-81ea-0c94f28eec9a)\n* \\_\\_try is not understood by the module system. This makes it impossible to modularize anything using ATL or boost.asio. [bug](https://developercommunity.visualstudio.com/t/Header-unit-does-not-recognize-__try/10232019)\n* Intellisense works, sort-of, but not very well. At least it doesn't mark the entire source in red.\n* I wish there was a way I could to avoid generation of the binary module files for each project in a solution. std.compat is 'only' 35MB, which is far less than the 180MB or so that a comparable PCH would take up, but it's being generated for each project and it does add up.\n\nFeel free to upvote those bugs, maybe it will do some good...",
            "My experience is that, I rarely encounter problems with c++ modules nowadays. CMake and MSVC work quite well(aside from intelisense). Though, header units support seems quite immature. I don't use header units, so that's not a problem for me. But real problem is that there is no standard way to distribute/consume modules.",
            "One thing I do really appreciate about modules is that folder structure of your project doesn't have to be encoded into your source code.  Most folks set up headers like `#include \"my/path/header.h\"`, and if you were ever to move that file you have to go through _every. single. source file._ that includes that header to fix the path.  \n\nYou don't have to do this with Modules!  Telling the compiler where to find a named module is a build system problem.  You don't have to write source code that expect certain include paths or other silly, annoying things you have to do with headers.  `import my_module;` works no matter where my_module is in your file system.  So long as the build system tells the compiler where to find it, you're golden.  It can be anywhere.  \n\nIt's a small improvement, but it's one of those kinds of things you don't know how good it is until you experience it first hand.",
            "My questions are:\n\n1. What's the best way to support both modules and header files, at least during this adoption phase?\n\n1. Are \"module only libraries\" a thing like header only libraries are?",
            "I have a CMake setup with modules but I don't see to be able to get clang tidy to work with it. From what I've seen, a first compilation must be done first, making CMAKE_CXX_CLANG_TIDY not so useful since it runs clang tidy before building."
        ]
    }
}
{
    "Monthly Dotfile Review Thread": {
        "title": "Monthly Dotfile Review Thread",
        "score": 32,
        "url": "https://www.reddit.com/r/neovim/comments/1csdtfx/monthly_dotfile_review_thread/",
        "content": "If you want your dotfiles reviewed, post a link to your Neovim configuration as a top comment.\n\nEveryone else can read through the configurations and comment suggestions, ask questions, compliment, etc.\n\n&#x200B;\n\nAs always, please be civil. Constructive criticism is encouraged, but insulting will not be tolerated.",
        "num_comments": 95,
        "comments": [
            "I see people posting their neovim configuration repositories and not mentioning what aspects of the configuration they expect review in. Some ask generic questions like \"what can I do better\" and some don't ask anything. Without knowing what you want help in, no one can help you, and without knowing what your preferences are and how you are as a person, no one can answer generic questions like what can I do better. So this is a request to everyone for being specific in what they want reviewed in their configuration.",
            "How to disable LSP inlay hints?",
            "You shouldn\u2019t have images in your repo. Extra bloat for no good reason. There\u2019s ways to make it so that GitHub hosts the photos for you.",
            "Its really amazing if you're intentionally being able to keep your config slim. I'd still recommend breaking it into files for better organization.",
            "Hi! I think you're doing a good job. You can put all the plugin definitions in the \"plugin\" directory, and try lazy-loading more plugins that aren't important on startup.",
            "to help with performance at loading, first you can check `:Lazy profile`, and also you can make more plugins lazy. For example you don't need undotree at startup, so you can add `cmd = { \"UndotreeShow\", \"UndotreeToggle\" }` in the lazy declaration so that the plugin is only loaded when you run one of these commands.\nLazy does a similar thing with the `keys` and `events` fields.",
            "Looks great, clean setup \ud83d\udc4c\ud83c\udffb",
            "You have gitsigns in gitsigns.lua and in source-control.lua both. Also, I'm being pedantic and it really doesnt matter, but, you should not use such insert mode mappings. Especially to move around in insert mode.",
            "why? if there's a solid reason I could do that too",
            "Hi! I believe that inlay hints are enabled in the lsp capabilities configuration, try searching for that."
        ]
    },
    "Weekly 101 Questions Thread": {
        "title": "Weekly 101 Questions Thread",
        "score": 5,
        "url": "https://www.reddit.com/r/neovim/comments/1dnyxby/weekly_101_questions_thread/",
        "content": "A thread to ask anything related to Neovim. No matter how small it may be.\n\nLet's help each other and be kind.",
        "num_comments": 34,
        "comments": [
            "Could someone give me an example on how I could configure keybind plugins with lazy.nvim using their LazyKeysSpec?",
            "How do you _select_ comment block? I am aware of `gc` motion.",
            "How do you jump to the next \"object\"? Imagine number of declarations where some take one line and others take multiple. Any efficient navigation tips?",
            "What does the `conceal` actually do in `nvim_buf_set_extmark()`?",
            "I recently migrated from my old vim setup to a newer neovim setup with a bunch of modern plugins. I started using Telescope, but I really miss my old fzf. With that, I could press CTRL + G and instantly do fuzzy search across both file paths+ text of each line of every file in my repo. I could basically jump to any line with just a vague memory of where it was stored in a repo and what its content was. \n\nIs there a way to do that in Telescope? I may just have to use fzf-lua, but I enjoy having fewer plugins and more extendable plugins like Telescope.",
            "gc is not a motion, but an operation AND a textobject. As is a textobject, it means you can do `dgc` to delete or `vgc` to visually select the comment.",
            "You could look into treesitter objects and see if something custom can be made.",
            "The suggested way is certainly the easiest but not the most accurate. If you really want to target specific parts of the export expression your best bet would be to use treesitter.",
            "It sets the character that replaces the concealed segment. Set it to an empty string, and the segment is fully hidden. \n\nRegardless of the string you set it to, simply setting the conceal option also triggers that the segment will be concealed",
            "The reset can take in an option to reset only a specific namespace ( the field is probably called ns) so if you can figure out a way to determine the namespace you want to reset you can avoid having to reload all the lsp diagnostics"
        ]
    },
    "Testing your Neovim plugins with busted and lazy.minit": {
        "title": "Testing your Neovim plugins with busted and lazy.minit",
        "score": 44,
        "url": "https://www.reddit.com/r/neovim/comments/1dr5152/testing_your_neovim_plugins_with_busted_and/",
        "content": "Since **lazy.nvim** now suports `luarocks`, I've started moving all my tests to use [busted](https://lunarmodules.github.io/busted/) instead of [plenary.nvim](https://github.com/nvim-lua/plenary.nvim).\n\n\nI must say that I really love the clean output produced by busted.\n\n\nI've also added `lazy.minit` (Minit: Minimal Init), to make it even easier to bootstrap **lazy.nvim**, create repros, and run tests with **busted**.\n\n\nCheckout the docs at https://lazy.folke.io/developers#minit-minimal-init\n\n\nThere's no need to fiddle with lua's package path and you don't even need a `.busted` file (but you can). **lazy.nvim** will ensure all needed plugins / modules are available at runtime.\n\n\n[This](https://github.com/LazyVim/LazyVim/blob/main/tests/busted.lua) is how I use it for running **LazyVim** tests.\n\n\n---\n\nAlternatively, you can also run **busted** without **lazy.nvim**. See this [blog post](https://mrcjkb.dev/posts/2023-06-06-luarocks-test.html) (not mine) for more details.",
        "num_comments": 5,
        "comments": [
            "Hmmm... 'lazy.MINIt', you say? I guess I'll need a team of layers for trademark infringement case filing straight to Hague.",
            "Thanks for this! I actually copied your test setup from ts-comment just yesterday for my plugin, which really helped me along. This seems even simpler. Great work!",
            "what is luarocks good for?",
            "You can still do `mini.t` :)",
            "Not sure if having another layer of abstraction around busted is required. I'd prefer to have just the config file and interact with busted directly, or like luarocks test command as I've done here:\n[adopure.nvim](https://github.com/Willem-J-an/adopure.nvim)\n\nThen again, this will probably only work if the dependencies are available on luarocks, which is arguably a good thing if you're going to depend on something \ud83d\ude05"
        ]
    },
    "How can I move between snippet location by tab ?": {
        "title": "How can I move between snippet location by tab ?",
        "score": 9,
        "url": "https://i.redd.it/l2z4indx5g9d1.png",
        "content": "",
        "num_comments": 4,
        "comments": [
            "If you mean no plugin, then I don't know.",
            "Thank you, it's work",
            "Any pure lua alternative?",
            "https://github.com/boydaihungst/.config/blob/2734ed2799f42cec7ba2169e7f28e51f835a1681/lvim/lua/user/plugins/cmp.lua#L11\n\n\nhttps://github.com/LunarVim/LunarVim/blob/85ccca97acfea9a465e354e18bb2f6109ba417f8/lua/lvim/core/cmp.lua#L4\n\nThis is what I modified from LunarVim's configuration. It also fixed an issue with vim-visual-multi"
        ]
    },
    "Result of command in quickfix list": {
        "title": "Result of command in quickfix list",
        "score": 3,
        "url": "https://www.reddit.com/r/neovim/comments/1dr8tzi/result_of_command_in_quickfix_list/",
        "content": "I have command in package.json that runs \u201ctsc\u201d to find all ts issues through the project. I wonder if that  possible to run this command with bang \u201c:!\u201d and send output to quickfix list ?",
        "num_comments": 6,
        "comments": [
            "Look up `:h makeprg`, `:h errorformat`. Running `:make` will run `makeprg` and the resulting errors will be loaded into the quickfix list as long as they match `errorformat`.\n\nYou can set `makeprg` to whatever you want.",
            "Please remember to update the post flair to `Need Help|Solved` when you got the answer you were looking for.\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/neovim) if you have any questions or concerns.*",
            "Also worth mentioning that vim ships a compiler plugin for `tsc` (see `:help compiler`), which sets both `makeprg` and `errorformat` for you. Simply put `compiler tsc` in `after/ftplugin/typescript.vim`.",
            "This gist was written for vim, but all these basics still work in neovim too: https://gist.github.com/romainl/ce55ce6fdc1659c5fbc0f4224fd6ad29.",
            "Help pages for:\n\n* [`makeprg`](https://neovim.io/doc/user/options.html#%27makeprg%27) in _options.txt_\n* [`errorformat`](https://neovim.io/doc/user/quickfix.html#errorformat) in _quickfix.txt_\n\n\n---\n\n^\\`:\\(h|help\\)&nbsp;<query>\\`&nbsp;| [^(about)](https://github.com/heraldofsolace/VimHelpBot) ^(|) [^(mistake?)](https://github.com/heraldofsolace/VimHelpBot/issues/new/choose) ^(|) [^(donate)](https://liberapay.com/heraldofsolace/donate) ^(|) ^Reply&nbsp;'rescan'&nbsp;to&nbsp;check&nbsp;the&nbsp;comment&nbsp;again ^(|) ^Reply&nbsp;'stop'&nbsp;to&nbsp;stop&nbsp;getting&nbsp;replies&nbsp;to&nbsp;your&nbsp;comments",
            "Help pages for:\n\n* [`compiler`](https://neovim.io/doc/user/quickfix.html#%3Acompiler) in _quickfix.txt_\n\n\n---\n\n^\\`:\\(h|help\\)&nbsp;<query>\\`&nbsp;| [^(about)](https://github.com/heraldofsolace/VimHelpBot) ^(|) [^(mistake?)](https://github.com/heraldofsolace/VimHelpBot/issues/new/choose) ^(|) [^(donate)](https://liberapay.com/heraldofsolace/donate) ^(|) ^Reply&nbsp;'rescan'&nbsp;to&nbsp;check&nbsp;the&nbsp;comment&nbsp;again ^(|) ^Reply&nbsp;'stop'&nbsp;to&nbsp;stop&nbsp;getting&nbsp;replies&nbsp;to&nbsp;your&nbsp;comments"
        ]
    }
}
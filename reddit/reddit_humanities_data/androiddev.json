{
    "Questions about Target API level requirements": {
        "title": "Questions about Target API level requirements",
        "score": 2,
        "url": "https://www.reddit.com/r/androiddev/comments/1dr5z1i/questions_about_target_api_level_requirements/",
        "content": "Hello fellow Android developers,\n\nI'm a developer-wannabe and I have a basic question about Android's Target API level requirements. Since English is not my native language, I'm having trouble understanding the graph in this article.\n\n[https://support.google.com/googleplay/android-developer/answer/11926878](https://support.google.com/googleplay/android-developer/answer/11926878)\n\nSpecifically, I'm confused about this part \"**New apps and app updates must target an Android API level within one year from the latest major Android OS version**\"\n\nDoes it mean, for example, Android 15 was released on **June 18, 2024**, so on Aug 31, 2024 (the deadline), all new apps must target whatever API level that was released between **June 18, 2023** and **June 18, 2024** (1 year before the release)? This seems to be what the graph is saying.\n\n\n\nHowever, some sources say otherwise, they say, for example, Android 15 was released on **June 18, 2024**, so on Aug 31, **2025** (the future deadline), all apps must target whatever API level that is released between **June 18, 2024** and **June 18, 2025** (1 year after the release)\n\n\n\nPlease shed some light on this matter for me.",
        "num_comments": 4,
        "comments": [
            "This year Android 15 is published, so all new apps and app updates must target Android 15 next year (August 31, 2025).  You app can target  Android 15 now, but that's not an obligation yet. After August 31 2025 it will be required if you want to update your app or publish a new app. There is one major Android release each year.",
            "Every year at 31 August the SDK requirements ticks ahead 1 year for the requirements.",
            "In practicality The clock starts when pixel phone users get the update.",
            "I still dont get it \ud83d\ude02"
        ]
    },
    "Anyone preparing for native Android interviews currently? I'm looking for fellow devs to prepare for interviews with/mock interviews": {
        "title": "Anyone preparing for native Android interviews currently? I'm looking for fellow devs to prepare for interviews with/mock interviews",
        "score": 1,
        "url": "https://www.reddit.com/r/androiddev/comments/1dr6v5f/anyone_preparing_for_native_android_interviews/",
        "content": "Hi all, **to those of you:** \n\n- who are currently looking to switch or preparing for interviews. \n\n- Mainly, Native Android. preferably java. \n\n- exp level: 3+ yrs\n\n(pls only reply if you fit the above 3 points)\n\nI have a Discord Accountability server and I'm looking to add folks whom I can prepare for interviews with. \n\n\n\n**About me:** Exp - 3+ yrs(almost 4). I had a career break for the last 6 months where mostly I away from coding and development completely. so I feel rusty in everything. this month I started doing leetcode again. revised DSA. And also, I have been revising core concepts of Android lately. But since my main role is in Android Dev, I need help with Android-focused prep help with someone who is on the same boat prep wise. \n\n\n\n**How we'll prepare:**\n\nto begin, we could make sure we have basics covered theoretically at least. then we can look into major stuff topic wise. After that, we can start mock interviews. Apart from that, I'll also be starting some open source for practice with big codebases and also, to add it in resume ofc. \n\n  \nif this sounds good, let me know. i will add you to the server. i can only add up to 5-7 folks due to limited space. ",
        "num_comments": 2,
        "comments": [
            "Please note that we also have a very active Discord server where you can interact directly with other community members!\n\n[Join us on Discord](https://discordapp.com/invite/D2cNrqX)\n\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/androiddev) if you have any questions or concerns.*",
            "hey, is it allowed if i ask the same above question there in your server? i am in your server already but since it is big, i'm only looking to connect in a small group or separately."
        ]
    },
    "Implementing a Screen Capture library for Jetpack Compose Views": {
        "title": "Implementing a Screen Capture library for Jetpack Compose Views",
        "score": 21,
        "url": "https://blog.bitdrift.io/post/implementing-session-replay-android-compose",
        "content": "",
        "num_comments": 2,
        "comments": [
            "This was a fantastic writeup! Thank you for sharing all these details.",
            "Sometimes it's important to shed light on how imperfect and full of false starts software development is"
        ]
    },
    "Google Play Billing Library 7: queryPurchaseHistory to be deprecated": {
        "title": "Google Play Billing Library 7: queryPurchaseHistory to be deprecated",
        "score": 23,
        "url": "https://www.reddit.com/r/androiddev/comments/1dqfqni/google_play_billing_library_7/",
        "content": "Google Play Billing has recently announced the deprecation of queryPurchaseHistory() meaning that developers would not be able to query your app's users' purchases from Google Play anymore.\n\nFor apps that don't use a backend system, is there a good alternative apart from building a new backend system for tracking user purchases? Perhaps something that doesn't cost recurring charges?\n\n[https:\\/\\/developer.android.com\\/google\\/play\\/billing\\/query-purchase-history](https://preview.redd.it/1qol36tx8a9d1.png?width=607&format=png&auto=webp&s=c2db32875c3a275c1135b71fac542d26961e18d1)",
        "num_comments": 17,
        "comments": [
            "I love how Google can't make their own billing library work properly in years. There are so many issues, whole API is poorly written, and it's a pain to use. And it's not improving.\n\nFirst, their famous function `queryPurchases` has a well known bug - it's cached value is often stale and not actual. Somehow, they were not able to fix it since 2020 or so. There is even github issue about it.\n\nSecond, `queryPurchaseHistory` works reliably (by that I mean it always return actual, real-time state of the purchase) but we can't rely solely on this function, as it causes another minor issue - it's not possible to acknowledge potentially pending purchases (because we only get list of all purchases when we use `queryPurchases`.\n\nSo eventually every developer after couple days/weeks of pulling hairs ended up using a combination of both. \n\nAnd now they want to remove the only option to actually reliably return the fresh state of a purchase...\n\nHow about Googlers would finally put some effort, and fixed unreliable function `queryPurchases` before removing actually reliable `queryPurchaseHistory`?",
            "The Play Billing library is already shockingly bad to use.\n\nRemoving the ability to query purchases on the client-side only would be a shocking degredation in functionality. What are they thinking?",
            "What they smoking atleast fix existing methods",
            "The only thing that keeps me from going insane when using the Google Play Billing library is kotlin extension functions. You still have to do a ton of work, but at least the final result has a usable API.\n\nPlease Google, we're not asking for much. Just a function to query products, subscriptions, purchases and two functions for starting the purchase flow and acknowledging it with easy to use classes behind them. Is it really that hard?\n\nEdit: I'll even go a step further. I'm a CS bachelor graduate from Poland. Pay me half of what you pay your US devs Google and I'll do it for you during an internship.",
            "I really want to know why Google is doing this.",
            "I think Google Android development is not qualified enough, The APIs they develop are so difficult to use and not correct",
            "Through a reliable source, a friend of a high level Google official,  I learned that before 2014 Google doesn't even have records of who bought what on the store.  Remember, Google went the Dilbert route like many Bay Area tech companies and did away with managers.  I recall stories about how Google employees did not even want to hear about anything someone learned working at their previous company.\n\nI want to move my apps from full paid to subscriptions to provide an opportunity get a subscription and either can drop it or update it to a new edition.  But I am going to be very cautious about even continue forward using Google Play.  There are other options. Also my best sales are on iOS anyway and Apple is easier to deal with (except for some of the documentation).",
            "And you forget the multiple account issues that they completely ignore leaving users to blame us.\n\nHo and its coded by interns, before we had the source and I could help the intern fix a few ANRs. Seems they did not like that so just after they went closed source ....",
            "As a dev that has just started to include some In-APP-Purchases.. im kinda scared now lol. Weirdest behavior i noticed so far was some prices / products not syncing from the play console to the app whilst others do.\n\nI have been wondering what the best way to safe purchases is; right now my game checks on every start but if the user is offline then I would still want them to have their purchased stuff. At the same time I think saving such data offline isnt great security wise",
            "And they charge 15-30% on top of this"
        ]
    },
    "Practical interview questions": {
        "title": "Practical interview questions",
        "score": 1,
        "url": "https://www.reddit.com/r/androiddev/comments/1dqz02m/practical_interview_questions/",
        "content": "Looking for ideas of interview questions to practice\n\n  \n\"use retrofit to make an API scroll, and show the answer in a recycler view/ lazy list\", i've had this one (and variants, like show text/ image) in multiple interviews. Other than this one, I was wondering if there was a go-to list of things to prep for a practical interview , which could be implemented in 30-45min. \n\n ",
        "num_comments": 3,
        "comments": [
            "Given a relatively simple app, find and fix bugs, debug perf, etc",
            "So I'd actually ask them to tell you about the most technically difficult project they have worked on. (You want to hear how they present it and what they think was challenging about it)\n\nThen ask them to explain briefly the history and evolution of fragments, design patterns, testing, logic placement, the patterns used for navigation, etc. (This comes from a FAANG contractor interview). This one will show you a LOT about their: 1) historic knowledge, 2) ability to present information in a timeline basis (means they can do other orders well too), 3) and can let you gauge their real level of understanding of the technical and architectural knowledge.\n\nWith both make sure to ask questions when you have them.\n\nYou can start off by pre-filtering people who have good resumes but don't actually belong there by asking broad CS questions about broad technical concepts like: what is a thread pool, which thread should you run long running tasks on for Android, etc. This approach allows you to have a big pool of a lot of simple questions to help you dave time, and then asks them to present themselves to you in their best light and hopefully find out interesting tidbits not in their resume.",
            "I recommend not asking for some overly specific approach.\n\nWhen I created a code challenge, I asked someone to hit an open API endpoint that gave a list of items and to display them as a list. They could use whatever they wanted. Bonus points if they added a detail page.\n\nFor code questions, I walk them through creating a sticky-note app and adding features like adding user accounts and online backup."
        ]
    }
}
{
    "Sunday Daily Thread: What's everyone working on this week?": {
        "title": "Sunday Daily Thread: What's everyone working on this week?",
        "score": 21,
        "url": "https://www.reddit.com/r/Python/comments/1dm9767/sunday_daily_thread_whats_everyone_working_on/",
        "content": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show & Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f",
        "num_comments": 40,
        "comments": [
            "Working my way through a pygame and tutorial and simultaneously trying to build my own 2D arpg game. Been a lot of fun so far.",
            "unicode fucking up my shit rn",
            "Trying to find a way to transpose certain data from an OPCUA device to an excel datasheet. Sockets keep giving me issues.",
            "Ive been reading about Jane streets use of incremental and how they use it, so Im going to try and build my own version in Python \n\nWe have a big project at work coming up for real time risk generation and Im thinking something like incremental would be useful in that scenario",
            "An automation utility for Wayland. Similar to Autokey. Still needs a lot of work though.",
            "open source personal finance dashboard",
            "I'm a beginner with Python, and I've recently gone through the Code In Place course they made. I did the project on their IDE already, a Whac-A-Mole game, but I wanted to improve on it with better tools, so I started doing it on my own using Tkinter (through the tutorial on the tkdocs website).  \nAlthough the Tkinter documentation is very confusing, and I get better and faster results by searching what I need (but this could just be me being a beginner and not understanding it well), it's quite fun and interesting! I'm not exactly planning to use Python for making games, but it's still a nice experience.",
            "I'm currently working on a makeshift todo list (it's really bad, but it is helping me learn about lists). I am having a bit of trouble, but its fun!",
            "I just begin to code to make games on pygame first and then take it to another level. ive only been coding for a couple of weeks and i love it! i cant stop coding...like im thinking of codes in my sleep. is that healthy?",
            "# Object-relational mapping with using python"
        ]
    },
    "Saturday Daily Thread: Resource Request and Sharing! Daily Thread": {
        "title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
        "score": 1,
        "url": "https://www.reddit.com/r/Python/comments/1dqy1qp/saturday_daily_thread_resource_request_and/",
        "content": "# Weekly Thread: Resource Request and Sharing \ud83d\udcda\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! \ud83c\udf1f",
        "num_comments": 0,
        "comments": []
    },
    "PSQLPy - Asynchronous Python PostgreSQL driver written in Rust": {
        "title": "PSQLPy - Asynchronous Python PostgreSQL driver written in Rust",
        "score": 76,
        "url": "https://www.reddit.com/r/Python/comments/1dqybfa/psqlpy_asynchronous_python_postgresql_driver/",
        "content": "Hello everyone. We want to present you\u00a0[PSQLPy](https://github.com/qaspen-python/psqlpy): our new project that allows communicate with PostgreSQL. Conceptually it's similar to\u00a0[psycopg](https://github.com/psycopg/psycopg)\u00a0or\u00a0[asyncpg](https://github.com/MagicStack/asyncpg)\u00a0but fully written in Rust and type hints support.\n\n**What Our Project Does**  \n**-** Make an interaction with the PostgeSQL in your application much faster (2-3 times).  \n**-** Be sure that there won't be any unexpected errors.  \n**-** Don't usually go to the documentation to search every question - we have awesome docstrings for every component.  \n**-** Use MyPy\u00a0(or any other Python type checker) with confidence that exactly the types specified in the typing will be returned.  \n**-** Concentrate on writing your code, not understanding new abstractions in this library, we only have classes which represents PostgreSQL object (transaction, cursor, etc).\n\n**Target Audience**  \nThe driver is completely ready for production use, supports high-load and fault-tolerant systems\n\n**Comparison**  \nWe conducted a huge number of benchmarks.  \nThe results are very promising! PSQLPy\u00a0is faster than AsyncPG\u00a0at best by 2 times, at worst by 20%. PsycoPG\u00a0is 3.5 times slower than our new driver\u00a0in the worst case, 60% in the best case.\n\nLinks:\n\nGithub repo:\u00a0[https://github.com/qaspen-python/psqlpy](https://github.com/qaspen-python/psqlpy)\n\nDocs: [https://qaspen-python.github.io](https://qaspen-python.github.io)\n\nWe would be pleased to see valuable feedback.  \nBest regards, PSQLPy team.",
        "num_comments": 18,
        "comments": [
            "2-3 times faster compared to what? The Python or C implementation of psycopg?",
            "Docs link is broken.\n\nAlso, whenever I see benchmark claims without any code or data, I assume they are completely wrong. And from the small description you wrote in the README, your method of benchmarking is very suspicious.",
            "Do you have an exemple of implementation with Sqlalchemy (using asyncio)",
            "Does it work with Trio?",
            "We are much faster, trust me bro, I wont provide any code and any graphs and any examples but we are much faster! xD",
            "Its 2-3 times as fast as my 2002 Subaru forester, so it MUST be blazingly fast",
            "Hello! Thank you for the question.  \nWe've tested C implementation of psycopg.",
            "That's definitely a start!  I suggest different benchmarks for high-throughput (>100mb per query) and for tiny queries. It would also be interesting to see it compared with threaded queries vs async. And ofc include psycopg!\n\nGood luck!",
            "Why be so fluffy?  Why not say:\n\n- memory safe\n- we wrote mypy annotations\n- low level api\n- definitely zero percent faster than existing options for approximately everyone\n\nI dont understand why the standard for Free Software README on Reddit in 2024 is now at about the level of Used Car Salesman, USA, 1987.\n\nIf your README for something that obviously duplicates fifty existing things doesnt include a why not use this and a comparison with other things that isnt all positive, its hard to imagine you really are trying to help the people youre talking to.",
            "Hello!  \nUnfortunately, it doesn't.\n\nSince it's a rust library first, we use bindings between asyncio and rust, and as far as I know, there are no bindings between trio and rust.\n\nAnyway, thank you very much for the question, we'll look deeper into it."
        ]
    },
    "PuePy - Reactive Frontend Framework": {
        "title": "PuePy - Reactive Frontend Framework",
        "score": 6,
        "url": "https://www.reddit.com/r/Python/comments/1dr7xfu/puepy_reactive_frontend_framework/",
        "content": "## What PuePy Project Does\n\nPuePy builds on [PyScript](https://pyscript.net) (Python+Webassembly) to offer something similar to Vue.js or React, but in 100% pure Python. It supports PyScript's two runtimes: MicroPython and Pyodide. MicroPython is tiny, while Pyodide is basically CPython.\n\n## Target Audience\n\nPresumably anyone who wants to have a web project where they code the frontend in Python, not JavaScript. This might be a limited number of people, however, because it does mean you'll miss out on JavaScript tooling (eg, in-browser debuggers), JavaScript projects, etc.\n\nYou can, however, make use of web components like [Shoelace.style](https://shoelace.style), so you're not necessarily starting from scratch.\n\n## Comparison\n\nThere are a lot of Python \"frontend\" options, though none I'm aware of are quite like PuePy.\n\n- [Reflex](https://reflex.dev) lets you define React-style logic in Python and it runs in the browser. It doesn't, however, let you have a full Python environment on the client.\n- [LTK](https://github.com/pyscript/ltk) is a GUI toolkit written with PyScript that you could use to build powerful frontend frameworks. However, it isn't reactive and does presume you're going to use it as a toolkit in a roughly similar way to how you'd use Gtk or Qt, but on the web.\n- [Flet](https://flet.dev) is a Flutter wrapper in Python where a thin JavaScript later \"renders\" Flutter widgets laid out in server code. It also lets you write frontend code in Python.\n- [Django Unicorn](https://www.django-unicorn.com) does some magic to let you render HTML code server-side, but have it update. It's Django-only, and doesn't actually run Python code on the frontend.\n\n## Links\n\n- [PuePy.dev site](https://puepy.dev) and [GitHub repo](http://github.com/kkinder/puepy)\n- [Docs](https://docs.puepy.dev/)\n- Demo PWA (in progress; not all assets cached correctly): Keep track of expenses with friends when traveling [ExpenseLemur](https://expenselemur.com) (see [GitHub repo](https://github.com/kkinder/expenselemur))",
        "num_comments": 6,
        "comments": [
            "Holy crap I did not know about django unicorn, it seems like a massive timesaver",
            "It is pretty cool. Its a lot of magic, but it works well.",
            "I did not know about that, thanks!\n\nI might have reused that, though I do like the flexibility of context managers because you can insert logic with regular if statements or loops while deeply nested.",
            "I too like IPAs",
            "# ",
            "do you know about [https://htpy.dev](https://htpy.dev) ? It is pretty flexible"
        ]
    },
    "Type Annotation talk at PyCon Ireland 2023": {
        "title": "Type Annotation talk at PyCon Ireland 2023",
        "score": 6,
        "url": "https://www.reddit.com/r/Python/comments/1dr7em3/type_annotation_talk_at_pycon_ireland_2023/",
        "content": "https://youtu.be/Sf-ILe2bkvw?si=9kh53rjGD1hOvMpC\nSlides can be seen here https://vfxger.com/pyconslides2023.html and pdf https://vfxger.com/pyconslides2023.pdf",
        "num_comments": 0,
        "comments": []
    }
}
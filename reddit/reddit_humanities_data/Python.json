{
    "Sunday Daily Thread: What's everyone working on this week?": {
        "title": "Sunday Daily Thread: What's everyone working on this week?",
        "score": 3,
        "url": "https://www.reddit.com/r/Python/comments/1dgv2s3/sunday_daily_thread_whats_everyone_working_on/",
        "content": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show & Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f",
        "num_comments": 15,
        "comments": [
            "Coded Streamlit app, attempted to recode using Django this am - took way too long but have 50% features. Oddly took a bit less time with Vite/JS and was prettier. So\u2026 Streamlit is good enough. Every incremental change in the other two takes 5x or 3x as long.",
            "Im trying to break into a technical role right now, so doing a lot of projects in a few languages to put on my portfolio right now, but for python I just wrote a script that clears temp files, kills zombie processes, checks cpu and memory usage and purges if its over a set amount, and reboots my touch bar on my Mac (MacBook pro M1 users I'm sure you know this issue) - also scheduled this to run in the evenings using cron and have a documented logging file to go with it, pretty happy with it so far, but any other project ideas would be great !",
            "I've been building [https://dataline.app](https://dataline.app) for the past year or so, looking for testers to get feedback now \ud83d\ude04\n\nIt's an open source and privacy-focused text to SQL + chart + more tool. Supports CSVs, SQLite and Postgres data sources, with more to come.\n\nNot sure which direction to take it in next, but I'm really happy with what we have so far. Please reach out if you try it out \ud83d\ude42",
            "Building Pharmacy management system using Django, with user auth, medication database, payments, notifications about stock and etc.",
            "About to start putting together a developer guide doc for PyPDFForm since there are users requesting it.",
            "Hi, I just finished a little tennis siumulation project and would be glad to get some feedback. I've been coding on and off for a few years, but never commited to finishing a project or going very far past demos. I'm quite pleased with the results and hope to continue making little games/simulation.\n\n[https://github.com/Ravensberg/ATP-Simulation](https://github.com/Ravensberg/ATP-Simulation)",
            "I figured this was the best place, but there's a game on Steam called \"The Farmer Was Replaced, \" a Python-adjacent coding game (the save file uses .py files) to teach you Python by farming and unlocking different functions.  \nIt starts with just doing harvest() over and over manually, then eventually gives you if/for/while loops, dictionaries, and def functions. and so on, as you grow your plants. Very Cool. Great intro to Python/coding in general though\n\n[https://store.steampowered.com/app/2060160/The\\_Farmer\\_Was\\_Replaced/](https://store.steampowered.com/app/2060160/The_Farmer_Was_Replaced/)",
            "If anyone would help I'm not sayin no as I want to to an Egyptian game call screw It's a card game multiplayer 4 players I also want it to be online I speak both Arabic and English I can teach you how to play and probably you will like it as 97%",
            "I'm working on a syntax/semantic validation tool for YAML documents.  It's a two part project. The first part will take a description of what your YAML document looks like and will validate any YAML document against the description.  It will check both the syntax of your document as well as the semantic aspect of your document.\n\nThe 2nd phase of the project is a tool that will take any YAML document and automatically create the validator description document.",
            "Learning Python Turtle, I am pretty good at it but not that good!"
        ]
    },
    "Saturday Daily Thread: Resource Request and Sharing! Daily Thread": {
        "title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
        "score": 4,
        "url": "https://www.reddit.com/r/Python/comments/1dlig0j/saturday_daily_thread_resource_request_and/",
        "content": "# Weekly Thread: Resource Request and Sharing \ud83d\udcda\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! \ud83c\udf1f",
        "num_comments": 0,
        "comments": []
    },
    "I made a little Python quiz for interns and new Python developers at my company": {
        "title": "I made a little Python quiz for interns and new Python developers at my company",
        "score": 329,
        "url": "https://www.reddit.com/r/Python/comments/1dkz4gv/i_made_a_little_python_quiz_for_interns_and_new/",
        "content": "I put this quiz together to help create conversation for interns and new python developers at my company. Its based on the content from one of my favourite books ([Fluent Python](https://www.oreilly.com/library/view/fluent-python-2nd/9781492056348/)). I hope you enjoy it!\n\n[Quiz](https://us.idyllic.app/quiz/hpea2jl39w-how-well-do-you-understand-python)",
        "num_comments": 110,
        "comments": [
            "I mean, strictly speaking, \"self\" is a convention, not a feature of the language. There's nothing stopping you from defining\n\n```\nclass Foo:\n   \n    def __init__(this_shit, value):\n        this_shit.value = value\n```",
            "Nice quiz! 18/20, the question about the ABC language was quite puzzling :)",
            "18/20.\n\nI'm not going to kick myself about the ABC history question.\n\nThe \"Duck typing\" one - Is duck typing a language feature? I answered on the basis duck typing is more like a pattern you can use because the language is dynamically typed (which *is* a language feature).",
            "I'm going to argue that all possible answers to question 6 (What does the 'yield' keyword do in Python?) are wrong.\n\nFrom [the docs](https://docs.python.org/3/reference/expressions.html#yield-expressions) (emphasis added)\n> Using a yield expression in a function\u2019s body causes that function **to be a generator** function[...]When a generator function is called, it returns an iterator known as a generator. That generator then controls the execution of the generator function. The execution starts when one of the generator\u2019s methods is called. At that time, the execution proceeds to the first yield expression, where it is suspended again, returning the value of expression_list to the generator\u2019s caller[...]\n\nSo IMO the correct answer would be something like \"it causes the function to become a generator, which in turn will run until the first yield statement before being suspended, returning the yielded argument\", which is quite long.\n\nThe supposedly correct answer \"Causes the function to return a generator\" is just plain wrong. The following function `foo` returns a generator:\n\n    def foo():\n        def bar():\n            yield 42\n        return bar()\n\nEdit: thinking more about it, \"causes the function to return a generator object\" would still not be ideal, but technically correct. Because in the example above, calling bar() will return a generator object, because bar is a generator.",
            "Some of the questions I found to be quite ambiguous. For example, #12 is asking about `self` in a class method. Is \"class method\" referring to a method of a class annotated with @classmethod decorator or a member function?\nAlso, the first parameter of a member function doesn't have to be called \"self.\" Self is just a convention.\n\nHighly recommended for beginners, but it can be confusing for someone with more experience.",
            "> 11 What is the primary function of the `__init__` method in a class?\n\n`__init__` initializes the instance object, not the class object. If you wanted to custom-initialize the class object, you'd need a metaclass (or `__init_subclass__` if you're using a class hierarchy)",
            "If you're going to quiz interns and new hires, you better get the details right.\n\n* Q1: garbage collection is a feature of an [implementation](https://docs.python.org/3.12/reference/introduction.html#alternate-implementations), not a language. In the case of Python, the garbage collector differs between different versions and different interpreters, e.g.\n\n  - Python 1 had only reference counting;\n  - Python 2 and 3 has both reference counting and a cyclic garbage collector;\n  - PyPy can be configured for many different garbage collectors;\n  - Jython uses whatever the JVM uses (which is *not* reference counting); \n  - IronPython uses whatever the .Net CLR uses (again, not reference counting);\n  - I have no idea what RustPython and Nuitika use;\n  - and *in principle* somebody could make a Python interpreter with no garbage collection at all. (It would be a pretty awful Python implementation, but it would be a Python implementation).\n\n* Q2: While I personally am fascinated by the history of and evolution of programming languages, I think that expecting your Python devs to memorise which features came from ABC and which didn't is going a bit far.\n\n* Q4: `try...except` is *two* statements, not one. You can have a `try` without an `except`, e.g. `try...finally`.\n\n* Q6: technically all the answers are wrong. `yield` is an *expression* which at compile-time (yes, the Python interpreter has a compile-time -- what do you think the `compile` function does?) causes the function containing a `yield` to be treated as a generator function. At run-time, a `yield` does three thing: pauses execution of the generator, returns a value, and then when the generator resumes, [accepts a value to be passed back into the generator](http://www.dabeaz.com/coroutines/). Few people know about that last step, even though it has been in the language for at least 14 years.\n\n* Q7: The answer depends on where in the function definition the `*` is. But given that you specify it as an operator, the only correct answer is *multiplication*.\n\n  - In the *body* of a function, `*` is an operator that can be used for multiplication, or sequence unpacking: `spam, eggs, aardvark, *the_rest = mysequence*4`\n  - in the *header* of the function, `*` in the default value of a parameter is multiplication, just like in the body: `def spam(arg=42*'eggs'): ...`\n  - still in the header, a leading `*` before a parameter name is **not an operator** it is a syntactic form for a special identifier which collects any extra positional arguments: `def spam(arg, *extras): ...`\n  - still in the header, a `*` *without a parameter name* acts to separate positional-or-keyword parameters from keyword-only parameters; \n  - this is not a complete list! The star symbol `*` is one of the most heavily overloaded symbols in Python.\n\n* Q11: the `__init__` method does not initialise the class object. The class object is initialised when the `class` statement runs. (Classes are objects too.) The `__init__` method is called, not when the class object is created, but when an instance of that the class is created.\n\n* Q12: `self` is a convention, so it doesn't actually have any special meaning at all. And by convention, it doesn't get used in class- and static-methods.\n\n* Q20: the *primary* purpose of the `with` statement, in the sense of the most common and most useful, is to handle files. I've probably written a hundred `with fp in open(...)` statements for every other context manager. Compared to dealing with files, all other context managers are *secondary*. (YMMV.)\n\nEdit: `with open(...) as fp` of course. Why am I still up at 4am?",
            "Re: 2. Which feature is NOT inherited by Python from the ABC language?\n\nBut Python is very OOP, everything in Python is an object, even functions. Is it even possible to tell why Python is OOP and where it got it from?",
            "16/20 there were some things I honestly saw for the first time.",
            "17/20, I don't really see the point of this and would laugh if someone legit thought they could use it to evaluate an intern/jr.\n\n\\#2 -- absolutely no idea what ABC is or it's relationship to Python. Why would anyone know this? \n\n\\#6 -- I don't think the functions `returns` a generator, I think it becomes a generator?\n\n\\#7 -- * doesn't unpack. It collects listed args into a var.\n\n\\#13 -- might be fair. Idk tbh. I don't remember all those things off the top of my head. My answer would've been \"My IDE tells me\" lol\n\nThe rest are whatever, but I don't think it's a good way to evaluate devs on their Python abilities. Some of these questions are just kinda obscure.\n\nWould much rather ask them to build a Flask backend or a simple script or something to evaluate their skills."
        ]
    },
    "Running Python in Web Browsers": {
        "title": "Running Python in Web Browsers",
        "score": 41,
        "url": "https://www.reddit.com/r/Python/comments/1dl8stp/running_python_in_web_browsers/",
        "content": "Python is one of the world's most popular programming languages and the web is the most ubiquitous application platform. There are several projects which aim to enable Python to run in web browsers.\n\n* [Brython](https://www.brython.info/) is an implementation of Python 3 written in JavaScript.\n* [Skulpt](https://skulpt.org/) is an implementation of Python 2/3 written in JavaScript.\n* [PyScript](https://pyscript.net/) is an implementation of Python 3 written in WebAssembly.\n* [Transcrypt](https://www.reddit.com/r/VistaPython/) is a Python to JavaScript compiler - unfortunately, the project seems to have been abandoned.\n* [Batavia](https://github.com/beeware/batavia) is a Python virtual machine written in JavaScript - unfortunately, the project seems to have been abandoned.\n\nFinally, I have created [VistaPython](https://www.reddit.com/r/VistaPython/) which is also intended to run Python 3 in web browsers but by using a bytecode interpreter written in JavaScript.\n\nEach design has strengths and weaknesses:\n\nBoth Brython and Skulpt use hand-written Python parsers which are difficult to maintain. VistaPython uses a parser generator, [Antlr](https://www.antlr.org/), to automatically generate the JavaScript code for the parser. The parser can be updated to match the latest Python version by simply running a script.\n\nAlso, both Brython and Skulpt generate JavaScript code which is then evaluated. In VistaPython, the compiler produces a \"code object\" which is then executed using the bytecode interpreter. The first approach will result in faster code whereas the second approach can be more flexible for code stepping, etc.\n\nPyScript is based on [Pyodide](https://pyodide.org/en/stable/) which is a port of CPython to WebAssembly.\n\nPyScript can be upgraded the latest Python release by recompiling the latest CPython sources. Its main disadvantage is that it is very heavy to load and seems to run poorly on mobile devices.\n\nIn VistaPython, the load profiles are:\n\n* vm.js (Python virtual machine) 761kb\n* Python parser 368 kb\n* Mobile client GUI 2.4 Mb\n* Desktop client GUI 2.9 Mb\n\nCompiled applications can be run using only the Python virtual machine (761kb).\n\nThe design goal of VistaPython is to be able to load compiled applications from a database and run them quickly on any web device.\n\n",
        "num_comments": 9,
        "comments": [
            "How is pyscript these days? Seemed promising when I first heard about it but was pretty slow.\n\n Always like the idea of eliminating barriers to run python applications, thanks for this rundown",
            "Are you sure you\u2019re obeying the Python license?  And trademark rules?",
            "Just wanted to point out your name is verrrry similar to [PyVista](https://pyvista.org/), a well known 3D visualisation project.",
            "Will you be releasing the source code?",
            "Check out anvil.",
            "The thing is for frontend you also need frameworks/libraries. JavaScript has a lot of tools, SPA frameworks and more. Python browsers variants still are \"experimental\" on their own and don't have good ecosystem around them. And then a frontend/fullstack developer would have to use it. Backend dev without getting to know frontend won't be able to use it efficiently or at all.",
            "There is also [pygbag](https://pygame-web.github.io/wiki/pygbag/) that supports running pygame in the browser. I have been using it for my recreation of the [board game Santorini](https://github.com/KennethJAllen/santorini).",
            "They move to MicroPython as the default backend, that rather helped with issues.",
            "+1 for anvil, the team manages skulpt heavily as they rely on it for the python-to-JS"
        ]
    },
    "SSL Error while running Python Script on Network": {
        "title": "SSL Error while running Python Script on Network",
        "score": 0,
        "url": "https://www.reddit.com/r/Python/comments/1dltwvf/ssl_error_while_running_python_script_on_network/",
        "content": "I created a script to download some user data from Azure, it works fine on my home system, but anytime that I run it on a different network, I get SSL errors. I tried to ignore the errors, but the script stops functioning. Has anyone seen this before? And it's not just on one network, because I've tried it at several locations, from different networks.\n\nError: Certificate verify failed: unable to get local issuer certificate (ssl.C:1000)",
        "num_comments": 2,
        "comments": [
            "r/learnpython",
            "Check if the SSL certificates are installed/updated on the other networks."
        ]
    }
}
{
    "[PSA]/r/java is not for programming help, learning questions, or installing Java questions": {
        "title": "[PSA]/r/java is not for programming help, learning questions, or installing Java questions",
        "score": 323,
        "url": "https://www.reddit.com/r/java/comments/j7h9er/psarjava_is_not_for_programming_help_learning/",
        "content": "# /r/java is not for programming help or learning Java\n\n+ **Programming related questions** do not belong here. They belong in **/r/javahelp**. \n+ **Learning related questions** belong in **/r/learnjava**\n\nSuch posts will be removed.\n\n**To the community willing to help:**\n\nInstead of immediately jumping in and helping, please **direct the poster to the appropriate subreddit** and **report the post**.",
        "num_comments": 0,
        "comments": []
    },
    "[Week 26] Newly uploaded Java talks from Spring I/O 2024, Voxxed Days Trieste 2024, JAVAPRO 2024, and GOTO 2023": {
        "title": "[Week 26] Newly uploaded Java talks from Spring I/O 2024, Voxxed Days Trieste 2024, JAVAPRO 2024, and GOTO 2023",
        "score": 22,
        "url": "https://www.reddit.com/r/java/comments/1dqnb5h/week_26_newly_uploaded_java_talks_from_spring_io/",
        "content": "Hello r/java! Java conference season is definitely still in full swing, so I'm continuing the coverage. Below, you'll find all the recently uploaded talks from **Spring I/O 2024**, **Voxxed Days Trieste 2024**, **JAVAPRO 2024**, and **GOTO 2023**. Enjoy!\n\n# 1. Spring I/O 2024\n\n1. [**\"Java meets TypeScript: full-stack web app development with Spring Boot and React by Marcus Hellberg\"**](https://youtube.com/watch?v=LeYF1NE3jQ4) \u2e31 **+5k views** \u2e31 25 Jun 2024 \u2e31 00h 49m 25s\n2. [**\"The Modern Monolith, with Spring Modulith by Cora Iberkleid @ Spring I/O 2024\"**](https://youtube.com/watch?v=Pae2D4XcEIg) \u2e31 **+4k views** \u2e31 21 Jun 2024 \u2e31 00h 52m 55s\n3. [**\"The Spring Data Cookbook - Delicious Recipes For Fast, Secure Data by Christoph Strobl @ Spring I/O\"**](https://youtube.com/watch?v=OrXZXiImCEQ) \u2e31 **+3k views** \u2e31 21 Jun 2024 \u2e31 00h 51m 10s\n4. [**\"IntelliJ IDEA Tips and Tricks for Spring Developers by Anton Arhipov @ Spring I/O 2024\"**](https://youtube.com/watch?v=1kum1N_-cb0) \u2e31 **+2k views** \u2e31 25 Jun 2024 \u2e31 00h 56m 16s\n5. [**\"A Spring Developers Guide to Navigating the Frontend Landscape by Dan Vega @ Spring I/O 2024\"**](https://youtube.com/watch?v=CdtyvO9jg8E) \u2e31 **+1k views** \u2e31 25 Jun 2024 \u2e31 00h 50m 48s\n6. [**\"Improve developer experience with Spring Interface Clients by Olga Maciaszek-Sharma @ Spring I/O 24\"**](https://youtube.com/watch?v=uDo3Q02_ano) \u2e31 **+1k views** \u2e31 25 Jun 2024 \u2e31 00h 51m 24s\n7. [**\"Platform Engineering with Spring Boot by Tom Hombergs @ Spring I/O 2024\"**](https://youtube.com/watch?v=B71Ehy9QG0I) \u2e31 **+1k views** \u2e31 26 Jun 2024 \u2e31 00h 47m 34s\n8. [**\"AsyncAPI & Springwolf - Automated documentation (and more) by Raphael De Lio @ Spring I/O 2024\"**](https://youtube.com/watch?v=DylvTW_ia4Y) \u2e31 **+1k views** \u2e31 26 Jun 2024 \u2e31 00h 35m 30s\n9. [**\"It's all in the mix: producing production-ready apps with Spring Boot by Joris Kuipers @ Spring I/O\"**](https://youtube.com/watch?v=EEHJekkSDNA) \u2e31 **+1k views** \u2e31 27 Jun 2024 \u2e31 00h 52m 31s\n10. [**\"Making Spring Cloud Gateway your perfect API gateway solution by Dan Erez @ Spring I/O 2024\"**](https://youtube.com/watch?v=9wycFMCmRUY) \u2e31 **+800 views** \u2e31 27 Jun 2024 \u2e31 00h 36m 07s\n\n# 2. Voxxed Days Trieste 2024\n\n1. [**\"\\[VDTRIESTE24\\] Debugging with IntelliJ IDEA - Tools-in-action by Vitaly Bragilevsky\"**](https://youtube.com/watch?v=XHaJfSDQcOs) \u2e31 **+600 views** \u2e31 23 Jun 2024 \u2e31 00h 45m 08s\n2. [**\"\\[VDTRIESTE24\\] Getting Started with Architectural Decision Records - Conference by Antonio Dell'Ava\"**](https://youtube.com/watch?v=NbTTkUa-K3I) \u2e31 **+600 views** \u2e31 23 Jun 2024 \u2e31 00h 43m 22s\n3. [**\"\\[VDTRIESTE24\\] Open sourcing a library: how hard can that be? - Conference by Johan Hutting\"**](https://youtube.com/watch?v=0f_hv_Dl8Ug) \u2e31 **+500 views** \u2e31 23 Jun 2024 \u2e31 00h 45m 46s\n4. [**\"\\[VDTRIESTE24\\] Fail your tasks successfully - Flash Talk by Borut Jogan\"**](https://youtube.com/watch?v=pOn5dFEqz68) \u2e31 **+400 views** \u2e31 23 Jun 2024 \u2e31 00h 20m 05s\n5. [**\"\\[VDTRIESTE24\\] Unleashing the Power of Vector Search and Semantic Caching in Java - by Luigi Fugaro\"**](https://youtube.com/watch?v=cmcRSbuJ9Qw) \u2e31 **+400 views** \u2e31 23 Jun 2024 \u2e31 00h 29m 27s\n6. [**\"\\[VDTRIESTE24\\] Server Components are React's superweapon in the Stack Wars - by Edoardo Dusi\"**](https://youtube.com/watch?v=OgZgqcyTIRY) \u2e31 **+300 views** \u2e31 23 Jun 2024 \u2e31 00h 33m 04s\n7. [**\"\\[VDTRIESTE24\\] Building a Video Player from Scratch with React Native - Conference by Omar Diop\"**](https://youtube.com/watch?v=0KrXsbKVhkY) \u2e31 **+200 views** \u2e31 23 Jun 2024 \u2e31 00h 38m 00s\n8. [**\"\\[VDTRIESTE24\\] Wear glasses with NodeJS, Puppeteer, and Chrome - Conference by Vincenzo D'Amore\"**](https://youtube.com/watch?v=RYCZUk6nqNs) \u2e31 **+100 views** \u2e31 23 Jun 2024 \u2e31 00h 36m 23s\n\n# 3. JAVAPRO 2024\n\n1. [**\"Say goodbye to bugs and anti-patterns with Error Prone | Rick Ossendrijver (EN)\"**](https://youtube.com/watch?v=lQvFJiJKL_0) \u2e31 **<100 views** \u2e31 25 Jun 2024 \u2e31 00h 47m 47s\n2. [**\"Could your Java workloads be missing out on something? | Mark Stoodley (EN)\"**](https://youtube.com/watch?v=_UL-bdAkGH0) \u2e31 **<100 views** \u2e31 21 Jun 2024 \u2e31 00h 56m 37s\n3. [**\"Java Diary of an Uber Driver | Werner Keil (EN)\"**](https://youtube.com/watch?v=9mY8iRPI4o8) \u2e31 **<100 views** \u2e31 24 Jun 2024 \u2e31 00h 37m 27s\n4. [**\"Weeding Your Micro Service Landscape | Tim te Beek (EN)\"**](https://youtube.com/watch?v=BZdkiLEDx5Q) \u2e31 **<100 views** \u2e31 26 Jun 2024 \u2e31 00h 47m 49s\n\n# 4. GOTO 2023\n\n1. [**\"Java, Code Coverage: Scandals, Intrigues & Investigations \u2022 Evgeny Mandrikov \u2022 GOTO 2023\"**](https://youtube.com/watch?v=SQqam3ARD_k) \u2e31 **+1k views** \u2e31 21 Jun 2024 \u2e31 00h 53m 12s\n\nI've built this list as a part of [Tech Talks Weekly newsletter](https://techtalksweekly.substack.com/), where on a weekly basis, I'm sending a list of all the recently uploaded talks from the last 7 days. Here's a [recent issue](https://techtalksweekly.substack.com/p/tech-talks-weekly-19). Consider subscribing if this sounds useful.\n\nLet me know what do you think!",
        "num_comments": 0,
        "comments": []
    },
    "Java on Visual Studio Code Update - June 2024": {
        "title": "Java on Visual Studio Code Update - June 2024",
        "score": 20,
        "url": "https://www.reddit.com/r/java/comments/1dqg064/java_on_visual_studio_code_update_june_2024/",
        "content": "[https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-june-2024/](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-june-2024/)",
        "num_comments": 4,
        "comments": [
            "Wish we could have inlay return types(similar to the inlay parameter types) like intellij have",
            "Wish we could have\u00a0 a stack trace console.",
            "I wish we could have the IntelliJ 'inspect code' function. The sad truth is that IntelliJ is simply way smarter than the Red Hat LSP. And while that's the case, I'll need to use IntelliJ over VSCode, even though I prefer it for its modularity, better vim integration and far superior WSL support.",
            "Just use Intellij?"
        ]
    },
    "What happened to Eclipse?": {
        "title": "What happened to Eclipse?",
        "score": 80,
        "url": "https://www.reddit.com/r/java/comments/1dq5a86/what_happened_to_eclipse/",
        "content": "Has Eclipse stagnated?  Is there any backlash from Eclipse against competitors like Intellij or VS Code?\n\nIt is not even mentioned anymore. Is the project dead?",
        "num_comments": 150,
        "comments": [
            "The Eclipse Foundation is pretty much alive. Lots of projects governed under them.\n\nIf you are looking for an Eclipse IDE, it's getting released every 3 months and keeps adding features to support the latest Java version.",
            "FYI, VS Code Java plugin is running Eclipse in headless mode for all of its rich functionality (refactoring, type hierarchy lookup, context-sensitive autocomplete, etc).\n\nSo... not really a competitor to Eclipse.",
            "Eclipse is not dead but IntelliJ IDEA is a better product, particularly for enterprise work. Now that IntelliJ has a free Community Edition it\u2019s hard to recommend Eclipse  over IDEA unless you are building RCP apps.",
            "I use eclipse every day.",
            "What happend to Netbeans? Is another random question.",
            "The Eclipse-derived jdt-ls still serves many people as the most mature Java language server implementation so far :)",
            "They just released a new version this month supporting Java 21. \n\nEvery government contractor uses it because there is no cost. It's pretty decent once you've used it for awhile, but that's once you know it and have configured it for your env and preferences(perspectives/views) which takes awhile. \n\nIs IntelliJ fancier and newer looking, yes 100%. But if you've been coding for a couple years you don't really use that extra stuff that much. As long as I can click into documentation, run multiple application on servers in eclipse, and debug then I'm happy with it. \n\nVs Code is great for frontend work, but if I'm working on multiple backend applications then I'm not using Vs. Have seen some people use it, but it never seemed worth it to download 10+ plugins so it does what eclipse does out of the box",
            "Imagine if Ford gave cars away for free.  And then later on BMW started giving away 325s for free too (but you still had to pay for all of their other cars). You\u2019d always have the people who got a Ford Focus trying to find some justification for their choice, but it would be pretty obvious to anyone not invested what the better choice is.\n\nThis is what happened to Eclipse.",
            "The only thing that happened to eclipsed is that intelliJ exists",
            "It doesn't need to be flashy to do its job"
        ]
    },
    "Why are null-restricted types coupled with Valhalla?": {
        "title": "Why are null-restricted types coupled with Valhalla?",
        "score": 62,
        "url": "https://www.reddit.com/r/java/comments/1dpxl11/why_are_nullrestricted_types_coupled_with_valhalla/",
        "content": "https://openjdk.org/jeps/8316779 introduces the concept of null-restricted types.\n\nI was wondering; why does this JEP have to be coupled with the Valhalla project? Can't it be delivered independently, much earlier?\n\nThe JEP effort is described as XL, but as I read through the description I note that the vast majority of the complexity comes from introducing the concept of zero instances, implicit constructors, heap flattening, atomic read/writes, etc.\n\nNone of these concepts seem to be a hard requirement for null-restricted types. In fact, the vast majority of them seem to be implementation-level details that are specific to Valhalla. They can be introduced later on if necessary. \n\nCouldn't we reduce the scope of the JEP by moving these concepts into the Valhalla JEP, and delivering this feature as a compile-time syntactic sugar?\n\nThe benefit of introducing null-restricted types to Java is rather large, and the risk of releasing it as a preview feature without these other concepts seems to be low. So why not do it?\n\nWith respect to these other concepts, we could introduce a compile-time check preventing null-restricted types from being accessed before they are initialized. We already do this for superclass fields and local variables. Developers are used to this concept. This eliminates the need for zero instances and implicit constructors.\n\nNothing prevents us from removing this restriction when/if we decide to add these concepts at a later time. Though, I honestly don't understand why we would want to introduce these concepts when we could simply deny access to uninitialized variables. It seems much easier to implement and understand.\n\nI know that the language designers are a very smart bunch of people, so I must be missing something... What am I missing? \ud83d\ude00",
        "num_comments": 47,
        "comments": [
            "The question is a reasonable one; nullity control seems like it is \"just\" a language feature (compared to the rest of Valhalla, which is a deep cut through the language, VM, and runtime), and therefore could be profitably separated.  (I would note that your motivation for separating it is probably that you think we could deliver it sooner that way, and you really want us to deliver it sooner -- a motivation that I call \"product manager, home game edition\".)\n\nWhile all you say is true, it would not be a good idea, for a few reasons.  One is that the nullity control feature that we might design in a vacuum as \"just\" a language feature would almost surely not take into account the needs of Valhalla, and there is a substantial risk of designing the wrong feature.  (Also, this is why Valhalla has waited this long to address the nullity control problem; we had to figure out what Valhalla _did_ need from nullity control.)  Another reason is that it is ideally not \"just\" a language feature; we would like to enlist the VMs help in preventing `putfield` from putting a null in a non-nullable field, or preventing `aastore` from putting a null in a non-nullable array.  And another is that Valhalla anticipates other forms of type refinement (such as a variable that only holds a `List<Integer>`, not a `List<Shoe>`), we would want the mechanisms used for null refinement to be consistent with those used for broader refinement.  \n\nA further (potentially surprising) connection with Valhalla is that value types have a more constrained initialization protocol (it is unacceptable to leak a partially constructed value object, wheras it is merely rude to leak a partially constructed identity object), and it turns out the same machinery needed to provide for ironclad safe initialization for values is applicable to preventing `String!` fields from every being observed to be null.  So there are often hidden benefits to waiting, rather than \"get the feature out as soon as we possibly can.\"  \n\nOn the topic of \"would we get it faster\", while decoupling from Valhalla would surely make it smaller, the feature itself is not at all small.  It is a pretty major type system adjustment, rippling through virtually every section of the JLS: grammar, type system semantics, source- and binary-compatibility, pattern matching, generics, bounds conformance, type inference, overload selection, conversion, etc etc.  That XL would not become an S, or an M.  \n\nBut, there is a possible outcome you may like: once we finish designing the language feature needed by Valhalla, we could _then_ break it out as a separate JEP.  Whether we do that or not will depend on the relative timing of other efforts.  But the long pole is synching the designs.  \n\nOthers have pointed out that while `String!` is nice, having the default be `String!` and then explicitly opt into `String?` would be nicer, but unfortunately we don't get to retroactively change the meaning of `String`.  (This would not be the first time, or even the fifth, that Java got the default wrong.)\n\n(As a final note, nothing that involves deep intrusion into the type system can accurately be called \"syntactic sugar\".  I think what you really mean is that the nullity type system could be checked at compile time and _erased_ at runtime.)",
            "Project Valhalla is a major refactor of internals of the JVM. I suspect they need to do this work before they can add support for null-restricted types.",
            "I'm not an expert here, but while skimming through the JEP, it quite literally says that the support of null-restricted types for identity classes or classes that do not provide a default value is not a design goal.\n\nThere are other things that are specific to value types as well, such as:\n\n>A normal class type can be converted to a null-restricted type, and vice versa, much like the type\u00a0`Integer`\u00a0can be converted to and from the type\u00a0`int`.\n\nThis boxing-unboxing analogy doesn't translate well to identity classes.\n\nI think the simple answer is that null-restricted types are just out of scope for this project. Null-restricted types were designed specifically with value types in mind. Adding this support to identity classes is way out of scope.\n\nPersonally, I wouldn't like null-restricted types for identity classes. I would prefer something like nullable objects (the reverse, so non-nullable unless said otherwise) in Kotlin, but in Java, without having to learn an entirely different language that insists on doing everything differently (my main issue with Kotlin, even though I really like certain ideas).",
            "I wish this could have been in place before Enum was added to the language. Having to accommodate the potential for stray nulls with enums is a constant annoyance.",
            "The thing missing in your diatribe is __how__. null restricted types is incredibly complicated. I'm guessing you think they aren't. They are.\n\nIf you really think they aren't: Please write the signature of a method that does the following. Included the implementation as we would write it in today's java. Imagine this method already exists. Now write up the null restricted type feature in light of the fact that things like this already exist and java does not like breaking backwards compatibility:\n\n```\n/**\n * Finds the first string that is shorter than 5 characters and adds it to the end of the list.\n * {@code null} in the list is allowed and is not considered 'shorter than 5 characters'.\n * \n * @return {@code true} if such an element was found and copied; {@code false} otherwise (in which case the list will not have been modified)\n */\npublic boolean duplicateFirstShortString(List<String> input) {\n  for (String elem : input) {\n    if (elem != null && elem.length() < 5) {\n      input.add(elem);\n      return true;\n    }\n  }\n  return false;\n}\n```\n\nI don't even need a full spec write up of how it works. Just tell me how to write this with whatever idea you have to introduce 'null restrictive' types here.",
            "Good answer. Thank you for the detailed clarification.\n\nYes, when I talked about syntactic sugar, I meant that today this could be a compile-time feature that is erased at runtime, but nothing would prevent us from adding runtime enforcement at a later point.\n\nThis brings me to my other question: why do we need to introduce the concept of zero instances and implicit constructors in order to prevent uninitialized fields from showing up as null? Why can't the compiler throw an error as it currently does when other uninitialized local variables or superclass fields are accessed prior to initialization?",
            "Really appreciate your detailed answer. Java got the defaults wrong in many places and it is an issue you will need to tackle at some point so it can stay competitive for years to come. Holding onto too much backwards compatibility is hampering the growth of java. Most \"old code\" is still sitting on java 8. They will not migrate to java 21 no matter how much backwards compatibility you maintain. At some point, java should go thru a migration process like this https://dart.dev/null-safety/migration-guide that sets it up for next 30 years. A migration tool that automatically converts code to new style will go a long way.\n\nFocusing on DX will only increase the popularity and adoption of Java.",
            "You're using the term refactor wrong. You just mean \"change\". A refactoring preserves behaviour.",
            "You're right. I misunderstood what the feature was about. I thought it was about what excalamation mark means in C#, simplifying the declaration of variables that may not be equal to null or contain null elements.\n\nI still think there is a benefit in adding such a concept to the language.",
            "I agree in terms of preference for not-null by default, optionally nullable instead. But I don't believe the jdk devs will do it, since it would change the meaning of existing code and that just seems to be a holy cow for them.\n\n\n\nHowever it does kind of seem that we could just the same have non-value classes with support for being null restricted, subject to same constraints as value classes, without any issues. Probably this limitation in scope is due to there being less advantage from a JIT point of view? Perhaps in combination with not wanting to upset the highly conservative java crowd."
        ]
    }
}
{"Sunday Daily Thread: What's everyone working on this week?": {"title": "Sunday Daily Thread: What's everyone working on this week?", "score": 1, "url": "https://www.reddit.com/r/Python/comments/1dgv2s3/sunday_daily_thread_whats_everyone_working_on/", "content": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show & Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f", "num_comments": 2, "comments": ["Im trying to break into a technical role right now, so doing a lot of projects in a few languages to put on my portfolio right now, but for python I just wrote a script that clears temp files, kills zombie processes, checks cpu and memory usage and purges if its over a set amount, and reboots my touch bar on my Mac (MacBook pro M1 users I'm sure you know this issue) - also scheduled this to run in the evenings using cron and have a documented logging file to go with it, pretty happy with it so far, but any other project ideas would be great !", "Coded Streamlit app, attempted to recode using Django this am - took way too long but have 50% features. Oddly took a bit less time with Vite/JS and was prettier. So\u2026 Streamlit is good enough. Every incremental change in the other two takes 5x or 3x as long."]}, "Saturday Daily Thread: Resource Request and Sharing! Daily Thread": {"title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "score": 3, "url": "https://www.reddit.com/r/Python/comments/1dg4zxe/saturday_daily_thread_resource_request_and/", "content": "# Weekly Thread: Resource Request and Sharing \ud83d\udcda\n\nStumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!\n\n## How it Works:\n\n1. **Request**: Can't find a resource on a particular topic? Ask here!\n2. **Share**: Found something useful? Share it with the community.\n3. **Review**: Give or get opinions on Python resources you've used.\n\n## Guidelines:\n\n* Please include the type of resource (e.g., book, video, article) and the topic.\n* Always be respectful when reviewing someone else's shared resource.\n\n## Example Shares:\n\n1. **Book**: [\"Fluent Python\"](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \\- Great for understanding Pythonic idioms.\n2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \\- Excellent overview of Python's built-in data structures.\n3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \\- A deep dive into decorators.\n\n## Example Requests:\n\n1. **Looking for**: Video tutorials on web scraping with Python.\n2. **Need**: Book recommendations for Python machine learning.\n\nShare the knowledge, enrich the community. Happy learning! \ud83c\udf1f", "num_comments": 1, "comments": ["Where to get open source contribution guide or mentor"]}, "Api for odds and results on prop bets?\u00a0": {"title": "Api for odds and results on prop bets?\u00a0", "score": 8, "url": "https://www.reddit.com/r/Python/comments/1dh8qmb/api_for_odds_and_results_on_prop_bets/", "content": "Does anyone know of a reilabel API(preferably free) that offers prp bets for major sports-(NFL, NBA, MLB), i need the odds and results too.\u00a0\n\n", "num_comments": 1, "comments": ["The best I have found is sportsgame odds, they do have a free options, and all props are graded.\u00a0"]}, "Have anyone tried google/mesop": {"title": "Have anyone tried google/mesop", "score": 26, "url": "https://www.reddit.com/r/Python/comments/1dh1uu1/have_anyone_tried_googlemesop/", "content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit.\n\nfind more [here](https://google.github.io/mesop/) ", "num_comments": 11, "comments": ["A few colleagues and me had a look, and ended up checking Shiny for python instead. They had experience with streamlit, I haven't used neither, but a quick play with Shiny was pretty alright. Easy to use I'd say. \n\nP.S.: sorry to not answer directly to your question, but from the same question we ended up trying Shiny.", "PyWebIO & Nicegui are my go-tos", "idk, they promise typing,\nbut i prefer just react and django instead.", "Following... curious about this project", "Thanks for the tip! I didn't know about this, and it looks great. I'll give it a go soon.", "I've made some prototypes with it. Gonna stick with Holoviz Panel, though. Looks better, codes better, has a bigger set of batteries included.", "Our team has been using Plotlys Dash framework for this for a long time. We tend to prefer it over Gradio, Shiny, and Streamlit as it feels a little less black box. \n\nHowever, these components look super nice. Might have to try this out.", "Interesting. I haven't played in this space for a couple of years, but when I was, I was using Anvil (https://anvil.works ) - it's got both front and back end, drag-and-drop design, and is just a joy to use.", "Wow. Looks amazing. Can you run it on your own server though?", "I haven't tried, but https://anvil.works/open-source & https://github.com/anvil-works/anvil-runtime", "Looks so cool! Thx"]}, "I created Yu-Gi-Oh! Power of Chaos save handler": {"title": "I created Yu-Gi-Oh! Power of Chaos save handler", "score": 4, "url": "https://www.reddit.com/r/Python/comments/1dh62bk/i_created_yugioh_power_of_chaos_save_handler/", "content": "Quick backstory:\n\nUpper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier.\n\nWhat the project does:\n\nIt's essentially a CLI save handler for the game mentioned in the title. It has 5 slots where you can backup your current save or load the backup to the computer. It can also fix minor registry issues if needed.\n\nTarget audience:\n\nGiven that I'm about 20 years too late... I'd say mostly people with very slow PCs or people who like to inhale nostalgia.\n\n  \nI learned a lot about using winreg and msvcrt and getch, so while I will likely get bored of the game in the coming weeks, I'm happy I learned something new in the meantime, plus maybe someone finds it useful!\n\nSource code: [markomavrinac/yugioh\\_poc\\_save\\_handler: Yu-Gi-Oh! Power of Chaos save handler - A script to manage your save games across multiple computers (github.com)](https://github.com/markomavrinac/yugioh_poc_save_handler)", "num_comments": 0, "comments": []}, "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries": {"title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "score": 7, "url": "https://www.reddit.com/r/Python/comments/1dh2o89/tutorial_a_timely_python_multipage_streamlit/", "content": "***Streamlit***\u00a0is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease.\n\nUsing just a few lines of Python, you can turn data scripts into shareable web apps.\n\nAnd combined with a data visualization library like\u00a0***Plotly,***\u00a0you can create beautiful charts and maps with only a few lines of code.\n\nIn this article, let me step you through how to use\u00a0***Streamlit***\u00a0to create a multi-page interactive application that visualizes Olympic medal data.\n\nThe application will have three pages:\n\n1. an overview of medal counts,\n2. a country-specific analysis, and\n3. a choropleth map displaying global medal distributions.\n\nLet\u2019s get to it!\n\nLink to free article [HERE](https://johnloewen.substack.com/p/a-beautiful-and-timely-python-multi)\n\nGithub repo [HERE](https://github.com/loewenj700/streamlit_multipage_olympics)", "num_comments": 1, "comments": ["Wish there were better ones of these. I want to see more examples of pages with lots of interaction."]}, "Malicious VSCode Extensions Uncovered: Beware my fellow programmers": {"title": "Malicious VSCode Extensions Uncovered: Beware my fellow programmers", "score": 10, "url": "https://www.reddit.com/r/Python/comments/1dgy8s7/malicious_vscode_extensions_uncovered_beware_my/", "content": "Malicious VSCode Extensions Uncovered: Millions of Installs at Risk! Beware my fellow programmers, make sure you review your VSCode extensions\n\n[https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/](https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/)", "num_comments": 15, "comments": ["Seriously, I\u2019m just so tired of seeing bad actors everywhere.", "I mean...duh... Didnt expect it would be any other way.\n\nSo just always make sure to install extensions from reputable authors and you should be fine...", "Darcula is one of the malicious extensions from the article. It is a copy of a popular color theme extension called Dracula (notice the typo in the malicious extension).", "*\\*Laughs in vim\\**", "Jokes on you, Macs don't get viruses", "[deleted]", "That's what time would have thought of but was thinking why there are millions of users who don't think this way as us?", "pretty sure Darcula is also phpstorm's default theme, that could be a nice hook for fishing more... people...", "Of course, you\u2019re stuck and can\u2019t exit.", "JavaScript would like to have a word.\u00a0", "Mac nerds need to touch grass", "A) it\u2019s really not like bad actors aren\u2019t a major issue for big corporations \nB) not sure if VS Code extensions are primarily marketed towards hobby programmers, I\u2019d expect them to hit relatively evenly", "Double whammy: phpstorm is also malicious! /Jk", "Neither can the malware!", "\ud83d\ude05", "Am I so old that people don't remember when this was a literal ad campaign in mid 00s?"]}, "Learning Python coming from a JVM background ": {"title": "Learning Python coming from a JVM background ", "score": 10, "url": "https://www.reddit.com/r/Python/comments/1dgye28/learning_python_coming_from_a_jvm_background/", "content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python.  What's a good resource to get up to speed quickly with idiomatic Python?  ", "num_comments": 10, "comments": ["The [official Python tutorial](https://docs.python.org/3/tutorial/index.html).", "Videos from Raymond Hattinger, especially the one where he shows how Java people tend to write python and then he transforms it into idiomatic python", "Use the official Python specification and tutorial.\n\nIt is a pretty logical, easy and straightforward language, with its power coming from its extensive libraries.\n\nJust one tip - Python's dynamic nature, loose typing and lack of private and protected types drove me nuts and led to many bugs before I got used to it. That is compensated by you spending most of your thinking on your problem, rather than on the language syntax. Your mileage may vary.", "As a resource, I like the book Fluent Python. Not something I'd sit down and read front-to-back, but it's good to skim the concepts and refer back to em.", "https://speedsheet.io/s/python", "Rackerhank", "https://github.com/satwikkansal/wtfpython", "Similar background...\n\nPick a build/environment/packaging tool, a combination as simple as possible while you explore and stick with it. It's very easy to go down the tooling rabbit hole, that was my lesson.", "r/learnpython has some good resources", "Seconding that, except that I\u2019m actually in the process of reading it front to back. I also use Exercism to go through some exercises and the community solutions and mentoring helps a lot with learning idiomatic Python (and standard library features I wasn\u2019t aware of yet \ud83d\ude43)."]}, "I made a cool calendar app with PyQt6": {"title": "I made a cool calendar app with PyQt6", "score": 41, "url": "https://www.reddit.com/r/Python/comments/1dgpg4g/i_made_a_cool_calendar_app_with_pyqt6/", "content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6 \n\n# What my Project does?\n\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard.\n\n# Target Audience\n\nWell, anyone who uses a desktop calendar app I guess?\n\n# Comparison\n\nI did some research and couldn't find good calendar apps made with PyQt6.  If you guys knows any, please mention it below and I'm sorry in advance.\n\n# GitHub\n\n[https://github.com/rohankishore/Tempus](https://github.com/rohankishore/Tempus)", "num_comments": 13, "comments": ["Looks cool and polished.\n\nSide note:\n\nYou made it MIT license, but pyqt6 uses GPLv3. There might be a conflict. It's much safer to just use GPLv3 if you just want to share it.", "Awesome project. I loved the simplicity of the UI. Any consideration about integrating your app with third party calendars like google calendar or Microsoft? Probably other apps already do that, but still a cool think to learn and add.\nBesides that congratulations.", "Can you describe why you used PyQT6 rather than PySide?", "What would be the advantage of using this over other planners?", "Also, please star my project if you like it :) \n\n  \n(wait is this against the repo rules?)", "Noted! Thanks a lot \ud83d\ude0a", "Yep! I'm planning to add Google Calendar first. Then Microsoft.\n\nAnd thanks a lot!!", "No particular reason tbh. I'm just more used to PyQt6. And also, the qfluentwidgets library works better with qt6", "Well for one, you get daily horoscopes (haven't seen that in other PC calendars or maybe I'm wrong?) + its open source?", "Not against the rules as far as I can see, but [this little survey](https://new.reddit.com/r/github/comments/qf4p31/is_it_normal_to_ask_people_to_star_repository_or/) suggests that a lot of people (35%) disapprove of the practice.\n\nDownvoting without commenting a reason for doing so, goes against rule 9.", "I think a lot of planners also have pseudo-science in them.", "I don\u2019t get why this is downvoted it\u2019s legit the feature OP is excited about", "Yep, I would appreciate one like this, would be great to have one like this"]}, "Video / Image acquisition from microscope": {"title": "Video / Image acquisition from microscope", "score": 1, "url": "https://www.reddit.com/r/Python/comments/1dh7ntt/video_image_acquisition_from_microscope/", "content": "Dear Fellow Redittors,\n\nI am working on a medical / healthcare AI solution focused on cell structure analysis, and other related studies or blood composition for cancer treatment related research.\n\nI use python, anaconda, spyder etc and I am from AI background, a techie from various fields such as defence, IoT, healthcare etc. \n\nI am aware of my python libraries and modules for microscopes, camera view over the top eye pieces etc. But I am trying to find out suitable microscopes with camera, hdmi output, driver / device servers etc which can connect to the python environment and pull the live video feed for real time diagnostics and related activities based on the model injection directly into the code. \n\nCould any of you please suggest any models of microscope setups and or if you have setup by yourself or working on anything such which has to do with a microscope? \n\nThanks in advance ", "num_comments": 0, "comments": []}}
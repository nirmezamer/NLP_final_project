{
    "Is Dotnet reliable when it comes to machine learning?": {
        "title": "Is Dotnet reliable when it comes to machine learning?",
        "score": 13,
        "url": "https://www.reddit.com/r/dotnet/comments/1dlp4d7/is_dotnet_reliable_when_it_comes_to_machine/",
        "content": "I'm a college student majoring in artificial intelligence. As far as I know python is the dominant language in this field and for sure I will be using it however as a person who loves the dotnet ecosystem I really wonder if I can also extent the artificial intelligence training etc. using C# (Big Fan by the way)",
        "num_comments": 14,
        "comments": [
            "I'm not deep into AI, but I think the reason Python is so prevalent and has the upper hand with regards to maturity, is the fact that it's used a lot in academia - and a lot of research happens there.\n\n\nHowever, you have Tensorflow for .NET, and stuff like this readily available -> https://dotnet.microsoft.com/en-us/apps/machinelearning-ai/ml-dotnet",
            "Describing models is pythons teritory. It has mature eco system, tutorials and such. Also it is easy to wrangle data in python. Training is esentialy C + gpu, it happens in automated manner anyways, so language does not matter. Inference - this is where using c# makes sense, or other languages for that matter. In a lot af cases models only need a runtime to run and that runtime is ussualy a C dll.\n\u00a0",
            "Agree to other answer that says that while it's available, it's nowhere as mature as in Python. The biggest issue you will face is that you will find it harder to get help when you hit a wall. \n\nHowever, I think you could also try using something like ONNX to save your model (trained in Python) and serve it with .NET, though I never really use it in production.",
            "yea, I'd stick with python tbh",
            "ML.NET exists, but is very difficult to get into compared to Python (especially huggingface). The documentation is rather sparse, the libraries aren't as broad, and the community is comparatively quite small.\n\nI suggest looking at the [transformers](https://huggingface.co/docs/transformers/en/index) documentation, follow the tutorials to do something easy and simple, then look at the ML.NET docs and see if you can reproduce it.\n\nEdit: To be clear, anything you can do in python you can do in ML.NET, but depending on what you're doing, the latter might require expert-level knowledge to achieve what in the former would be a single line of code. On the other hand, if you're majoring in AI it may be good to learn. The transformers library can in some ways be a crutch.\n\n(If you're using the low-level APIs though it's literally identical in either language, because they're both just bindings; [TorchSharp](https://github.com/dotnet/TorchSharp) even copied the Python API outright.)",
            "Absolutely not. I did some simple image classification a while back. [ML.NET](https://ML.NET) is horrible and won't make it easy to define your own layers. Then I tried using [TensorFlow.NET](https://TensorFlow.NET) which is just C# bindings for TensorFlow. Also horrible. The versioning is a mess and functions are missing left and right. Finally I gave up and did it all in Python. For any future ML project I won't even try to use anything other than python.",
            "For the short term Python will be the go to language for ML simply because it's the language researchers use and ML is still largely in an embryonic stage of its development.\n\nPython isn't a particularly great language, but between the language itself and a few notable libraries it allows academics to write math heavy code that's \"correct\" without having to understand what they're doing or learn more than the bare minimum.\n\nIf any of this stuff actually comes to something that's useful enough to be a regular part of development and mature enough that it doesn't take a Data Scientist (who probably only knows Python) manually fiddling with it for a thousand hours to get a result, you'll see the mature algorithms implemented in all sorts of languages, but the research isn't really there yet.",
            "Use the right tool for the job. C# is a great language but it isn\u2019t good at everything. Use Python for ml.",
            "There are so many hardware optimizations available in the python libraries now- PyTorch and Jax in particular.\nNew implementations and optimization updates are coming out monthly, even weekly at some points.\n\nYou're just not going to get this with the ML .net framework.\n\n\nOther than python, C and it's derivatives, such as CUDA, are useful for training and embedded ML.\n\n\nUnfortunately the .net ecosystem doesn't cut it here\u00a0",
            "Dotnet is reliable, sure.\n\nBut python has more stuff available.",
            "There is a ML .NET framework, which release in 2018 and is quite mature. Regarding Python, it's possible to call it from donet easily... and pure .Net libraries and bindings, or new types like the Tensor one are coming with dotnet 9.  \nDotnet is really great, and C# is also my favorite language, as it has always offered innovative constructs like linq to only name one... and as a Computer Scientist, who likes programming languages and how they're designed, I have little love for Python.  \nHowever, Python is the most popular languages when it comes to ML/AI workloads.",
            "You either use python for fast prototyping. Or go for c++ for faster solution.\n\n\nC# would need to be equivalent to python in terms of prototyping. Then woukd be ok.",
            "Python is cancer. Sadly it is also dominant in the field because most Data Scientists are not programmers and preference ease of use and the ability to twiddle with the model over basically everything else.\n\nThis has improved but historically it was the norm and gave Python a big headstart.\n\nHopefully as more and more people realise how much ML grift is out there due to poor or suspect engineering practices things will shift.",
            "I\u2019ve used ONNX in production. It works great. No need to add unnecessary network calls. Our training process saved the model as an ONNX file then packaged the world\u2019s smallest nuget package for use elsewhere."
        ]
    },
    "How to handle DaylightSaving in .NET?": {
        "title": "How to handle DaylightSaving in .NET?",
        "score": 17,
        "url": "https://www.reddit.com/r/dotnet/comments/1dlmc5h/how_to_handle_daylightsaving_in_net/",
        "content": "I am working on an e-commerce website. \nWe have stores and their opening and closing time is listed there. We have Set the timezone AEST in website configuration. \n\n\nBut During DaylightSavings the time it showing is wrong. \nHow to handle that? \nThere are different timezones also in Australia. \n\n\n ",
        "num_comments": 32,
        "comments": [
            "We store in UTC and use [Noda](https://www.nuget.org/packages/NodaTime) to localize to a time zone. Offsets from UTC change over time (ie DST, etc.). It\u2019s best to let the library localize it for you.",
            "For *future* events, you really need to store two pieces of information:\n\n- Timestamp, in UTC\n- Timezone of the event (in your case, the timezone of the store)\n\nNote - I didn't say *offset* of the event. I said *timezone*.  The offset of a given timezone changes throughout the year - that's what daylight saving time is.\n\nFor *past* events, it's enough to just store the timestamp with offset.",
            "https://youtu.be/-5wpm-gesOY?si=Kj2BaGqxOvuwZW53\n\nAlways a good watch",
            "https://blog.nodatime.org/2011/08/what-wrong-with-datetime-anyway.html\n\nGood write-up why just saving utc plus offset still isn't enough.",
            "Always srore UTC + TimeZoneId. Remember, some hours don't exist and some exist twice (DST changes). In UTC everything is unique.",
            "As others have said, store UTC DateTime and timezone. You can convert them to a local DateTimeOffset, which is very similar to a DateTime but has an Offset property. It's good to make some helper functions and unit test them thoroughly.\n\nBeware of AddHours, AddDays, etc. Most weeks have 168 hours, but in the week when the clocks go forwards there are 167, and 169 in the week when they go back. The Add methods do not take this into account. I had to make my own AddHoursDst extension methods to handle this.",
            "I'd store opening hours as DayOfWeek and a tuple of TimeOnly.",
            "The usual strategy is to use UTC for stored times as much as possible and convert to local time on display.",
            "The new DateTimeOffset type is your friend",
            "And that is why you need to use Yoda time, or as others mentioned DateTimeOffset and offset the utc + timezone",
            "By doing everything in UTC, basically. Showing a timestamp on the screen in a specific Timezone is a UI concern.\n\nAlways get an offset with times, and store it in either UTC or with the offset info.\n\n.Net handles timezones just fine, in fact the Timezone conversions are daylight savings aware (assuming you stay up to date).\n\nhttps://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo?view=net-8.0",
            "You need to store times as UTC in your database. When you return such times to the front-end, leave them as is, in UTC. And let the front-end format the dates to the local format in the browser of the client.",
            "Same here. Don\u2019t reinvent the wheel. Use Noda",
            "Came here to say the same...noda",
            "Storing in UTC is wrong for user-facing datetimes, though. If the definition of the timezone changes (i.e. a locale decides to stop observing DST, or changes the cutover dates), you will still get DST shifts. User-facing times should be stored in local time along with the timezone.\n\nAlso, for recurring events that happen at a particular time of day rather than at a particular absolute time (such as OP's use case of showing a store's business hours), storing as absolute times is a poor choice to begin with. It would be better to store the times in a way that is oblivious to timezones.\n\nI'm envisioning something like the following as a basic starting point:\n\n```\nrecord StoreHours(TimeOnly OpensAtTime, TimeOnly ClosesAtTime);\nrecord WeeklyStoreHours(DayOfWeek DayOfWeek, StoreHours StoreHours);\nrecord DateStoreHours(DateOnly Date, StoreHours StoreHours);\n\nclass StoreHoursSchedule\n{\n    public List<WeeklyStoreHours> WeeklyStoreHours { get; } = [];\n    public List<DateStoreHours> DateStoreHours { get; } = [];\n}\n```",
            "We have stored UTC time also the offset hours.",
            "New? It's been in .NET since Framework 2.0.",
            "This is the way.",
            "Format is one thing, but I don't agree with just giving a utc timestamp to the front end. For me that's situational. \n\nIf I want to know what time Georgia is playing Czechia tonight I want to see it my own local time because that's when I should turn the telly on. \n\nIf I want to know what time my flight to Seoul will land I want to see that in Korean time because I'm going to plan the rest of the day around that. \n\nThe solution is obviously then utc plus timezone. Then the front end can choose which to show.",
            "up vote button",
            "This. For future times, don't store UTC. Store what the user gives you\n\nhttps://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/\n\nhttp://www.creativedeletion.com/2015/03/19/persisting_future_datetimes.html",
            ">toring in UTC is wrong for user-facing datetimes, though. If the definition of the timezone changes (i.e. a locale decides to stop observing DST, or changes the cutover dates), you will still get DST shifts. User-facing times should be stored in local time along with the timezone.\n\nA TimeZoneInfo is able to convert to/from UTC. But - I will admit that it's been a while since I looked into this. You may be right - but the thing that's most important (and what we agree on) is that storing timezone is key.\n\n>I'm envisioning something like the following as a basic starting point:\n\nI agree - store hours aren't the same as a recurring calendar event - it's a time of day thing. Something like your proposed data structure is probably best - as long as you also store the timezone of the store, so you can show the open/close times in the users timezone if it differs (e.g., the user is looking at the store hours online in order to *call* the store, and they are in a different timezone)",
            "Storing in UTC is always right.  Displaying in UTC is always wrong.  In his problem space he's talking about store hours, he knows the locale.",
            "I don\u2019t understand the problem well enough to be more helpful but I suspect the offset is the problem. Don\u2019t store that. Just convert UTC just-in-time when you use it.",
            "I get that but it\u2019s rarely taught to new developers. Most of the \u201clearn C#\u201d materials use DateTime. Maybe that\u2019s changed by now.",
            "I am here since .NET2.0, and somehow I have impression it is new too...",
            "The frontend can choose with datetime plus offset as well. It just needs to know its other offset to convert easy peasy. \n\nThe only time this isn't sufficient is scheduling where things get hairy when something is at 8, but that follows dst on a recurrence for example. \n\nDates/times are hard, but datetime offset covers a majority of scenarios if paired with tz info for locations or users (stored or dynamic front end accessed)",
            "No.\n\nWhen you convert a local time to UTC for a future date that conversion is not reversible because the rules governing that conversion can change.\n\nImagine for a moment that I set a meeting for 6 am in two months and in between setting the meeting and the meeting occurring my local time zone changes. The user still plans on having that meeting at 6 am, but 6 am is now a different time in UTC than it was when the meeting was created. This absolutely happens and it can happen with very little notice.\n\nIt's also common for multinational companies to have the people who do planning or data analysis working in a different location than the site where the actual actions will take or have taken place. Those people will input and query data in site local time which may be completely different than either client or server time.\n\nUTC is OK for past events that occurred at an absolute time, in particular it's great for audit logs, but it's just not valid for the future or for timestamps provided by users.",
            "We are getting the Culture Info from the machine of user. We have configured the locale and globally Timezone is set AEST. But the stores are in different timezones. During DST the time of opening and closing is showing incorrect.",
            "The TimeZoneInfo class is daylight savings aware, so if you use a date in the future when the offset will be different, it knows that.",
            "I'm wondering why you don't just display the store hours in their own local time. I've never seen a store's website that converted their hours to the user's home timezone. Imagine if it said they close at 17:00 and you got there at 16:10 only to find the store closed ten minutes ago.\n\nBut like /u/Noldir81 said, an offset isn't enough, because the UTC offset of a timezone that does DS changes throughout the year. You need to store the timezone name (`Australia/Melbourne` or whatever) instead.",
            "Because you're using Standard Time when you need to be using Daylight Time. Standard Time itself doesn't change during daylight savings. You just need to not use it. You need to be converting AEST to AEDT during daylight savings, and displaying that instead."
        ]
    },
    "Look ma, no Dockerfile! - Publishing containers with the .NET SDK": {
        "title": "Look ma, no Dockerfile! - Publishing containers with the .NET SDK",
        "score": 45,
        "url": "https://blog.martincostello.com/look-ma-no-hands-publishing-containers-with-the-dotnet-sdk/",
        "content": "",
        "num_comments": 28,
        "comments": [
            "What\u2019s wrong with dockerfile?",
            "Interesting! Definitely something I'm going to consider over buildpacks in a no-frills I want to get my code to a image way of life",
            "I used to write dockerfiles in CI via custom powershell scripts, which in turn used MSBuild assemblies to extract some project-level properties. then feed these dockerfiles to Kaniko.\n\nI\u2019m glad this exists now, since what I did was basically filling this gap with a bespoke solution.",
            "AWS Lambda lets you host container-less dotnet apps. Dirt cheap too.",
            "For .NET the big problem is project references and solution level context. \n\nHere\u2019s a great example:\n\nhttps://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Services/Basket/Basket.API/Dockerfile\n\nThis is quite frankly a dumpster fire",
            "I use this from the build server to create a docker image and publish it to a registry. Super useful that\u2019s it\u2019s builtin",
            "Nothing wrong with Dockerfiles per say, but it's very helpful to be able to handle all of the tagging / publishing using repository + runtime metadata using dotnet publish - the one thing this tool can't do super well so far is multi-targeting (i.e. building images that support ARM, x64, et al at under the same tags) but I believe they have plans to fix that",
            "Other folks have hit on many of the relevant points, but for me the best part of this is never having to update my base image + tag ever again. No matter how I choose to build my app (framework dependent, self contained, AOT) and which TFM I use, the container is always correct.",
            "It requires docker.",
            "What's wrong with plain SQL? Too hard for someone, so we got an Entity Framework that makes life 100x harder\n\nThis probably will help someone who does not understand Dockerfiles, but will be a pain in the ass for other team members",
            "Fun fact - for the prototype of this SDK Containerization I used Jib + a JRE in a Nuget Package with a little bit of MSBuild to show the potential. Seems very similar to your old pathway!",
            "Ok...",
            "Why do this? We usually keep docker docker files next to projects and expect to run docker commands from the repository root as context and just specify the file.\n\n`docker build -f path/to/your/dockerfile .`\n\nAnd then in the dockerfile just \n\n`COPY . .`\n\nThen you can write everything as if you are in the repo root and you have everything available. Maintaining that basket api dockerfile seems like a nightmare, especially if you publish multiple projects.",
            "Docker-within-Docker and third party NuGet feeds is another dumpster fire that is solved by having this Container SDK instead",
            "It doesn\u2019t to build and push the container image, it requires docker to run the image locally.",
            "But you can\u2019t run the produced image without docker anyway\u2026 I can\u2019t imagine anyone builds containerized apps but resists to install docker (or its alternatives), either on local machines or in ci.",
            "With this kind of pattern, aren't you copying far too much context into your builds and doing rebuilds more often than you'd expect? One of the things we saw with many Dockerfiles was that it took far too much management or knowledge to take advantage of layer caching to prevent rebuilds.",
            "> Why do this? We usually keep docker docker files next to projects and expect to run docker commands from the repository root as context and just specify the file.\n\nI think is an important detail which is so often missed or people trying to work around.\n\nI don't really like this \"magic\" being introduced around containers. But at the same time, if this brings more projects closer to a sane hosting environment, then who am I disagree.",
            "But this means that I don't need to have docker on CI.",
            "Almost no production deployment modes use docker these days.",
            "To be honest it was never a problem for me. When you publish a few projects (2-3) it never mattered to us. What you lose what 20 seconds max on a nuget restore? Nowadays we use a lot of lambdas mostly with NativeAOT and a few as docker based lambdas. When publishing with NativeAOT takes sometimes at least a minute, shaving a few seconds on restore and build does not really matter as much.\n\nAlso we have projects where we have to use aws code build with code pipelines - there releasing docker based lambdas / fargate services time of individual builds doesn't really matter since each image is built parrallel on different envs - in that case caching doesn't even matter since those builds cant share cache.\n\nAlso have a good dockerignore so your build context doesn't grow too big - that is a worthwile cache/time/performance optimization.",
            "What do they use then? Podman? If you treat podman as a different thing from docker, then it is also wrong to say dockerfiles require docker, because podman can build them too.",
            "containerd. K8s, for instance.",
            "Ok I see, in this case it does provide a benefit so you don\u2019t need another image builder, and you only need the runtime. But doesn\u2019t seem like a big advantage to me since as long as you have anything that is not dotnet you\u2019ll need something else to build the image\u2026",
            "True. But I pretty much just write .net apps.\n\nAlso, docker build can't handle multi os images. This new SDK support kinda can.",
            "I believe that's what the docker buildx command is for. I've been using it to build multi arch images and it has worked pretty well for my small use case.",
            "Nope. Same issue. It's a docker desktop limitation that the daemon has to be switched from Windows to Linux."
        ]
    },
    "What is expierenced devs feelings with there first ticket when joined a new company ?": {
        "title": "What is expierenced devs feelings with there first ticket when joined a new company ?",
        "score": 43,
        "url": "https://www.reddit.com/r/dotnet/comments/1dla69w/what_is_expierenced_devs_feelings_with_there/",
        "content": "\nJoined another .NET company with their own special ways of doing things. Love the company and people \n\nGot my first ticket and found there was a lot of back and forth because the requirements or specs weren't right.\n\nYou feel like you're fixing others' issues.\n\nI've been a developer for 25 years, but at any new company I join, the first ticket is always the hardest.\n\nYou're still learning their ecosystem and coding style standards.\n\nIt just makes you feel so drained when you know if standards keept to you'd be fine.",
        "num_comments": 23,
        "comments": [
            "The first ticket has me wondering if I'm too bad at programming and should pursue another career. By the 10th or so I'm starting to understand it's not a me problem.",
            "When I first joined this new company, I wished there were some standards followed like my previous company. Turns out in this company, there is no pull request review done, it's good if the thing works and bad if it doesn't. That seems to be a lot more stressful as the blame comes to the single developer who coded that feature.",
            "First tickets are so important for learning the zietgiest and style of a team. I try and get involved in actual work as quickly as possible these days - even if it's just a relatively trivial bugfix. Just simple things like:\n\n  \n- How do I test this?\n\n- How do I run it locally?\n\n- What does this actually do in the system?\n\n- What's the tooling you're all using?",
            "Dafuq is this? Dafuq is that? Dafuq am I doing?",
            "I get no satisfaction because I know my change is probably going to break something obscure. I don't know the ins and outs of their system yet, the whole team knows it, and it's expected. \n\nEither you always start with something low impact, so that failure is a valid way of learning the system. Or you get some morale hurting PR comments.",
            "My first dev job and first ticket were awesome. They gave me some low-hanging fruit for 2 sprints, then I flourished to senior dev over the next 3 years.\n\nThen we have a company re-organization where I was put under a BA who had less than 10% of the skills of the previous BA team, and I just couldn't keep up. \n\nI went from taking the hardest things that nobody wanted to touch to not knowing who to reach out to across the organization. I quit pretty quick.",
            "Here we go again.",
            "When I onboard new devs I never throw them to the wolves like that. I give them very easy tickets up front and slowly increase the complexity over weeks or months, to gradually acclimate them to our systems, people, processes, structure, data, policies, coding style, etc. Usually the first 10-20 tickets expose them to 1 new thing at a time so they can adapt slowly.\n\nThe stories I'm reading in these comments are nuts.",
            "I've been doing this for as long as you and in my experience it's the same everywhere, organised chaos that you grow into after a while.",
            "my process when onboarding devs/ first day is to give them an easy ticket/fix they can do in a few hours, show them how the deploy process works and let them actually schedule the production release\n\nseems to go over pretty well",
            "Mostly dealing with the process and the ugly realization everyone's code sucks.",
            "Junior, mid, senior - doesn't make that much difference when thrown into a ball of mud on day 1",
            "I started my second ticket at my current company on Monday. I've been a developer for 15 years.\n\nAs soon as I opened up the ticket, I put my head in my hands - \"What have I gotten myself into? Am I perhaps not cut out for this at all?\"\n\nI had a PR out later that day. It wasn't as hard as I thought at all.",
            "My first ticket at last job was a 1500 line stored procedure rip.\n\nStill remember it was called `usp_load_activitymanagement`.  Curse you",
            "Even with code review shit can happen, its not bullet proof. Generally what you look for is code quality and readability. To understand the problem you need to look at the ticket as well and probably debug it yourself. Might as well pair program at that point.\n\nI just do PRs for new developers joining the team.",
            "100%. At the last company I worked for, the very first thing any new dev does is add their name to the script that populates the user table in the debug DB. It's a cute way to give a new dev a task they can't mess up, but still runs them through the process of creating a PR and getting it merged.",
            "why have u said this",
            "It does feel that way doesn\u2019t it at times ur trying to get into everyone elses mindset.",
            "The nice thing about code reviews is it spreads the responsibility a bit. Sure it doesn't catch everything, but it's more of a team effort.",
            "Developers at all levels benefit from PRs and review. I do PRs and follow all the same protocol I would reviewing someone else's code when I go over my own. No code should really ever get merged without some review.",
            "Humans write bugs. The team\u2019s process catches the bugs.",
            "I think after years doing the job, most places are fairly similar. Sometimes they have their stuff sorted but usually it is a shit show. A small handful of staff keeping the place afloat.",
            "I guess. Personally I prefer to pair programming to share knowledge, but its generally for more complex features."
        ]
    },
    "Starting MAUI after ASP.NET ": {
        "title": "Starting MAUI after ASP.NET ",
        "score": 1,
        "url": "https://www.reddit.com/r/dotnet/comments/1dlv93u/starting_maui_after_aspnet/",
        "content": "Good afternoon all,\n\nI've been developing application in ASP.NET for the past few years both in education and also employment. Most of my experience has been with ASP.NET Framework MVC however I have dabbled with WebForms and more recently I've started working with ASP.NET Core and also Blazor.\n\nI've just recently started learning a bit of MAUI too which is completely new to me as I've never worked with native applications before. Unfortunately no one at my employment has done any native application development either so this is all self learning at this point.\n\nWhile I am getting a basic grasp of how it works, I'm wondering if there are any top level words of wisdom or tips you guys have when it comes to working with native applications that doesn't apply to web applications? Just a little conscious that there will be stuff to do with making these applications that I don't even know that I don't know.",
        "num_comments": 0,
        "comments": []
    }
}